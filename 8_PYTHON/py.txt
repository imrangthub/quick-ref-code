#################################################
#                 PYTHON                        #
#################################################
=>where python
=>where pip

=>python --version
=>pip --version
=>pip list
=>pip show packageName

=>pip uninstall requests





=================================================
##Basic                                          
=================================================




##doc
=================================================
pip is the python dependency/package manager as maven/npm.
location to package manage: userHome/lib/pythonVerson/packageName
/lib/python2.7


pip (Package Installer for Python) is the default package manager for Python.
It allows you to install, upgrade, and manage Python libraries from the Python Package Index (PyPI).

Common pip commands:
    Install a package: pip install package_name
    Upgrade a package: pip install --upgrade package_name
    Uninstall a package: pip uninstall package_name
    List installed packages: pip list
    Check outdated packages: pip list --outdated
    Show package details: pip show package_name




=================================================
##LearnPython
=================================================


https://docs.python.org/3/tutorial/index.html

Python Programming Concepts 
Basic Syntax and Structure 
Object-Oriented Programming (OOP) 
Control Flow 
Working with Data 
Functions 
Advanced Concepts 
Data Structures & Algorithms 
Libraries and Frameworks 
Modules and Packages 
Testing and Debugging 
File Handling 
Version Control 
Error Handling 
Best Practices 


Details
------------------------------
Basic Syntax and Structure:
   Variables and Data Types
   Operators (arithmetic, comparison, logical, etc.)
   Comments and Docstrings
Control Flow:
   Conditional Statements (if, elif, else)
   Loops (for, while)
   Loop Control (break, continue, pass)
Functions:
   Defining and Calling Functions
   Arguments and Parameters
   Return Values
   Lambda Functions
   Scope (local, global)


Data Structures & Algorithm:
   Lists
   Tuples
   Dictionaries
   Sets
   List Comprehensions
   Dictionary Comprehensions
Modules and Packages:
   Importing Modules
   Standard Library Modules
   Installing and Using Third-Party Packages (pip)
File Handling:
      Reading and Writing Files
      Working with File Paths
      Time Complexity
      Space Complexity
      Sorting algorithms
      Linked list
      Stack
      Queue

Error Handling:
   Exceptions (try, except, finally)
   Raising Exceptions
   Custom Exceptions
Object-Oriented Programming (OOP):
   Classes and Objects
   Methods and Attributes
   Inheritance
   Polymorphism
   Encapsulation
Working with Data:
   Strings (manipulation and formatting)
   Regular Expressions
   Dates and Times

Advanced Concepts:
   Decorators
   Generators and Iterators
   Context Managers
   Metaclasses
Libraries and Frameworks:
   Common Libraries (e.g., NumPy, pandas, matplotlib)
   Web Development (Flask, Django)
   Web Scraping (BeautifulSoup, Selenium, Scrapy)
   Data Science and Machine Learning (scikit-learn, TensorFlow, PyTorch)
Testing and Debugging:
   Writing Tests (unittest, pytest)
   Debugging Tools and Techniques




##Datails:
=============================================

Python Indentation:
---------------------------------------------
if 5 > 2:
  print("Five is greater than two!")

print("Hello, World!")


Variable & Input/Output Function
Strings Basic Concept 
String Methods 
Data Types in Python
Python Operators (Part-1)

The number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.
if 5 > 2:
 print("Five is greater than two!") 
if 5 > 2:
   #This is a comment
   print("Hello, World!")

OR
"""
This is a comment
written in
more than just one line
"""
print("Hello, World!")


Variable & Input/Output Function
Strings Basic Concept 
String Methods 
Data Types in Python
Python Operators (Part-1)


Comment:
-----------------------------
   #This is a comment
   print("Hello, World!")

OR
"""
This is a comment
written in
more than just one line
"""
print("Hello, World!")


Variable & Input/Output Function
====================================
Variables do not need to be declared with any particular type, and can even change type 
after they have been set.

Example:
x = 4       # x is of type int
x = "Sally" # x is now of type str
print(x)


You can get the data type of a variable with the type() function.
x = 5
y = "John"
print(type(x))
print(type(y))



Python allows you to assign values to multiple variables in one line:
Make sure the number of variables matches the number of values, or else you will get an error.

x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)


If you have a collection of values in a list, tuple etc. 
Python allows you to extract the values into variables. This is called unpacking.

fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)


In the print() function, you output multiple variables, separated by a comma:

x = "Python"
y = "is"
z = "awesome"
print(x, y, z)



Global Variables:
Variables that are created outside of a function (as in all of the examples in the previous pages) are 
known as global variables.

x = "awesome"
def myfunc():
  print("Python is " + x)
myfunc()



The global Keyword:
Normally, when you create a variable inside a function, that variable is local, 
and can only be used inside that function.
If you use the global keyword, the variable belongs to the global scope:

def myfunc():
  global x
  x = "fantastic"

myfunc()

print("Python is " + x)



PythonBuilt-in Data Types:
----------------------------------
In programming, data type is an important concept.

Variables can store data of different types, and different types can do different things.
In Python, the data type is set when you assign a value to a variable:
Python has the following data types built-in by default, in these categories:

Text Type:	        str
Numeric Types:	    int, float, complex
Sequence Types:	    list, tuple, range
Mapping Type:	    dict
Set Types:	        set, frozenset
Boolean Type:	    bool
Binary Types:	    bytes, bytearray, memoryview
None Type:	        NoneType


You can get the data type of any object by using the type() function:
x = 5
print(type(x))


Setting the Specific Data Type:
If you want to specify the data type, you can use the following constructor functions:
Example:	
    x = str("Hello World")	
    x = int(20)	
    x = float(20.5)



Python Casting:
Casting in python is therefore done using constructor functions:
x = int(1)   # x will be 1
y = int(2.8) # y will be 2
x = float(1)     # x will be 1.0
y = str(2)    # y will be '2'



Strings Basic Concept 
String Methods 

Python Operators (Part-1)

