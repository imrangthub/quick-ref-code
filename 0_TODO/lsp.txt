#################################################
#                 L-SP                          #
#################################################


https://brain2life.hashnode.dev/how-to-set-helpful-aliases-for-kubernetes-commands-in-ubuntu-2004

Faster delete pod
=>k delete po ubuntu-sleeper --force

CKAD-feedback


Assignment:
===============================================
Create configmap
Set user role rolebinding and get pod


CKAD-EXAM-CHAPTER
================================================

-CoreConcept
 Done, concept and patise test.

-Configuration
    ##Encrypting the Secret data in Rest
    -------------------------------------------------


-Observability
-POD Design
-Service&Networking
-State Persistence
-Update:2021-sep 

-Adtional Practice
-LightLab
-MockExam



If you have decided to write this exam, the following points will help you:
a. Complete the KodeKloud CKAD course and do the hands-on exercises properly.
b. Use internet sources to solve as many questions as you can.
c. If you are CKA certified, focus only on the delta part.
d. After purchasing the exam, use killer.sh to practice questions and familiarize yourself with the exam environment. Take these questions seriously and try to solve them, or use the provided solutions to help you understand.
e. On the exam day, stay calm. The exam is not as difficult as people make it out to be, and the provided time is sufficient. Try to solve the questions you know first in the first 90 minutes, then use the remaining 30 minutes to tackle the more difficult questions. Do not get stuck on any question as it will consume your time.
f. Use a high-spec laptop, as using a lower-spec laptop like an i5 can cause performance issues during the exam.
g. The exam environment is known to be poor, with lags and hangs, but have patience. You will have sufficient time, so don't try to rush as the system may not work properly.



ConfigMap:
----------------------------------
We can Edit configmap in a single command.
=>kubectl edit configmap my-configmap


Set complate env with value:
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  containers:
  - image: nginx
    name: my-app
    env:
     - name: TYPE
       value: web application
     - name: COLOR
       value: blue
  restartPolicy: Always


Set env value from configmap:
apiVersion: v1
kind: Pod
metadata:
  name: my-app2
spec:
  containers:
  - image: nginx
    name: my-app
    env:
     - name: COLOR
       valueFrom:
          configMapKeyRef:
             name: webapp-config-map
             key: APP_COLOR
  restartPolicy: Always


A single env now set value from configmap:

=>kubectl exec my-app -- env
  APP_COLOR=darkblue




Set complate env from configmap:

apiVersion: v1
kind: Pod
metadata:
  name: my-app3
spec:
  containers:
  - image: nginx
    name: my-app
    envFrom:
      - configMapRef:
          name: webapp-config-map
  restartPolicy: Always

When it done all env abailable in this pod as list:
=>kubectl exec my-app3 -- env
  APP_COLOR=darkblue
  APP_OTHER=disregard


Volume mount from configmap:

apiVersion: v1
kind: Pod
metadata:
  name: webapp-green
  labels:
    name: webapp-green
spec:
  containers:
    - name: simple-webapp
      image: kodekloud/webapp-color
      args: ["--color", "green"]
      volumeMounts:
        - name: my-app-volume
          mountPath: /path/to/config
  volumes:
    - name: my-app-volume
      configMap:
        name: webapp-config-map

This way this data place on you pod location, and user by app inside pod.
=>k exec webapp-green -- ls /path/to/config
APP_COLOR
APP_OTHER

=>k exec webapp-green -- cat /path/to/config/APP_COLOR
darkblue


