#################################################
#                 L-SP                          #
#################################################
https://kodekloud.com/lessons/challenge-1-3/
https://kodekloud.com/lessons/certified-kubernetes-application-developer-mock-exam-series/


alias k='kubectl'
alias cc='clear'
alias kk='kubectl get'
alias ke='kubectl edit'
alias kkk='kubectl delete'
alias kc='kubectl create'
alias kd='kubectl describe'


Ing:
===========================
Deployment multiple label issue for service.
2)Waht is emptyDir() in volues

https://www.youtube.com/watch?v=ZwC2NWWUDL0

ps -ef | grep kube-apiserver | grep admission-plugins
kubectl exec -it kube-apiserver-controlplane -n kube-system -- kube-apiserver -h | grep 'enable-admission-plugins'

privileged mode
LimitRange

KCH:Skip-Q











=================================================
Helm:
=================================================

=>helm repo ls 
List the helm repositories.

=>helm ls -A
Deployed Helm charts releases list, Here lists all the releases of all the namespaces.


Official Helm Stable Charts: https://charts.helm.sh/stable
Prometheus Helm chart repository: https://prometheus-community.github.io/helm-charts
Rancher's Helm chart repository: https://releases.rancher.com/server-charts

=>helm repo add repoName https://charts.bitnami.com/bitnami
=>helm repo ls 
Add the repostiory to Helm.
It allows us to browse and install charts from the new repository using the Helm package manager.


=>helm search repo nginx
=>helm search hub nginx
Search Helm charts, Its return last lates version. for more

=>helm search repo bitnami/joomla -l | head -n10

When you run "helm search repo nginx", it will query the repositories you have added to your Helm configuration 
When you run "helm search hub nginx", it queries the Helm Hub and returns any matching charts related to nginx 
that are available on the Helm Hub. The Helm Hub is a public repository and can be accessed by anyone.


=>helm search repo polar | grep nginx
=>helm install nginx-server polar/nginx 
=>helm  install jom13 bitnami/joomla  --version=13.3.19
Search and Inatall for the nginx chart in a polar chart repository



cd /root/
=>helm lint ./newVersion
Validate the helm chart by using the helm lint command


=>helm uninstall oldVersioApp -n default
=>helm install -myNewApp ./new-version
=>helm install --generate-name ./new-version
Install/Uninstall application


=>helm search repo lvm-crystal-apd/nginx -l | head -n30
The helm search command searches for all the available charts in a specific Helm chart repository. 


=>helm upgrade nging ofc/nginx-ingress --version=1.41.1
=>helm upgrade lvm-crystal-apd lvm-crystal-apd/nginx -n crystal-apd-ns --version=13.2.12 --set replicaCount=2
Upgrade the helm chart and increase the replica count.

=>helm ls -n crystal-apd-ns
Look under the CHART column for the chart version for varify.


=>helm repo update myHelmChart
Now, update the helm repository with the following command: -
The above command updates the local cache of available charts from the configured chart repositories.









 1 apiVersion: v1
  2 kind: Pod
  3 metadata:
  4   creationTimestamp: null
  5   labels:
  6     run: dos-containers-pod
  7   name: dos-containers-pod
  8   namespace: ckad-multi-containers
  9 spec:
 10   containers:
 11   - image: nginx:1.17
 12     name: alpha
 13     env:
 14       - name: ROLE
 15         value: "SERVER"
 16   - image: busybox:1.28
 17     name: beta
 18     command: ["sh", "-c",'echo "Hello multi-containers"']
 19     resources: {}
 20   restartPolicy: Always
 21 status: {}


apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: dos-containers-pod
  name: dos-containers-pod
  namespace: ckad-multi-containers
spec:
  containers:
  - image: nginx:1.17
    name: dos-containers-pod
    env:
      - name: ROLE
        value: "SERVER"
  - image: busybox:1.28
    name: beta
    command: ["sh", "-c",'echo "Hello multi-containers"']
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}


apiVersion: v1
kind: Pod
metadata:
  name: tres-containers-pod
  namespace: ckad-multi-containers
spec:
  containers:
  - name: primero
    image: busybox:1.28
    env:
    - name: ORDER
      value: FIRST
  - name: segundo
    image: nginx:1.17
    ports:
    - containerPort: 8080
  - name: tercero
    image: busybox:1.31.1
    env:
    - name: ORDER
      value: THIRD
    command: ["/bin/sh", "-c", "tail -f /dev/null"]




apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-access
  namespace: default
spec:
  podSelector:
    matchLabels:
      access: redis
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379

To create deployment:

kubectl create deployment redis --image=redis:alpine --replicas=1
To expose the deployment using ClusterIP:

kubectl expose deployment redis --name=redis --port=6379 --target-port=6379
To create ingress rule:

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-access
  namespace: default
spec:
  podSelector:
    matchLabels:
       app: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          access: redis
    ports:
     - protocol: TCP
       port: 6379

       
               
spec:
  containers:
  - name: simple-webapp
    image: kodekloud/event-simulator
    env:
    - name: OVERRIDE_USER
      value: USER99394
    volumeMount:
    - mountPath:
        path: /log/app.log
        name: app-log
    volumes:
    - name: app-log
      hostPath:
        path: /opt/outputs/e-com-1123.logs
        type: FileOrCreate
        

cat fsvc.yaml 
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: fsvc
  name: fsvc
spec:
  ports:
  - name: 80-80
    port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 30080
  selector:
    env: prod
  type: NodePort
status:
  loadBalancer: {}

controlplane ~ âžœ  cat pod1.yaml 
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    env: prod
  name: ng
spec:
  containers:
  - image: nginx
    name: ng
    resources: {}
    volumeMounts:
    - name: pod-vol
      mountPath: /usr/share/nginx/html
  volumes:
  - name: pod-vol
    hostPath:
      path: /root/imran/
      type: DirectoryOrCreate
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}





https://brain2life.hashnode.dev/how-to-set-helpful-aliases-for-kubernetes-commands-in-ubuntu-2004

Faster delete pod
=>k delete po ubuntu-sleeper --force

CKAD-feedback


Assignment:
===============================================
Create configmap
Set user role rolebinding and get pod


CKAD-EXAM-CHAPTER
================================================

-CoreConcept
 Done, concept and patise test.

-Configuration
    ##Encrypting the Secret data in Rest
    -------------------------------------------------


-Observability
-POD Design
-Service&Networking
-State Persistence
-Update:2021-sep 

-Adtional Practice
-LightLab
-MockExam



If you have decided to write this exam, the following points will help you:
a. Complete the KodeKloud CKAD course and do the hands-on exercises properly.
b. Use internet sources to solve as many questions as you can.
c. If you are CKA certified, focus only on the delta part.
d. After purchasing the exam, use killer.sh to practice questions and familiarize yourself with the exam environment. Take these questions seriously and try to solve them, or use the provided solutions to help you understand.
e. On the exam day, stay calm. The exam is not as difficult as people make it out to be, and the provided time is sufficient. Try to solve the questions you know first in the first 90 minutes, then use the remaining 30 minutes to tackle the more difficult questions. Do not get stuck on any question as it will consume your time.
f. Use a high-spec laptop, as using a lower-spec laptop like an i5 can cause performance issues during the exam.
g. The exam environment is known to be poor, with lags and hangs, but have patience. You will have sufficient time, so don't try to rush as the system may not work properly.



ConfigMap:
----------------------------------
We can Edit configmap in a single command.
=>kubectl edit configmap my-configmap


Set complate env with value:
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  containers:
  - image: nginx
    name: my-app
    env:
     - name: TYPE
       value: web application
     - name: COLOR
       value: blue
  restartPolicy: Always


Set env value from configmap:
apiVersion: v1
kind: Pod
metadata:
  name: my-app2
spec:
  containers:
  - image: nginx
    name: my-app
    env:
     - name: COLOR
       valueFrom:
          configMapKeyRef:
             name: webapp-config-map
             key: APP_COLOR
  restartPolicy: Always


A single env now set value from configmap:

=>kubectl exec my-app -- env
  APP_COLOR=darkblue




Set complate env from configmap:

apiVersion: v1
kind: Pod
metadata:
  name: my-app3
spec:
  containers:
  - image: nginx
    name: my-app
    envFrom:
      - configMapRef:
          name: webapp-config-map
  restartPolicy: Always

When it done all env abailable in this pod as list:
=>kubectl exec my-app3 -- env
  APP_COLOR=darkblue
  APP_OTHER=disregard


Volume mount from configmap:

apiVersion: v1
kind: Pod
metadata:
  name: webapp-green
  labels:
    name: webapp-green
spec:
  containers:
    - name: simple-webapp
      image: kodekloud/webapp-color
      args: ["--color", "green"]
      volumeMounts:
        - name: my-app-volume
          mountPath: /path/to/config
  volumes:
    - name: my-app-volume
      configMap:
        name: webapp-config-map

This way this data place on you pod location, and user by app inside pod.
=>k exec webapp-green -- ls /path/to/config
APP_COLOR
APP_OTHER

=>k exec webapp-green -- cat /path/to/config/APP_COLOR
darkblue


