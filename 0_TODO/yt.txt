#################################################
#                 YT                           #
#################################################


ToStartTopic
------------------
Hello and welcome back in this section we are going to take a look 
at a super commonly asked interview question the LinkList !

We are going to take a look at: What the are, how they work how they compare to array how to bu8ild our 
own and then go over some really key fundamental things for you to know during your interview.

So let's start by taking a liik at what a linked list is.


Very simply a linked list is nothing more then a serise of nodes linked together for me to list.
That's it !

Now the way linkList work is:- you always start with the very first element.
this one is a bit special. It's called the head.
That's the very first element of out list, that one does not have anything pointting to it
and we just call it hte head.

When you add subsequent nodes, all you do is you create a new node and then 
have the previous pointer point to it via its nest pointer here.

 That's why it's called a linkedList.
 That's the arrayList.


ToStartTopic
------------------
So now we're going to look linkedList.
This will be the first dataStrecture we build in the cousere.
And I'm going to start out explaining linked List by comparing them to and array list
and talk about the differences between an array list and a LinkList.




ToStartTopic
------------------
This section we'are going to take a look at what stack and queues are, 
how they work and what is there 



CompleteTopicAndSummeize
--------------------------
Alright ! There you have it. Big o notation.
This is a big step, you can do that now.
You have got the tools, you have got the basic language.
all you need now is practice and that's what we're going to do for the 
remainder of the course.

But at the end of the day you already know everything there is to 
know basically about how Big-O notation works.

Congratulation ! you know basic/advence now.
or
Congratulations you now underestand the binary serach tree.
Here's what you need to know for the interviews.







#Random
=================================================


This is a great way to bakek in these concepts


















To sow somthis additional same as
----------------------------------
So there are a couple of other things i want to show with pointers here.



Create some this and run it
-------------------------
As soon as you crate a Hashmap, this line of code up here will be automaticly generate.
So you dont  actually have to do this part.
And then this part down here is where we make map one have value.
And then we have map tow set equeal to map one
And then we'll just print out map one and map tow here.
So I'll run this.





Ok, so now Lets flip back
    Ager page jawa.

This is how it work when you not use the pointer.
    Kono keso na use korle kemon how 


