#################################################
#                 YT                           #
#################################################


=================================================
##ForDockerCourse:
=================================================



1) Introduction
=================================================

00:00-to-00:40mm
================
StartngPeech:
    Hey there! Welcome to this tutorial on Docker.
    If you are new to Docker, and want to learn Docker from scratch you’re in the right place.

    In this tutorial, I'll explain Docker from the very beginning.
    What is docker, how this docker thing works, why it’s so popular, and definitely TheEasyWay!

    Each topic will be explained with hands-on exercises to make it clear and practical.
    We are gonna use different programming languages, such as  Java, Python, PHP javaScript for practice projects. 
    This will be more interesting and gain a clear understanding of 
    how docker deals with various programming languages.

    and finally, we will deploy a Three Tier application including frontend, backend and Database using docker.
    to get a clear picture.

    Really,
    By the end, you’ll have a solid understanding of Docker and be ready to start using Docker in 
    real-world projects.
    So, grab your coffee, get comfortable, and let’s dive into the world of Docker!


00:40mm-to-00:50mm
==================
AboutDocuemnt:
    In this tutorial, I am gonna use this Document to organize the topic-resource, uses-commands, diagrams, screenshots, etc etc.
    and I will share it with you.
    The link of this Document will be available in the video description and first comment.
    And I will also share the GitHub link of the project and source code that will be used in this tutorial.
    


00:50mm-to-1:05mm
=================
You don’t have to be a programmer to learn Docker.
Anyone can learn Docker without coding skills.
actually, docker focuses on deployment and system management, not application development.



1:05mm-to-2:40mm
================
Introducing Tutorial Topics

Introduction
Just course Intro.


Docker Installation:
Here we Learn how to install Docker on various platforms, including Windows, macOS, and Linux.
Set it up step-by-step to ensuring Docker runs smoothly on your system and get started quickly.

Getting Started with Docker
Run our first container and we will explore some basic commands. 
a HelloWorld thing of docker.
Get familiar with Docker’s key parts like images and containers.

Docker in Depth
Understand how Docker works behind the scenes. 
Learn about its components, engine, internal-architecture, and how it makes apps run faster.

Docker Images and Containers
a deep dive into Docker images and containers.
Learn how to create, manage, and optimize Docker images and containers for efficient application deployment.
Find out what images and containers are and how they’re different. 
Create, manage, and explore them in detail.

Storage and Volumes
Explore Docker's storage options for data persistence.
Learn about different types of volumes and mounting to manage container data effectively.

Networking and Security
Discover Docker's networking capabilities, type of network. 
Learn about how to create, manage Docker's network and 
how containers talk to each other and stay secure using this docker network.

Simple Example Project
Work on several simple hands-on projects using different programming languages 
and run them as Docker containers. including frontend backend and database.
This will reinforce key concepts and give you practical Docker experience.


Docker Compose
Set up and run multiple containers with one file using Docker Compose. 
Learn how to run multiple DockerContainer using a single command.
Like frontend backend and database all those will run using only a single command.
Waht is Simplify your workflows with YAML-based configuration files and Manage everything easily.

Container Orchestration
Understand the need for container orchestration and explore tools like Kubernetes and Docker Swarm. 
Learn how to manage and scale containerized applications in production environments.


2:40mm-to-3:06
================
Which for This Course
    This course is for DevOps professionals, app developers, software engineers, IT managers, 
    and system architects. 
    It’s also perfect for anyone interested in learning Docker.





2) Docker Installation In Windows | 10:44mm
=================================================
00:00 -to- end

Hey Guys: 
In this tutorial, we are gonna see how to install Docker on Windows.
It's pretty simple and state-forward.
Official Docker documentation provides installation guides for various operating systems.
Like linux, windows Mac etc.
We will follow the recommended steps to install Docker on Windows.

Need to know one thing before we proceed.
Docker was two editions:
    Docker Community Edition (CE) – Free and suitable for learning and development.
    Docker Enterprise Edition (EE) – Includes additional features for enterprise use.

Now subscription base. you cna find more details on officeal site.
Let’s go for installation.


First, let's start by downloading the Docker .exe file.

Download is in progress, Let’s check the system requirements to ensure compatibility.
Also we need to verify the hypervisor settings before installation.
If you're using a hypervisor, select that option and uncheck the other one before the installation.

Now, let's start the installation process. 
Follow the on-screen instructions to complete the setup.

Once the installation is done, restart your PC.
After rebooting, You get the Docker app from the Start Menu.

To confirm that Docker is installed correctly, 
open Command Prompt or PowerShell and check the Docker version. 
It will make sure our docker installed perfectlty.

In the next video, we'll cover Docker installation on Linux.

If you have an issue installing docker in your current machine 
like security or office-regulation then don't worry.
There is a way: Play with Docker, It's a web-based platform for practicing Docker.
It will give you free access Linux host with docker and you can practice on it.
every session of three hours.

Stay tuned as we explore Docker’s menu functionalities and how to use them effectively in the upcoming video!


Before we get started, I recommend creating an account on hub.docker.com.
This is where we can find and upload Docker images, including official images provided by Docker.
Now, let's run a simple Hello World container.

First, open the Docker Desktop app.
Since we haven’t run any containers yet, you’ll see that there are no images or containers available.
We can also verify this using the command line—both should be empty.

Next, let's pull the Hello World image from Docker Hub.
To do this, we run the docker pull hello-world command.
This command fetches the image from Docker Hub and downloads it to our local system.

Once the download is complete, we should see the image listed in Docker Desktop.

Now, let's execute the docker run hello-world command to run the container.
If everything is set up correctly, we should see a success message in the terminal.

Finally, let’s check the Containers section in Docker Desktop and verify the running container using PowerShell.

In the next video, we’ll explore more Docker commands and features. 
Stay tuned!





LinuxInstallation | 8:44 sec
===========================================

"In this video, we’re going to install Docker on a Linux machine.

There are two ways to install Docker on Linux:

Using Docker Desktop
Installing just the Docker Engine (without the desktop interface)
The official documentation provides multiple installation methods for different Linux distributions.
However, the easiest way is to use a simple installation script.
First, we download the script.
Before running it, we can perform a dry run to check for any potential issues.

Once everything looks good, we proceed by running the script to install Docker.
Since installation steps may vary across Linux distributions, 
always refer to the official documentation for details.

After installation is complete, let's verify that Docker is installed by checking its version.
If we encounter any permission issues, we need to grant the necessary permissions to our user.

Next, we check the list of images and containers, at this point, both should be empty.
Now, let’s pull and run a simple Hello World container to confirm that Docker is working correctly.

That’s it for this installation guide!
In the next video, we’ll explore more Docker commands and best practices. Stay tuned!"**


"In this video, we’ll explore Docker’s online platform— Play with Docker.

First, go to the Play with Docker website.
To use this platform, you’ll need a Docker account.
Log in with your Docker credentials to start a three-hour session where you 
can practice running containers online.

Once logged in, let’s create an instance and run a simple Hello World Docker image.
This is perfect for learning and testing Docker commands.
You can even run web applications here with port access.

Now, let’s try running an NGINX web server on this platform.
We’ll map port 8080 on our instance to the default port 80 of NGINX.

Don’t worry too much about the command right now, we’ll cover everything in detail in a later video.
For now, just know that we’re using Docker’s official NGINX image.

You can check the official documentation to learn more about this image and how to run it.

Once the application is running, click on the 8080 port link.
You should see the default NGINX welcome page!

This works just like running Docker on a local machine, 
making it a great environment for learning and experimentation.

In the next video, we’ll dive into Docker’s basic commands and how to use them effectively. 
Stay tuned!"**




3) Getting Started with Dockers | 30:44 sec
===================================================

1:00mm
=========
HeyGuys:
"In today’s video, we’ll go over some of the most frequently used Docker commands.

You can run these commands using the Docker command line on Windows, Linux, or Mac.
Docker Desktop also provides a visual interface, 
but in real-world professional projects, developers primarily use the command line.

So, it’s best to get comfortable with the command-line mode for better efficiency and flexibility.

Let’s dive in and explore these essential Docker commands!"**



2:00 mm
=====================
"Let's start with our first Docker command: 
=>docker info
This command displays detailed information about the current Docker setup, including:
    The installed Docker version
    System information, such as CPU and memory usage
    Default network drivers
    Docker volumes

Since this is a brand-new installation, we’ll see 0 containers and 0 images listed.

Now, let’s move on to the next command: 
=>docker ps
This command is used to list running containers.
Since we haven't started any containers yet, nothing will be displayed.
We can also check this visually in Docker Desktop, and it should be empty.

Next, let’s pull an image from Docker Hub, we’ll start with the simple Hello World image.
To do this, we run:
docker pull hello-world
Once the image is pulled, we can verify it using the command:
docker image ls
This will display a list of all downloaded images, including hello-world.

You can also check this in Docker Desktop, it should now show the pulled image.
Now lets run it.

That’s it for now! In the next part, we’ll run a container and explore more Docker commands."**

3:40
===========
"Now, let’s run an NGINX container with port mapping on port 8080.

To do this, we use the following command:
=>docker run -p 8080:80 nginx

The docker run command performs two actions at the same time:
Pulls the image from Docker Hub if it's not already downloaded.
Runs the container using that image.
If the NGINX image isn’t already on your system, Docker will first pull it.
Once the download is complete, you can verify that the image is now available by running:
docker image ls
You’ll see the NGINX image listed both in the command line and in Docker Desktop under the Images section.

However, you won’t see anything in the Containers section yet, 
because we haven't actually started the container.

In the next step, we’ll run the container and check its status. Stay tuned!"**



3:05mm
==============
"Now, let’s run the NGINX container and check its status in the command line.
To start the container, we use:
=>docker run -d -p 8080:80 nginx
The -d flag runs the container in detached mode (in the background).
The -p 8080:80 maps port 8080 on our local machine to port 80 inside the container.

Checking the Running Container
To see the running container, use:
=>docker ps

This command displays:
Container ID – A unique identifier for the container
Name – An auto-generated name for the container
Command – The default command used to run the container
Now that the container is running, if we open http://localhost:8080 in a browser, 
we should see the NGINX default home page.

Custom Container Names
By default, Docker assigns random names to containers.
If you want to set a custom name, you can use the --name option:
=>docker run -d -p 8080:80 --name my-ng1 nginx
We’ll go over this in more detail later.

If we run:
=>docker ps
It only shows running containers.
But what if we want to see all containers, including those that have stopped?
docker ps -a
This command lists both running and stopped containers.
From here, we can also remove containers if needed.
We’ll cover container management in detail in the next video.

Stay tuned!"**



8:40mm
=================
Now, let's see how to stop a running container using the command line.
To stop a container, we need its Container ID or Name.
First, list running containers:
docker ps
Copy the Container ID or Name, then stop it with:
docker stop <container_id_or_name>
For example:
docker stop my-nginx
Now, let’s check if the container is still there:
docker ps -a
This lists all containers, including stopped ones.

Removing a Container
To delete a stopped container, use:
docker rm <container_id_or_name>
You don’t need to type the full ID—just a few characters are enough.
Now, check again:
docker ps -a
You’ll see no containers left.
However, the Docker images are still there.

An image is like a class in programming—it's a read-only template.
A container is like an object, a running instance of an image.
You can run multiple containers from the same image.

Now, let’s run a new container from the NGINX image and give it a custom name:
docker run -d -p 8080:80 --name ng-cont1 nginx
-d → Runs the container in detached mode (background).
-p 8080:80 → Maps port 8080 on the host to port 80 in the container.
--name ng-cont1 → Assigns a custom name instead of a random one.
Check the running container:
docker ps
Running Another Container from the Same Image
Now, let’s start another container using the same image:

docker run -d -p 8081:80 --name ng-cont2 nginx

If you try to use a name that already exists, Docker will show an error.
If the port is already in use, you must choose a different one.
If you get an error, you can either:
    Delete the previous container:
    docker rm ng-cont1
    OR Use a different container name, like:
docker run -d -p 8082:80 --name ng-cont3 nginx

Now, both ng-cont2 and ng-cont3 are running.
Check this using docker ps.




16:40
=======================
here is a interesting fact i am going to sared: 

Let’s look at a real-world Problem:
Imagine you need multiple NGINX instances on your machine:so..
Without Docker (Traditional Way)
    You would have to manually copy multiple versions of the NGINX software.
    Keep them in different locations to avoid conflicts.
    Update the nginx.conf files separately for each instance.
    Manage them individually, which is complex and time-consuming.

With Docker (The Magic Solution):
    Using Docker, we skip all that complexity!
You can run multiple NGINX instances with just one simple command: 
What we just did.

docker run -d -p 8080:80 --name nginx1 nginx
docker run -d -p 8081:80 --name nginx2 nginx
    ✔ No need to copy the software multiple times
    ✔ No manual configuration conflicts
    ✔ No dependency issues with the host machine
✔ Easy to start, stop, and manage everything with commands

This is the true power of Docker!

It allows us to run multiple apps efficiently, without worrying about underlying host dependencies.
Now, you can deploy and manage multiple services effortlessly—all with just a few Docker commands.
That’s why Docker is a game changer in software deployment!



17:50
=====================
Docker containers run in an isolated environment, meaning:
✔ Each container works independently and doesn’t affect the others.
✔ Containers are isolated from the host machine as well.

As long as the host machine has Docker Engine running, multiple containers 
(like NGINX or others) can operate without interfering with each other.

In this video, we won’t dive deep into Docker's internal architecture just yet, but don’t worry!
We’ll explore how Docker manages containers in more detail in the Docker In-Depth Section.


Right now, we’ll keep our focus on the basic Docker commands to get you 
comfortable with docker.




18:40
===========================
Docker Exec Command: Interact with Running Containers
The docker exec command allows you to enter a running container and execute operations inside it. 
This is super helpful for tasks like:
✔ Installing packages
✔ Updating files
✔ Modifying configurations (e.g., updating NGINX pages)

How Does It Work?
    To interact with a container, we use the -it flag, which stands for:
    i: Interactive mode
    t: Terminal, so we get a terminal session inside the container

We’re going to change the default NGINX page running on port 8282.

Enter the container using the docker exec command.

We can see the container is running with a minimal Linux distribution, 
so some packages (like vi or nano) might be missing.
We’ll use basic commands like cat and echo to interact with the container.

Enter the running container using the docker exec -it <container_id> bash command.
Inside the container, we’ll run the command cat /etc/os-release to check the Linux distribution it’s running.

Next, we will update the default NGINX homepage (located in the default directory) 
using the echo command (because text editors like vi aren’t available).

Exit the current container running on port 8282, and enter the container running on port 8181.

Check the container ID, and use it to enter the new container with docker exec -it <container_id> bash.
Update the NGINX page by running echo 'Welcome to My Custom NGINX Page' > /usr/share/nginx/html/index.html 
to change the homepage content.
Results:
Once you’ve updated the page, you can verify it by checking the contents of the index.html 
file again with the cat command.
If you refresh your browser, you’ll see the updated NGINX homepage! 🌐


25:50
===============
Now we explore How to Check Container Logs
When a container is running an application, it often produces logs. 
You can easily view these logs using the docker logs command. 
This is useful to monitor the application's behavior or debug issues.

Find the Container ID – First, check the container ID by running the command:
docker ps
Use the Docker Logs Command – Once you have the container ID, you can view the logs with:
docker logs <container_id>

What’s Next?
We’ll explore more about viewing and managing container logs in detail in the container section. 
But for now, just know this basic log-checking command!
Stay tuned for more advanced log monitoring techniques!


26:35
=====================
Lest see docker netowrk now:

docker network ls
This will show you a list of the networks available. 
As we haven’t created any custom networks yet, you’ll see the default ones.

What is a Docker Network?
Docker networks allow containers to communicate with each other. 
Containers that are connected to the same network can easily interact with one another, 
which is essential for multi-container applications.

We will dive deeper into Docker networks in a dedicated section, so don't worry if it’s not clear yet!


28:10
========================
Docker Volumes:
We can view the existing volumes using the following command:
docker volume ls
Since we haven't created any volumes yet, this command won’t show any volumes at the moment.

dockr login/logout To push images to Docker Hub (Docker's cloud registry), you need to log in first:

Prune Unused Images:
You can remove unused images using the following command to clean up your system:

Building Docker Images:
The docker build command is used to create custom images from a Dockerfile. 
We'll cover this in more detail in the Images and Containers section.


Pushing Images to Docker Hub:
To upload an image to Docker Hub, you use the docker push command. Make sure you're logged in first:

In the next video, we'll explore Docker's internal architecture in greater detail, 
including how Docker manages containers, images, networks, and volumes.









4) Docker in Depth 
====================================

00:00-to-1:50
=========================
In this section we talk about docker internal architecture with:
    Docker Architecture
    Docker Components
    Namespaces
    Control Groups (cGroups)


First of Docker Architecture: docker actually working as client/server mode
we provide docker command using cli, here cli is the client and docker Engine is the server.
When we provide a command using cli docker engind receive this command and execute it return a response what we see in this cli black screen.

Dash board also a client what is show data from inter engind and show it.


1:50-to-3:00
======================
We can use doker client in local also from any remote cli.


3:00-to-3:00
=========================
Now taling about docker componet, there are 4 to 5 componet of docker inter componetn as:
Docker Daemons: Its crea continer manage voluem etc.
Docker Client: pass commad to docker Engin or server.
Docker Image: its a read only file for create contener
Conteiner: a run time container of image. We will ses more datails about docker image and contienr in leter video


Docker-Registry: its a public repository of docker image, its have officeal image, we can also push you custome image to it.

This is my accoutn in docker hub, here i already push some my custome image, you can also push image and shared with other.

For any company its self software or product its cna possible manage a private docker regirstru for internal use only.


So when we install docker in our machine this componetn all install on this time and work all togetehr.


Here i give thsi link or docker hub, you cna explore ti how it looks like and starting using image from here.
its give awesome documentation about all image .

Like we see about mysql official image now thsi way, here how use this image all details description are avialable in this docker.




09:10-to-17:00 
===========================
Now we taling about Namespace and cGroup.

Namespace: this for isolated a contiener and like a process.
Same software or same image we can run multiple time what is not interact with other, 
all contienr run its context.
every process/Conteiner is isolated and run independently, ther process id different.


cGroup: When we run a container cGroup assign its resource like cpu, memory etc. 
How much resoruce a contaiber consume what is define by cGrpup.

I in a host we buget 50% of resoruce for app a and 50% for B, we can define how much what app able to use
this how manage by cGrpup.





17:00 -to - End
===========================
This is overal ide of docker architecure and component how actually docker work.
You dont need to spend so many time here jsut take a highlevel view of docker internal componsents.

When we pass a docker command using cli then docker internal sercer receive thsi command 
and give instruction to docker engin to run this perticular image ad contiaenr,
if the container already not presetn insede docker then docekr pull it form regiistry and then run it.

Next vide we will see Image and contaiener operation, how build image how to run it as contienr etc.
how create and modify custome image and upload it to docker hub.



5) Docker Image and Containers
======================================

00-3:00
=============
HeyGuys in this tutoruyal we gonna see image and continer operation.

Image: Image its a exuectable file or package including every this you need to run ap perticular application like nginx.

We can download our required image like java, mysql and redis or we cna also create our own image.

Actually Image a template of contiener.
Here you see we crate two java app from a single image and threed redis app form one redis image.
This is how we can create as much as image as we need.

Lets take look on docker pubhlik registry docker-hub...
Here a lot of official and custome image, we cna also upload our own image here we will just after a few moment.

this is how we cna keep oru public image on public registry if we need mantain private registry for a company
we cna also do it and share to other teamp and run it as app.


3:00--
====================
Now see some of frequently uses docker image command.
first:
dokcer image ls
thsi comand show the list of image in you current docker host.

reposity: this is thei image reposity.
Tag: tag actually image version. let me go in docker hub explore a tag form ther.

Check a image, ubuty.
see the show ubutn image tag this is actually  thsi is the release version.


Now check one of my custome image wha i build and release with different version as tag.
In reql-world project thsi is you can mangain app relsaversion as tag


Now we see uses of tag, how to we can run a docker image with specific version or tag.
I am gonn pull a ubuntu image with a specific tag
If some one dosnot mentation any tag then by defautl it pull the latest version form docker hub

Another note: tag latest dosnot mean thsi will be the most latest version of thsi app/os 
the latest tag mamy assign on a specific version what is may not the most recent release or version.


List we run a ubutu image with latest tag but see its run 22.04 but most latesr version is 23.xx
so tag latest dosnot mean then most recent latest version.
You can find the version wiath tag with latest on docker hub image documetnation..

ImageId: its  a auto generate of id , then show create date of ite and then size of image.


10:20
=====================
Now we see base from from image build and how to build a image.

For that we need to know base image, Waht is actually base image, Its a actually prant image of all officeal image and custome image.
I mean all image creagte from a image call base image.


Now we explore on another thing its DockerFile, what is docker file, its a file we define abotu image waht is adn what it do. 
Docker image ia alear architecture what is we can see in this docker file how it build layer by leyer.

Lets explore a docker file of nginx, from docker hub.
Here we see the fitst line of a DockerFile is From: directive what is define what from image we goign to create a new image or app.
This is the prent image of this nginx Image, this is how all image has its a prant image.


Okey we can explore another image like: mysql.
find it and open its dockerfile.
see its docker file first line start with FROM directirve and thsi is the prant image for thsi mysql image.

This is how all image create top of another image for its base iamge.


13:20
=====================
Lets see some of custome exmple fo docker file.
Looks here alos we have to use a from directorve to define its base image.

So are we gonna chose random bae image ? no.
We have to chose current base image for our custome image wiath is relatvely same.
Lise if we need to build a java application then we cholse a jdk image waht specifice version.
If we do thsit then the image come with ready madn java install ation.

onte other hand if we chase ubutnu iamge for java then we have to install jkd and deploy java app.
so we have to chose right base iamge for oru custome image base on its type, requirment or its businesslogic waht actually thsi image gonna do.


14:10
==========================

Now see thsi From Scratch: this is then minimal version thsit for vrsion of a docker image.
Every image build to of thsi image layer by layer.

Let go explore a image file from dockerhub, ok go for myusql image.
Looks its docekr file it buil top of orcls linux image.
so its mean we definitely fond a image wtih thsi name, letst find it.

We get it, oh, its hasr amy tag, what was then tag number in mysql docker let me checkit of it was 8-slim.
so open thsi8- simom image, Loos we found the root of all image what is scratch.





All image build on top of another image, thsi those image build on many another image... and finally the image we 
get what is scratch. 
thsi iamge is the minum unti of all docker image.

































6) Storage and Volumes
7) Networking and Security
8) Simple Example Project
9) Docker Compose
10) Container Orchestration








=================================================
#Random
=================================================

Hello. Welcome to this Docker tutorial.
Hey everyone ! Welcome to this  tutorial on Docker

Hi there! Welcome to this Docker tutorial.
Hey there! Welcome to this tutorial on Docker.




So, grab your coffee, get comfortable, and let’s dive into the world of Docker!"

Alright, let’s dive in and get started!"





Welcome to the section on schedule management.
Whenever we talk about schedule management,
People get really excited.
Well, maybe excited it's not the right word, but they get very Interested. 
Because It's in this section that we are going to talk about database.






This is gonna be a long one.
#For Logger video

Gotta emphasize that.
#Need to Foucse on topic


It's not a small term, It's a broad term.
When you say stakeholder, you'r talking anyone that's affected by the actual project.
Now, thinking about this, I wanna mention that stakeholders could be positive or negatively effected.




You dont want thet.
Alright, so thet is a couple tips there, how to manage your time.

Hopefully, you guys enjoyed this video, if you do, Please give the video a like, subscribe to the channel.
We got much more content for you guys, and how to pass your exam on the first try.





You don't want that, Alright, so that is a couple tips there.


Lemme tell you guys something, this is too easy really easy.




If you're Like me and you're a moring person,
and you like taking exam early in the morning.


Let me explain.


Okey, so let's talk simulator.
So, this particular exam similator is somthing good.


Iam gonna be going over the diffeent type of question
You're gonna see on your PMP Exam.

 

So, a lot of people have this confusion that if that, "Oh i can't take the pmp exam because i dont have 36 month of being a project manager."
I dont have the title of being a project manager.
Okey, lemme just start off by saying you dont need the title.
of a project manager to be leading a project.

You dont have to be official project manager.
And the another question that people say to me: 
"Hey, I amd only work on my project , its a small project", that's fine too.




This is a great way to bakek in these concepts





To sow somthis additional same as
----------------------------------
So there are a couple of other things i want to show with pointers here.



Create some this and run it
-------------------------
As soon as you crate a Hashmap, this line of code up here will be automaticly generate.
So you dont  actually have to do this part.
And then this part down here is where we make map one have value.
And then we have map tow set equeal to map one
And then we'll just print out map one and map tow here.
So I'll run this.





Ok, so now Lets flip back
    Ager page jawa.

This is how it work when you not use the pointer.
    Kono keso na use korle kemon how 


















#aTopicAboutToStart:
=================================================



ToStartTopic
------------------
In this video, I'm gonna be talking about the
PMP Examination requiremdnts.

Now, always remember this.
In order to take your pmp certification, you are gonna have to show pmi three thisng.
You'er gonna have to document three thing on the application to submit it.

-Number One You'er gonna have to docuement your formal education.
This is gonna be like your highschool diploma, Bachelor or maybe Masters Degry.
So you gotta have some kind of formal education.

-Number two, depending on the formal education
You're gonna have to show a ceftain number of years worth  of experience and
that gonna be dependent on that form of education, 36 month or 60 Month.
Again, again , dependent on that form of education.

-And Number three, you gonna have to show 35 hours of Project management education.
Tha's what this course is.
This is the 35 hour worth of project management education.

Once again, quick review: formal education, exprienc, 35-hour class.
Just remember, those are teh three things.
You'ar gonna need to take, your gonna need to show actually in order to take your pmp exam.




Talkoing baout:What is cover last video and start with what topic:3
------------------------------------------------------
In this video, we are gonna be putting together the entire project schedule.
Now, if we go back to he very beginning. of this entire planning section.
We first collect our requirment, we developed our scope, we create oru wbs.
So now we know how logn each activity is taking.

Now we can take all of that information, build and entire schecule.
How it work, what we are doing with it, and so on and so on.
So that's what this section is.



Talkoing baout:What is cover last video and start with what topic:2
------------------------------------------------------
So what have we done so far in this section?
So far, we created thos activities, we defined them.
The last video, I sequenced them, i put them in an order and 
I build the project schedule network diagrame.

Now hat we are gonna do is we are going to say how long, how long does it take 
to do each one of these activities.
And the bring me to this process of estimate activity duration.

Thos os about estimation the number or work periods.
Now a work pereion is unique.





Talkoing baout:What is cover last video and start with what topic:
------------------------------------------------------
In this Video, I am gonna be talking about our next process or the next section
of our planning is gonna be schedule.
Now we just finish completing all of the processes the you would use to create your scope.
So in this part we're gonna look at what processes are we gonna use to create oru schedule.


StartNewVideo and Say about previous video was is
--------------------------------------------------
In this video, I amd gonna talk about the measurment performance domian.
Now, In the last one, I talked about the delivery performance domain.
In ones before that I talked about work and Planing.

You know what this domain is? It's about looking at the work you are doing.
It's about liiking at the work you are delivering and asking your self, am i doing it according to Plan ?
At the end of the day, one of the main jobs that you're gonna be doing as a project manager
is ensuring that the work stays on plan. It's about if it's going off plan.
to taking the appropriate steps and actions in order to bring it back on plan.
And to do that, we must measure the work. You must measure the time, measure the cost.




ToGaysNeedSamething:
------------------------------------------
Well, I need them to do help desk.
And youre like, Well I need them to do my project.
Boom, clash !


ForGoogleing:
----------------
So i'm gonna go to google.
And I'm going to type the PMP exam referernce list, just like that.
And we're gonna press enter on it.
And I am going to go to right here it says PMP, This the first linek should show up.
I'm gonna go right here and i wanna show your guys this.
So, this is the PMP exam reference list. 
Now what exactly is this ?
Well, this is gonna show me the content outline.
So this is a book that basically gives us all the individual things we need to konw for the exam.





I have an interesting story with this, with this mindset,   
and you'll here me tell this story back.
So I work at a school called technicl instirtie of america.
and the are a authorize traing patner.



But dont let the hard fquestion consume the time, because you know what's gonna happen ?
you spend too long on these hard question, and dthen you never get around to
answering the easy question that came at the end and you end up failing the test.








ToStartTopic
------------------
Hello and welcome back in this section we are going to take a look 
at a super commonly asked interview question the LinkList !

We are going to take a look at: What the are, how they work how they compare to array how to bu8ild our 
own and then go over some really key fundamental things for you to know during your interview.

So let's start by taking a liik at what a linked list is.


Very simply a linked list is nothing more then a serise of nodes linked together for me to list.
That's it !

Now the way linkList work is:- you always start with the very first element.
this one is a bit special. It's called the head.
That's the very first element of out list, that one does not have anything pointting to it
and we just call it hte head.

When you add subsequent nodes, all you do is you create a new node and then 
have the previous pointer point to it via its nest pointer here.

 That's why it's called a linkedList.
 That's the arrayList.


ToStartTopic
------------------
So now we're going to look linkedList.
This will be the first dataStrecture we build in the cousere.
And I'm going to start out explaining linked List by comparing them to and array list
and talk about the differences between an array list and a LinkList.




ToStartTopic
------------------
This section we'are going to take a look at what stack and queues are, 
how they work and what is there 



CompleteTopicAndSummeize
--------------------------
Alright ! There you have it. Big o notation.
This is a big step, you can do that now.
You have got the tools, you have got the basic language.
all you need now is practice and that's what we're going to do for the 
remainder of the course.

But at the end of the day you already know everything there is to 
know basically about how Big-O notation works.

Congratulation ! you know basic/advence now.
or
Congratulations you now underestand the binary serach tree.
Here's what you need to know for the interviews.






