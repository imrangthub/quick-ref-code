
#################################################
#              K8S                             #
#################################################

systemctl --user start docker-desktop

=>kubectl api-resources

=>kubectl version
=>kubectl version --short 
=>kubectl get nodes




=================================================
#General                                
=================================================

=>=>kubectl exec webapp-color -- env
=>kubectl exec -it ubuntu-sleeper -- whoami
=>kubectl exec -it webapp-color -- sh


=>kubectl get pods
=>kubectl get pods -o wide
=>kubectl get -o json pod prodName

=>kubectl explain pod
=>kubectl explain deployment

=kubectl logs myPod

=>kubectl run --help
=>kubectl run myng --image=nginx --dry-run=client -o yaml>labelpod.yaml
=>kubectl create deployment --image=nginx nginx --dry-run=client -o yaml
=>kubectl run ng3 --image=nginx -- /bin/sh -c "while true; do echo  $(date); sleep 1; done "

=>k delete po myng


docker tag currentImageName newImageName
=>docker tag imranmadbar/nginx ng-debug
Image from Image

=>kubectl  run myng --imranmadbar/nginx
DockerContRun:
=>docker container run --name myng -dp 8080:80 imranmadbar/nginx


Byuild image and push
-------------------------------------------------
docker run -d -p 5000:5000 --restart=always --name registry registry
docker build . -t localhost:5000/openapi-customer-information
docker push localhost:5000/openapi-customer-information


k8 default loging file 
---------------------------------------
/var/log/pods/*$1/*.log
/var/log/pods/apihub-microservice_octopus-sms-6bff58b4cb-gjh48_53ed786a-4c06-46aa-828d-7c6997fb3060/octopus-sms/0.log

Log Storage: 
In Kubernetes, logs are stored on the node where the pod is running, typically under /var/log/ in a structured directory format.


Each container within a pod streams its output to a log file, which Kubernetes manages. By default, this log file is stored at /var/log/pods/<namespace>_<pod-name>/<container-name>/<timestamp>.log on the node where the pod is running.




=================================================
Service:
=================================================

apiVersion: v1
kind: Service
metadata:
  name: webapp-service
  namespace: default
spec:
  ports:
  - nodePort: 30080
    port: 8080
    targetPort: 8080
  selector:
    name: simple-webapp
  type: NodePort


=>kubectl create service nodeport mysvc4 --tcp=8080:80 --node-port=30040
=>kubectl create service nodeport mysvc4 --tcp=8080:80 --node-port=30040 --dry-run=client -o yaml>mysvc.yaml



ExposeService:
=>k expose pod jekyll --name=jekyll --type=NodePort --port=8080 --target-port=4000 -n development
=>k expose pod myng --name=ng-svc --type=NodePort --port=8080 --target-port=80 









































SetUp
-------------------------------------------------
Install and set up the kubectl tool: –

https://kubernetes.io/docs/tasks/tools/

Install Minikube: –

https://minikube.sigs.k8s.io/docs/start/

Install VirtualBox: –

https://www.virtualbox.org/wiki/Downloads

https://www.virtualbox.org/wiki/Linux_Downloads

Minikube Tutorial: –

https://kubernetes.io/docs/tutorials/hello-minikube/

If the minikube installation has been done on the macOS, then to access the URL on the local browser, we need to do a few steps to get the service URL to work. Those steps are covered on this documentation page: –

https://minikube.sigs.k8s.io/docs/handbook/accessing/#using-minikube-service-with-tunnel