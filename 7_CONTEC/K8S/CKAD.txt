#################################################
#              CKAD                             #
#################################################

Certified Kubernetes Application Developer: https://www.cncf.io/certification/ckad/
Candidate Handbook: https://www.cncf.io/certification/candidate-handbook
Exam Tips: https://docs.linuxfoundation.org/tc-docs/certification/tips-cka-and-ckad
https://www.youtube.com/watch?v=wtKef83kmUA&list=PL0hSJrxggIQoKLETBSmgbbvE4FO_eEgoB

https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks
FAQ

lAB
https://kodekloud.com/lessons/recap-core-concepts/



=>sudo apt-get update && apt-get install iputils-ping && sudo apt install net-tools
=================================================
#General                                
=================================================

=>kubectl explain pod
=>kubectl api-resources

=>kubectl version
=>kubectl version --short
=>kubectl get nodes

=>kubectl get pods
=>kubectl get pods -o wide
=>kubectl get -o json pod prodName

=kubectl logs myPod

=>kubectl run nginx --image=nginx --dry-run=client
=>kubectl run nginx --image=nginx --dry-run=client -o yaml
=>kubectl run myng --image=nginx --dry-run=client -o yaml>labelpod.yaml
=>kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

=>kubectl run mynginx --image=nginx
=>kubectl run  bu1 --image=busybox -- sh  -c "hostname -i"
=>kubectl run logpod --image=busybox -- sh -c "ping google.com"

=>kubectl run -it ubuntu1 --image=ubuntu --restart=Never -- bash -ec "apt update; apt install mysql-server; bash"
          =while true; do echo "infinity"; sleep 1; done

=>kubectl exec -it ub1 -- bash
=>kubectl exec -it mynginx -- bash
=>kubectl exec -it mynginx -- ls -l


=>kubectl apply -f sample.yaml
=>kubectl delete -f sample.yaml
=>kubectl delete pod my-pod1 

=>kubectl describe pod mynginx



=================================================
#D1:CoreConcept               
================================================= 
pod1:
apiVersion: v1
kind: Pod
metadata:
  name: my-webserver-pod
spec:
  containers:
    - name: mynginx
      image: nginx

pod2:
apiVersion: v1
kind: Pod
metadata:
  name: my-pod1
spec:
  containers:
    - name: mycont1
      image: busybox
      command: ["sleep","3360"]
   or args: ["3600"]
   or args: ["sleep","3360"]

pod3:
apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  containers:
  - name: busybox
    image: busybox
    command: ["/bin/sh"]

pod4:
apiVersion: v1 
kind: Pod 
metadata: 
  name: bu1 
spec: 
  containers: 
  - name: busybox 
    image: busybox 
    command: ["sh","-ec","ping google.com"] 

pod5:
apiVersion: v1
kind: Pod
metadata:
  name: ubuntu
spec:
  containers:
  - name: ubuntu
    image: ubuntu:latest
    # Just spin & wait forever
    command: [ "/bin/bash", "-c", "--" ]
    args: [ "while true; do sleep 30; done;"]


pod6:
kind: Pod
metadata:
  name: nginx-ports
spec:
  containers:
  - image: nginx
    name: nginx-ports
    ports:
    - containerPort: 80


=>kubectl apply -f myfile.yml
=>kubectl get pods
=>kubectl exec -it my-pod1 sh


PracticeDomain1:
-----------------------------------------------------
Q1:
apiVersion: v1
kind: Pod
metadata:
  name: kplabs-ports
spec:
  containers:
    - name: nginx
      image: nginx
      command: ["sleep"]
      args: ["3500"]
Q2:
apiVersion: v1
kind: Pod
metadata:
  name: log-ng
spec:
  containers:
    - name: log-ngcont
      image: nginx
      args:
       - /bin/sh
       - -c
       - >
         i=0;
         while true;
         do
          echo "$i: $(date)" >> /var/log/1.log;
          echo "$(date) INFO $i" >> /var/log/2.log;
          i=$((i+1));
          sleep 1;
         done


=================================================
#D2:PodDesign               
================================================= 

#Label and Selectors:
-------------------------------------------------
=>kubectl run pod1 --image=nginx
=>kubectl get pods --show-labels
Show Labels

=>kubectl label pod pod1 env=prod
=>kubectl label  pods --all status=runing
=>kubectl get pods -l env=prod

=>kubectl label pod pod2 env-
Delete label



#ReplicaSet:
-------------------------------------------------
=>kubectl create deployment mydeploy --image=nginx --replicas 3 --dry-run=client -o yaml
=>kubectl get rs
=>kubectl get replicaset
=>kubectl apply -f rpset.yaml

=>kubectl get pods --show-labels
=>kubectl delete rs myrpset


repliSet1:
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myrpset
spec:
  replicas: 3
  selector:
    matchLabels:
      tier: myrpset
  template:
    metadata:
      labels:
        tier: myrpset
    spec:
      containers:
      - name: myng
        image: nginx



#Deployment:
-------------------------------------------------
=>kubectl create deployment --help

deployment1:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydeployment
spec:
  replicas: 3
  selector:
    matchLabels:
      tier: myproj
  template:
    metadata:
      labels:
        tier: myproj
    spec:
      containers:
      - name: myng
        image: nginx


=>kubectl apply -f mydeploy.yaml
=>kubectl create deployment mydeployment --image=nginx --replicas 3
=>kubectl get deployment
=>kubectl describe deployment mydeployment

=>kubectl create deployment mydeployment --image=nginx --replicas 3 --dry-run=client -o yaml
Generate deployment yaml file

=>kubectl delete deployment mydeployment
Delete deployment


=>kubectl rollout history deployment.v1.apps/mydeployment
=>kubectl rollout history deployment.v1.apps/mydeployment --revision 2
Get Rollout history and check revision details

=>kubectl describe deployment mydeployment
Check which revision version currently runing 

=>kubectl rollout history deployment.v1.apps/mydeployment
=>kubectl rollout undo deployment.v1.apps/mydeployment --to-revision=2
Deployment rolback



Form axSurge and maxUnavailable:
=>kubectl create deployment mydeploy --images=nginx --replica 3
=>kubectl get deployment mydeploy -o yaml

=>kubectl create deployment mydeploy --image=nginx --replicas 3
=>kubectl get deployment mydeploy -o yaml
Showo details info of deployemnt


=>kubectl set image deployment mydeploy nginx=httpd
Change deployemnt
=>kubectl edit deployment mydeploy
Edit deoloyement



=>kubectl set image deployment mydeploy nginx=httpd
=>kubectl set image deployment mydeploy nginx=httpd --record
=>kubectl rollout history deployment mydeploy
=>kubectl rollout undo deployment/mydeploy
Roolout/Undo the deployemnt last deployment

=>kubectl scale deployment mydeploy --replicas 1
Scele up/down deployemnt



#Batch Job:
-------------------------------------------------
simpldJob:
apiVersion: batch/v1
kind: Job
metadata: 
  name: myjob
spec:
  template:
    spec:
      containers:
        - name: myjoncont
          image: busybox
          command: ["/bin/sh"]
          args: ["-c","echo Hello Imran"]
      restartPolicy: Never


=>kubectl apply -f myjob.yml
=>kubectl logs myjob-qd2jr 
After complate the job task pod are not exit, stay with complate Status.

=>kubectl get jobs
=>kubectl delete job myjob
When delete the job all related pos will be delete

cronJob:
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: mycronjob
spec:
  schedule: "*/1 * * * *"
  jonTemplate:
    spec:
      template:
        spec:
          containers:
            - name: mycronjob-pod
              image: busybox
              args: 
              - /bin/sh
              - -c
              - date; echo Hello Imran, This is from CronJob.
          restartPolicy: OnFailure


=>kubectl get cronjob
=>kubectl get job
=>kubectl get job -w
=>kubectl delete cronjob mycronjob





=================================================
#D3:Service and Networking               
================================================= 

Services act as a Gateway of variable amount services in different node.

ServiceType:
  NodePort
  ClusterIP
  LoadBalancer
  ExternalName


serviceExample1:
Step 1: Creating Backend and Frontend PODS
=>kubectl run bkpod1 --image=nginx
=>kubectl run bkpod1 --image=nginx
=>kubectl run fndpod --image=ubuntu --command -- sleep 3600

Step 2: Test the Connection between Frontend and Backend PODs
=>kubectl get pods -o wide
=>kubectl exec -it fndpod -- bash
=>apt-get update && apt-get -y install curl
Curl to backend IP

Step 3: Create a new Service
vi myservice.yaml

apiVersion: v1
kind: Service
metadata:
   name: app-service
spec:
   ports:
   - port: 8181
     targetPort: 80

=>kubectl apply -f myservice.yaml
=>kubectl get service
=>kubectl describe service app-service

Step 4: Associate Endpoints with Service
vi myendpoint.yaml
apiVersion: v1
kind: Endpoints
metadata:
  name: app-service
subsets:
  - addresses:
      - ip: 10.244.0.3
      - ip: 10.244.0.2
    ports:
      - port: 80

=>kubectl apply -f myendpoint.yaml

Step 5: Test the Connection
=>kubectl exec -it fndpod -- bash
curl to service IP with port


Create Service with Selector:
-------------------------------------------------
Step 1: Creating Deployments
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydeployment
  labels:
    env: backend-service
spec:
  replicas: 2
  selector:
    matchLabels:
      env: backend-service
  template:
    metadata:
      labels:
        env: backend-service
    spec:
      containers:
      - name: ngpod
        image: nginx
        ports:
        - containerPort: 80

=>kubectl apply -f mydeployment.yaml
=>kubectl get pods --show-labels

Step 2: Creating Service
apiVersion: v1
kind: Service
metadata:
   name: myselector-service
spec:
   selector:
     env: backend-service
   ports:
   - port: 80
     targetPort: 80

=>kubectl apply -f myselector-service.yaml
=>kubectl describe service myselector-service

=>kubectl scale deployment/mydeployment --replicas=5
=>kubectl describe service myselector-service

=>kubectl run manual-added-pod --image=nginx
=>kubectl label pods manual-added-pod  env=backend-service

=>kubectl describe service myselector-service
=>kubectl describe endpoints kplabs-service-selector

=>kubectl get endpoints
=>kubectl describe endpoints myselector-service




#NodePort Service
-------------------------------------------------
Step 1: Create Sample POD with Label
=>kubectl run nppod --labels="type=publicpod" --image=nginx
=>kubectl get pods --show-labels

Step 2: Create NodePort service
apiVersion: v1
kind: Service
metadata:
   name: mynodeport-service
spec:
   selector:
     type: publicpod
   type: NodePort
   ports:
   - port: 80
     targetPort: 80

=>kubectl apply -f mynodeport.yaml
=>kubectl get service

Step 3: Fetch the Worker Node Public IP

=>kubectl get nodes -o wide
Copy the Public IP of Worker Node and Paste it in browser along with NodePort


=>kubectl delete pod nppod
=>kubectl delete -f mynodeport.yaml



#LoadBalancer Service
-------------------------------------------------
Step 1: Create Sample POD with Label
=>kubectl run lb-pod --labels="type=loadbalanced" --image=nginx
=>kubectl get pods --show-labels

Step 2: Create LoadBalancer service
apiVersion: v1
kind: Service
metadata:
  name: elb-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
    protocol: TCP
  selector:
    type: loadbalanced
    
=>kubectl apply -f elb-service.yaml

Step 3: Verify Service Logs
=>kubectl describe service elb-service

=>kubectl delete pod lb-pod
=>kubectl delete -f elb-service.yaml



#Service generated by CLI
-------------------------------------------------
=>kubectl run mynginx --image=nginx
=>kubectl expose pod mynginx --name nginx-service --port=80 --target-port=80 --dry-run=client -o yaml
=>kubectl expose pod mynginx --name nginx-service --port=80 --target-port=80 --dry-run=client -o yaml > service2.yaml

=>kubectl expose pod mynginx --name nginx-nodeport-service --port=80 --target-port=80 --type=NodePort --dry-run=client -o yaml
=>kubectl get service
=>kubectl expose deployment mydeployment --name nginx-deployment-service --port=80 --target-port=8000
=>kubectl describe service nginx-deployment-service



















Install Kubernetes
-------------------------------------------------

1)Mamage Kubernetes Services
2)MiniKube
3)Install Kubernetes Manually

Three 03 Thing need in a typical Kubernetes server:
     1)kubectl
     2)Kubernetes Master
     3)Worker Node Agents


Extract pod definition to a file using the below command:
=>kubectl get pod <pod-name> -o yaml > pod-definition.yaml


=>kubectl create namespace test-123 --dry-run -o json/yaml
Formatting Output




=================================================
#  Pre-Requisites                                          
=================================================

Topics Covered on the Exam
-------------------------------------------------

Cluster Architecture, Installation, and Configuration (25%)
A big part of the exam will focus on the Kubernetes setup and configuration. The tutorial, “Kubernetes The Hard Way” is a very helpful tool as you prepare for this section. I’ll talk more about this tutorial later.

Workloads and Scheduling (15%)
You’ll be expected to create robust deployments..

Storage (10%)
A small section will test your knowledge about volumes and volume claims.

Troubleshooting (30%)
The biggest section of the exam will test you on troubleshooting a Kubernetes cluster. This is a task you can only improve at through practice.



Certified Kubernetes Administrator (CKA)
-------------------------------------------------
The CKA tests your ability to deploy and configure a Kubernetes cluster as well as your understanding of core concepts. Candidates have three hours to take the exam and must score 74% or higher to earn the certification.

The CKA exam tests the following areas:

8% – Application lifecycle management
12% – Installation, configuration & validation
19% – Core concepts
11% – Networking
5% – Scheduling
12% – Security
11% – Cluster maintenance
5% – Logging/monitoring
7% – Storage
10% – Troubleshooting


Certified Kubernetes Application Developer (CKAD)
-------------------------------------------------
The CKAD tests your ability to deploy and configure applications running on the Kubernetes cluster and your understanding of some core concepts. You’ll have two hours to complete the CKAD exam. Scoring a 66% or higher means you’ve passed.

For the CKAD exam, you will be tested in the following areas:

13% – Core concepts
18% – Configuration
10% – Multi-container pods
18% – Observability
20% – Pod design
13% – Services & networking
8% – State persistence









Linux
-------------------------------------------------------
https://www.youtube.com/watch?v=Q8Nh8r6_tkQ&list=PLd3UqWTnYXOnar-GXf1taqzw5Z8nAAxod&index=1
https://www.youtube.com/watch?v=mzMD5duBA-A&list=PLd3UqWTnYXOkCdIbrnfB7A51jOlsP4i3w&index=1
https://www.youtube.com/watch?v=UoJ94MirYmw&list=PLd3UqWTnYXOny6ntfCKt9S4mwDM4GDaAG&index=1



CKA
===============================================================================


Domains & Competencies
-------------------------------------------------
Storage10%
Understand storage classes, persistent volumes
Understand volume mode, access modes and reclaim policies for volumes
Understand persistent volume claims primitive
Know how to configure applications with persistent storage

Troubleshooting30%
Evaluate cluster and node logging
Understand how to monitor applications
Manage container stdout & stderr logs
Troubleshoot application failure
Troubleshoot cluster component failure
Troubleshoot networking

Workloads & Scheduling15%
Understand deployments and how to perform rolling update and rollbacks
Use ConfigMaps and Secrets to configure applications
Know how to scale applications
Understand the primitives used to create robust, self-healing, application deployments
Understand how resource limits can affect Pod scheduling
Awareness of manifest management and common templating tools

Cluster Architecture, Installation & Configuration25%
Manage role based access control (RBAC)
Use Kubeadm to install a basic cluster
Manage a highly-available Kubernetes cluster
Provision underlying infrastructure to deploy a Kubernetes cluster
Perform a version upgrade on a Kubernetes cluster using Kubeadm
Implement etcd backup and restore

Services & Networking20%
Understand host networking configuration on the cluster nodes
Understand connectivity between Pods
Understand ClusterIP, NodePort, LoadBalancer service types and endpoints
Know how to use Ingress controllers and Ingress resources
Know how to configure and use CoreDNS
Choose an appropriate container network interface plugin





ExamTips
------------------------------------------------------------------------------
After 2 years of procrastination, finally booked the CKA certification exam.

Happy to share that I passed Certified Kubernetes Administrator (CKA) Exam today with 91% score.

I can never thank enough Mr. Mumshad Mannambeth for the excellent course, keeping concepts simple yet informative. His solution walkthroughs on KodeKloud labs were so helpful. Also I thank Udemy for bringing the best lecturer to the platform.

Tips for CKA exam prep:
💡 1. Check your understanding on below competencies (source: https://t.ly/gtXI)
     -  Storage : Persistent Volumes, mountpoints, storage classes etc.
     - Troubleshooting: debugging services on nodes, debugging error logs, understanding node logs, using metrics server
     -  Workloads & Scheduling: Understanding deployments, manifest files, RBAC
     -  Cluster Architecture, Installation & Configuration: Cluster setup, Kubeadm, k8 version upgrades
     - Services & Networking: Ingress, Network policies, Network interface plugins, CoreDNS, connectivity between pods and services, various ports.   
💡2. k8 documentation:
     - Practice all tasks in the documentation (https://lnkd.in/gCsHrdjp)
     - Make a habit of checking k8 documentation for manifest formats, it comes handy during exam.
     - Only official documentation is allowed on the exam remote desktop.
💡3. Mock exams:
     - Experience the exam environment which is remote desktop, in killerKoda (https://t.ly/1wYz)
     - KodeKloud mock exams that comes with Udemy course (https://t.ly/4Vf8) to get an idea how questions would be.
     - I highly reccommed to take exam simulator by Killer.sh only before 1 week to your exam. (you will get 2 free sessions on purchase of exam), the questions you face in this are lot tougher than the real exam.
💡4. Commands:
     - Practice imperative commands for pods, deployments and services. Instead of writing manifest files from scratch.
     - Try to make use of short commands using alias.
             
💡5. Main exam:
     - CKA exam time limit of 2 hours with 17 questions, each with different weights (4%, 5%, 7%, 13%), you need to get 66% to pass the exam.
     - All 7% looks simple in plain, but you have to pay attention to each detail. It may have two or three steps in it.
     - After implementing a task, take some time to test it.
     - Don’t stick to the hard question more than 10mins. Just flag it, you can visit back after completing easy ones.
     - Always you have one free retake, if you fail first time dont worry. Practice well to score well.

💡6. Patience, Preparation and Practice :
     - It was not an easy thing to crack this test, needs a lot of patience to give time to understand and prepare notes on each concept. I took nearly a month for practicing all scenarios


Lab:
CKA-LAB:
https://kodekloud.com/lessons/core-concepts-4/
Docker-lab:
https://kodekloud.com/lessons/hands-on-labs-2/
DockerSwarmLab
https://kodekloud.com/lessons/labs-5/
PythonLab
https://kodekloud.com/lessons/quizzes/
DevPOpsLan
https://kodekloud.com/lessons/labs-6/


