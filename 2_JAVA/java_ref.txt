#################################################
#                 JAVA                          #
#################################################

=================================================
#         Convater | Param  | Json                                        
================================================= 


#From Json
-------------------------------------------------

JSONObject json = new JSONObject(reqObj);
Date appointDate = Def.getDate(json, "appointDate", "dd/MM/yyyy");
Long doctorNo = Def.getLong(json, "doctorNo");
Long shiftNo = Def.getLong(json, "shiftNo");



#From HttpParam | request.getParameter | Parameter
-------------------------------------------------
String companyNoStr = request.getParameter("companyNo");
if (companyNoStr != null && !companyNoStr.isEmpty()) {
	Long companyNo = Long.valueOf(companyNoStr);
	if (companyNo > 0) {
		viewPathSamplePendingCollectionEntity.setCompanyNo(companyNo);
	}
}

String hospitalNumber = request.getParameter("hospitalNumber");
if (hospitalNumber != null && !hospitalNumber.isEmpty()) {
	isSearch = true;
	int setHpNoRs = setKParamPdSetHospitalNo(hospitalNumber);
	viewPathSamplePendingCollectionEntity.setHospitalNumber(hospitalNumber);
}

String fromDateStr = request.getParameter("fromDate");
String toDateStr = request.getParameter("toDate");

Date fromDate = deateParse(fromDateStr, "dd/MM/yyyy");
Date toDate = deateParse(toDateStr, "dd/MM/yyyy");

if (fromDate != null && toDate != null) {
	isSearch = true;
	viewPathSamplePendingCollectionEntity.setFromDate(fromDate);
	viewPathSamplePendingCollectionEntity.setToDate(toDate);

	int setInvoiceFrmDateRs = setKParamPdSetInvoiceDateFrom(
			viewPathSamplePendingCollectionEntity.getFromDate());
	int setInvoiceToDateRs = setKParamPdSetInvoiceDateTo(viewPathSamplePendingCollectionEntity.getToDate());

}


================================================
#          List | Filter | Array  | Short                                       
================================================= 

#List From Response Obj
-------------------------------------------------
List<ViewDepartmentEntity> departmentList = new ArrayList<>();	
	
if (response.isSuccess() && !CollectionUtils.isEmpty(response.getItems())) {
departmentList = getListFromObject(response.getItems(), ViewDepartmentEntity.class);


#List Short by Name
-------------------------------------------------
departmentList = departmentList.stream().sorted((a1, a2) -> a1.getBuName().compareTo(a2.getBuName()))
					.collect(Collectors.toList());	


#Filter a list of object by its list field
-------------------------------------------------

public class Student {
    List<Course> courses;
    ...
}
public class Course {
    String name;
    ...
}

List<Student> studentList;
List<Student> algorithmsCourseStudentList = 
    studentList.stream()
               .filter(a -> a.getCourses()
                             .stream()
                             .anyMatch(c -> c.getCourseName().equals("Algorithms")))
               .collect(Collectors.toList());

			   
allMatch will only give you Students that all their Courses are named "Algorithms".

anyMatch will give you all Students that have at least one Course named "Algorithms"


=================================================
#         Query | sql call                                      
================================================= 

public static String getScheduleByDoctorNoDateShiftNo(Long doctorNo, Long shiftNo ) {
	StringBuilder sqlQuery = new StringBuilder();
	sqlQuery.append("select * from hpms_doc_schedule ");
	sqlQuery.append("where doctor_no = 137 ");
	sqlQuery.append("and shiftdtl_no = 2 ");
	sqlQuery.append("wand trunc(empschedule_dt) between '31-may-2021' and '31-may-2021' ");
	System.out.println("getScheduleByDoctorNoDateShiftNo: "+sqlQuery.toString());
	return sqlQuery.toString();
}


public LabReportSaCompanyFlgDto getLabReportSaCompanyFlag(Long companyNo) {
	boolean errorFlag = false;
	LabReportSaCompanyFlgDto labReportSaCompanyFlg = new LabReportSaCompanyFlgDto();
	Connection con = null;
	ResultSet rs = null;
	Statement stm = null;
	List<LabReportSaCompanyFlgDto> labReportSaCompanyFlgList = new ArrayList<LabReportSaCompanyFlgDto>();
	try {
		con = getOraConnection();
		stm = con.createStatement();
		rs = stm.executeQuery(ReportStatement.getLabReportSaCompanyFlagQuery(companyNo, isEnbRpGnConLog()));
		while (rs.next()) {
			LabReportSaCompanyFlgDto obj = new LabReportSaCompanyFlgDto();

			obj.setRepPreparedPrompt(rs.getString("REP_PREPARED_PROMPT"));
			obj.setRepVerifyPrompt(rs.getString("REP_VERIFY_PROMPT"));
			obj.setRepConsultantPrompt(rs.getString("REP_CONSULTANT_PROMPT"));
			obj.setCollTimeFlg(rs.getLong("COLL_TIME_FLAG"));
			obj.setReceiveTimeFlg(rs.getLong("RECEIVE_TIME_FLAG"));
			obj.setResultEntryTimeFlg(rs.getLong("RESULT_ENTRY_TIME_FLAG"));
			obj.setRepSlogan(rs.getString("REP_SLOGAN"));
			obj.setRepEndText(rs.getString("REP_END_TEXT"));

			labReportSaCompanyFlgList.add(obj);
		}
		if (!labReportSaCompanyFlgList.isEmpty()) {
			labReportSaCompanyFlg = labReportSaCompanyFlgList.get(0);
		}
	} catch (SQLException e) {
		e.printStackTrace();
		errorFlag = true;
	} finally {
		finalyConStmRs(con, stm, rs);
	}
	if (errorFlag) {
		return null;
	}
	return labReportSaCompanyFlg;
}



=