#################################################
#                 AWS                          #
#################################################

Dirct connection shared vapc all transictiv
Do so
 
 
=================================================
#To Do           
================================================= 



- Read white paper what is recomand AWS
- ELB undestanding
- AWS S3  undestanding

- cludFont
- AWS Global Accelerator
- Amazon FSx
- SQS, SNS, MQ and Amazon Kinesis
- DynamoDB
- CloudWatch
- AWS Event and EventBridge
- STS
- KMS/CloudHSM
- Transit Gateway | ECMP
- TrafficMirroring
- EventProcessing | SQS, SNS
- HPC ENA, EFA, 
- CloudFormation
- StepFunction | SWS
- EMR
- AppSync

Whitepapers:4
 - Architecting for the cloud : AWS best practices
 - AWS Well-Architected Framework
 - AWS Disaster Recovery

-Inportant services FAQ
-AWS Community
-AWS Conference(Youtube)







=================================================
#Documentation | doc | Info            
================================================= 


AWS- 
  -Region
  -VPC
	-AvailableZone
	-Router 
      -NACL*
	-Subnet
      -SecurityGroup	
	  -EC2
 -Gateway


NFS - Network file system
=================================================
#Subnet | cidr             
================================================= 
Subnet create on availablity zone not on Region. Same subnet can not take more then one.


Public Subnet
 - If a subnet traffic is routed to on Internet Gateway it is public with a public IP.
Private Subnet
 - If a Subnet dosnot have a route to the internet Gateway then it is private.
   When you create a VPC you must specify on IPv4 CIDR blica for the VPC, The allowed blick size is betwwn /16 to /28 netmask.
   The first four and last IP address of Subnet cannot be assigned.
    - Suppose a IP => 10.0.0.0/16
	- 10.0.0.0 Network address
	- 10.0.0.1 Reserved by AWS for VPC Route
	- 10.0.0.2 Reserved By AWS for DNS server
	- 10.0.0.3 Reserved By AWS for future use
	- 10.0.0.255 Brodycast Address
	AWS do not support brodcust in a VPC but reserve the address.
	
	


=================================================
#VPC | vpc | virtual private cloud                
================================================= 

Vpc is a Virtual Network or DataCenter inside AWS for one Client.

- It is logical Isolated from Other virtual Network in the AWS.
- Max 5 VPC can be created and 200 subnet in 1 VPC.
- We Can allocate Max 5 Elastic IP.
- Once a VPC created DHCP, NACL and Sucurity Group will be created automatically.
- A VPC is confied to on AWS Region and dos not extend between Region.

- Onece the VPC is created, Its CIDR block range cant change.
  (You can create another CIDR make it primary and older one will be Secondary then you can delete fitst one)
- If you need a diffenent CIDR size, create a new VPC.
- The different subnets wihtin a VPC cannot overlap.
- You can expend yor vpc CIDR by adding new/extra IP address.


VPC create on Region not available zone. all property of VPC are Regional becaus its exists on Region. 
One vpc cant extend more then one Region.


VPC Two Type

- Default Vpc
- Custom Vpc

Primary diffent of of both, default vpc has internet gatway custom vpc has not, you can added.

Default VPC has default CIDR, Security Group, NACL and Route table setting.
In Custom VPC has to be create considering its CIDR dos not have Internet Getwat be default.
 


#Component of VPC
-------------------------------------------------

 - CIDR and IP address subnet
 - Implied router and Routing Table
 - Internet Gatway
 - Security Group
 - Network ACL
 - Virtual Private gatway 
 - Peering connections
 - Elastic IP




=================================================
#Storage | s3 | elastic | efs | ebs              
================================================= 

Amazon Simple Storage Service (Amazon S3) is an object storage service that offers 
industry-leading scalability, data availability, security, and performance.

Amazon S3 is an object storage service that stores data as objects within buckets. 
An object is a file and any metadata that describes the file. A bucket is a container for objects.
Each object has a key (or key name), which is the unique identifier for the object within the bucket.

Access control lists (ACLs)
You can use ACLs to grant read and write permissions to authorized users for individual buckets and objects. 
Each bucket and object has an ACL attached to it as a subresource. 
The ACL defines which AWS accounts or groups are granted access and the type of access.

Amazon S3 cloud storage is an object-based storage service. You cannot install an operating system when you use 
Amazon S3 storage because data cannot be accessed on the block level as it is required by an operating system.


AWS Storage:
  - Simple Storage service (S3)
  - Elastic file system (EFS)
  - Elastic Block Storage (EBS)
  - Glacier
  - Snowball
  
  
   
#Simple Storage Service (S3)
--------------------------------------------------
S3 Object base storage, its able to access via http/https.
Its a distrubute database and data keep in bucket.

TypeOfS3:
 - S3 Standard
 - Amazon Glacher
 - Glacher Deep archive
 - Standart infrequental acc
 - One zone IA
 - Intelactual
 
 

#Elastic Block Storage (EBS)
-------------------------------------------------
 - One EBS for one EC2
 - EBS Volume locked at the AZ level, EC2 and EBS have to be same zone to attach.
 - Make shapshots to sent data volum to AZ or region.
 - Using EBS Multi-Attach, you can attach the same EBS volume to multiple EC2 instances in the same AZ (with Full rw).

 

#Object Lifecycle Management
------------------------------------------------
A lifecycle configuration is a set of rules that define actions that AWS S3 applies to a group of objects. There are two types of actions:

Transaction Actions
This action defines objects’ transition from one storage class to another.

Expiration Actions
This action deletes objects in the Amazon S3 bucket.

  
=================================================
#Elastic Load Blancer |  | elb | ELB          
================================================= 

The AWS ELB is an AWS service for automatic distribution of incoming application traffic across its components like Amazon EC2 instances, AWS Lambda, and containers..

A load balancer accepts incoming traffic from clients and routes requests to its registered targets (such as EC2) in one or more AZ. 
The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets.
When the load balancer detects an unhealthy target, it stops routing traffic to that target. 
It then resumes routing traffic to that target when it detects that the target is healthy again.

TypeOfLoadBalancer:
 - Application Load Balancers
 - Network Load Balancers
 - Gateway Load Balancers
 - Classic Load Balancers
 
 
With Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, 
you register targets in target groups, and route traffic to the target groups. 
With Classic Load Balancers,you register instances with the load balancer.


Cross-zone load balancing is enable then every target equal load, if disable the  every AZ are equal. 
Application Load Balancers, cross-zone load balancing is always enabled.
With Network Load Balancers and Gateway Load Balancers, cross-zone load balancing is disabled by default. 


Elastic Load Balancing works with the following services:

 - Amazon EC2 — Virtual servers that run your applications in the cloud. 
 - Amazon EC2 Auto Scaling — Ensures that you are running your desired number of instances, even if an instance fails. 
 - AWS Certificate Manager — When you create an HTTPS listener, you can specify certificates provided by ACM. The load balancer uses certificates to terminate connections and decrypt requests from clients.
 - Amazon CloudWatch — Enables you to monitor your load balancer and to take action as needed. 
 - Amazon ECS — Enables you to run, stop, and manage Docker containers on a cluster of EC2 instances. 
 - AWS Global Accelerator — Improves the availability and performance of your application. Use an accelerator to distribute traffic across multiple load balancers in one or more AWS Regions.
 - Route 53 — Provides a reliable and cost-effective way to route visitors to websites by translating domain names into the numeric IP addresses that computers use to connect to each other.
 - AWS WAF — You can use AWS WAF (Web Application Firewall) with your Application Load Balancer to allow or block requests based on the rules in a web access control list (web ACL).

 
#AWS Classic Load Balancer:
------------------------------------------------- 
This simple load balancer operates both at the request level and the connection level and was originally used for classic EC2 instances. 
Classic Load balancer in AWS is used on EC2-classic instances. This is the previous generation’s load balancer and also it doesn’t allow host-based or path based routing.
Mostly it is used to route traffic to one single URL.


#NLB
------------------------------------------------- 
AWS recommends AWS Network Load Balancer (NLB) if the application needs to achieve static IP and extreme performance.
AWS network load balancers also avoid DNS caching problems and work with existing firewall security policies of users thanks to its static and resilient IP addresses. 
And AWS load balancer TLS termination is only possible with NLB.


#Create a ELB
------------------------------------------------- 
Select which type of AWS load balancer to use
Complete basic configuration
Configure a security group
Configure a target group
Register targets
Create a load balancer and test it
Get more details on how to configure AWS load balancers


=================================================
#AutoScaling             
================================================= 

AutoScaling happend in a available zone.


Component of Authscaling
 - Launch configuation
 - AutoScaling Group
 - Scaling Policy
 
 
AutoScalingPolicies
 - Manual
 - Daynamic
 
 
 




















=================================================
#Exam content         
================================================= 

#Domain % of Exam
-------------------------------------------------
Domain 1: Design Resilient Architectures 30%
Domain 2: Design High-Performing Architectures 28%
Domain 3: Design Secure Applications and Architectures 24%
Domain 4: Design Cost-Optimized Architectures 18%
TOTAL 100%


Domain 1: Design Resilient Architectures

	1.1 Design a multi-tier architecture solution
		 Determine a solution design based on access patterns.
		 Determine a scaling strategy for components used in a design.
		 Select an appropriate database based on requirements.
		 Select an appropriate compute and storage service based on requirements.
	1.2 Design highly available and/or fault-tolerant architectures
		 Determine the amount of resources needed to provide a fault-tolerant architecture across
		Availability Zones.
		 Select a highly available configuration to mitigate single points of failure.
		 Apply AWS services to improve the reliability of legacy applications when application changes
		are not possible.
		 Select an appropriate disaster recovery strategy to meet business requirements.
		 Identify key performance indicators to ensure the high availability of the solution.
	1.3 Design decoupling mechanisms using AWS services
		 Determine which AWS services can be leveraged to achieve loose coupling of components.
		 Determine when to leverage serverless technologies to enable decoupling.
	1.4 Choose appropriate resilient storage
		 Define a strategy to ensure the durability of data.
		 Identify how data service consistency will affect the operation of the application.
		 Select data services that will meet the access requirements of the application.
		 Identify storage services that can be used with hybrid or non-cloud-native applications.


Domain 2: Design High-Performing Architectures

	2.1 Identify elastic and scalable compute solutions for a workload
		 Select the appropriate instance(s) based on compute, storage, and networking requirements.
		 Choose the appropriate architecture and services that scale to meet performance
		requirements.
		 Identify metrics to monitor the performance of the solution. 
	2.2 Select high-performing and scalable storage solutions for a workload
		 Select a storage service and configuration that meets performance demands.
		 Determine storage services that can scale to accommodate future needs.
	2.3 Select high-performing networking solutions for a workload
		 Select appropriate AWS connectivity options to meet performance demands.
		 Select appropriate features to optimize connectivity to AWS public services.
		 Determine an edge caching strategy to provide performance benefits.
		 Select appropriate data transfer service for migration and/or ingestion.
	2.4 Choose high-performing database solutions for a workload
		 Select an appropriate database scaling strategy.
		 Determine when database caching is required for performance improvement.
		 Choose a suitable database service to meet performance needs.
		
		
Domain 3: Design Secure Applications and Architectures

	3.1 Design secure access to AWS resources
		 Determine when to choose between users, groups, and roles.
		 Interpret the net effect of a given access policy.
		 Select appropriate techniques to secure a root account.
		 Determine ways to secure credentials using features of AWS IAM.
		 Determine the secure method for an application to access AWS APIs.
		 Select appropriate services to create traceability for access to AWS resources.
	3.2 Design secure application tiers
		 Given traffic control requirements, determine when and how to use security groups and
		network ACLs.
		 Determine a network segmentation strategy using public and private subnets.
		 Select the appropriate routing mechanism to securely access AWS service endpoints or
		internet-based resources from Amazon VPC.
		 Select appropriate AWS services to protect applications from external threats.
	3.3 Select appropriate data security options
		 Determine the policies that need to be applied to objects based on access patterns.
		 Select appropriate encryption options for data at rest and in transit for AWS services.
		 Select appropriate key management options based on requirements.
		
		
Domain 4: Design Cost-Optimized Architectures

	4.1 Identify cost-effective storage solutions
		 Determine the most cost-effective data storage options based on requirements.
		 Apply automated processes to ensure that data over time is stored on storage tiers that
		minimize costs.
	4.2 Identify cost-effective compute and database services
		 Determine the most cost-effective Amazon EC2 billing options for each aspect of the
		workload.
		 Determine the most cost-effective database options based on requirements.
		 Select appropriate scaling strategies from a cost perspective.
		 Select and size compute resources that are optimally suited for the workload.
		 Determine options to minimize total cost of ownership (TCO) through managed services and
		serverless architectures.
	4.3 Design cost-optimized network architectures
		 Identify when content delivery can be used to reduce costs.
		 Determine strategies to reduce data transfer costs within AWS.
		 Determine the most cost-effective connectivity options between AWS and on-premises
		environments.
		
	
	
#Which key tools, technologies, and concepts might be covered on the exam?
-------------------------------------------------
	 Compute
	 Cost management
	 Database
	 Disaster recovery
	 High availability
	 Management and governance
	 Microservices and component decoupling
	 Migration and data transfer
	 Networking, connectivity, and content delivery
	 Security
	 Serverless design principles
	 Storage


#AWS services and features
-------------------------------------------------
Analytics:
	 Amazon Athena
	 Amazon Elasticsearch Service (Amazon ES)
	 Amazon EMR
	 AWS Glue
	 Amazon Kinesis
	 Amazon QuickSight


AWS Billing and Cost Management:
	 AWS Budgets
	 Cost Explorer
	
Application Integration:
	 Amazon Simple Notification Service (Amazon SNS)
	 Amazon Simple Queue Service (Amazon SQS)
	
Compute:
	 Amazon EC2
	 AWS Elastic Beanstalk
	 Amazon Elastic Container Service (Amazon ECS)
	 Amazon Elastic Kubernetes Service (Amazon EKS)
	 Elastic Load Balancing
	 AWS Fargate
	 AWS Lambda
	
Database:
	 Amazon Aurora
	 Amazon DynamoDB
	 Amazon ElastiCache
	 Amazon RDS
	 Amazon Redshift
	
Management and Governance:
	 AWS Auto Scaling
	 AWS Backup
	 AWS CloudFormation
	 AWS CloudTrail
	 Amazon CloudWatch
	 AWS Config
	 Amazon EventBridge (Amazon CloudWatch Events)
	 AWS Organizations
	 AWS Resource Access Manager
	 AWS Systems Manager
	 AWS Trusted Advisor
	
Migration and Transfer:
	 AWS Database Migration Service (AWS DMS)
	 AWS DataSync
	 AWS Migration Hub
	 AWS Server Migration Service (AWS SMS)
	 AWS Snowball
	 AWS Transfer Family
	
Networking and Content Delivery:
	 Amazon API Gateway
	 Amazon CloudFront
	 AWS Direct Connect
	 AWS Global Accelerator
	 Amazon Route 53
	 AWS Transit Gateway
	 Amazon VPC (and associated features)
	
Security, Identity, and Compliance:
	 AWS Certificate Manager (ACM)
	 AWS Directory Service
	 Amazon GuardDuty
	 AWS Identity and Access Management (IAM)
	 Amazon Inspector
	 AWS Key Management Service (AWS KMS)
	 Amazon Macie
	 AWS Secrets Manager
	 AWS Shield
	 AWS Single Sign-On
	 AWS WAF
	
Storage:
	 Amazon Elastic Block Store (Amazon EBS)
	 Amazon Elastic File System (Amazon EFS)
	 Amazon FSx
	 Amazon S3
	 Amazon S3 Glacier
	 AWS Storage Gateway
	 
 

 

 
 





  