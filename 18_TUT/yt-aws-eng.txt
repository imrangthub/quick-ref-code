#################################################
#                 AWS-ENG                       #
#################################################




=================================================
##Introduction
=================================================


Welcome to this AWS course!
In this tutorial, we’ll cover the fundamentals of AWS—what it is, why it’s important, and how this course will help you.

AWS is massive, with countless services.
If you're new to cloud computing or want to build a strong foundation, this course is for you!

You'll learn about core AWS services like computing, storage, networking, and security.
Planning for an AWS certification? This course gives you a solid overview to get started!

And remember—AWS documentation is a goldmine! It’s detailed, clear, and packed with examples.

Let’s dive in and start mastering AWS! 🚀





2:00
=============
🔹 Topics Covered in This AWS Tutorial!

Here’s what you’ll learn in this course:

✅ Introduction – A quick overview of what this course covers.

✅ Opening AWS Account & Free Tier – Step-by-step guide to creating an AWS account and exploring the free tier.

✅ Getting Started – Setting up AWS and preparing to dive into cloud services.

✅ Cost & Budgets – How to manage AWS costs and set budget limits.

✅ Users, Roles & IAM – Understanding different AWS user roles and IAM (Identity and Access Management).

✅ AWS Architecture, Regions & AZs – An overview of AWS infrastructure, regions, and availability zones.

✅ Hands-on with EC2 – A deep dive into AWS’s most popular service: Elastic Compute Cloud (EC2).

✅ AWS Storage Services – Exploring AWS storage options like S3, EBS, and Glacier.

✅ Databases in AWS – Understanding AWS database services like RDS, DynamoDB, and more.

✅ ELB & ASG – Load balancing (ELB) and auto-scaling (ASG) for high availability.

✅ AWS Managed Services – Exploring fully managed AWS solutions.

✅ AWS Serverless – Working with AWS Lambda and other serverless services.

✅ AWS Queues & Streams – Understanding SQS, SNS, and Kinesis for messaging and streaming.

✅ Route 53 & CDN – Domain management and content delivery using AWS services.

✅ AWS Networking – Exploring AWS networking and infrastructure.

✅ Security & Monitoring – Best practices for AWS security, logging, and monitoring.

✅ AWS Machine Learning – Getting started with AWS AI/ML services.

✅ AWS Well-Architected Framework – Best practices for designing scalable, secure AWS solutions.

✅ Running Real-World Projects – Hands-on project deployment in AWS.

✅ AWS Certification Guide – Preparing for AWS exams and certifications.

Let’s get started and master AWS! 🚀🔥





7:40
==================

Cloud Computing Explained:
Cloud computing provides on-demand access to computing resources via the internet, including applications, servers, storage, databases, and software.

It offers flexible services and hardware for businesses and personal use—just as much as you need.

💡 Pay-as-you-go Model: You only pay for what you use.
If you’re not using resources, you won’t be billed!

Simple, scalable, and cost-efficient! 🚀




15:30
================
Cloud Service Models & Key Characteristics Explained

Let’s talk about Cloud Service Models:

✅ IaaS (Infrastructure as a Service) – Provides virtualized computing resources like servers, storage, and networking.

✅ PaaS (Platform as a Service) – Offers a complete platform that includes infrastructure and tools to develop applications.

✅ SaaS (Software as a Service) – Delivers software applications over the internet, no installation required!

AWS as a Cloud Provider
AWS is one of the top cloud providers out there, offering a wide range of services.

Now, let’s explore Key Characteristics of Cloud Services:

🔹 On-Demand Self-Service – You can provision and manage resources as needed, without any intervention from the service provider.

🔹 Broad Network Access – Cloud services are accessible from anywhere, as long as you have an internet connection.

🔹 Rapid Elasticity – Scale your resources up or down quickly based on your needs, perfect for handling traffic spikes.

🔹 Measured Service – Resources are metered, so you’re billed based on actual usage.

AWS Cost Explorer
With AWS, you can easily check your costs:

Assess costs for specific services based on your usage.
Choose regions and services, and see how they impact the cost.
Generate a simple bill to get an idea of how much you’ll pay for your system.
With this, you can predict costs and manage your cloud budget effectively. 🚀





24:20
===============
AWS offers over 200 different services across various categories like computing, storage, databases, machine learning, security, networking, and more!

Basic AWS Services
✅ Compute Services:

EC2 (Elastic Compute Cloud) – Scalable virtual servers in the cloud for running applications and workloads.
✅ Networking:

VPC (Virtual Private Cloud) – Create isolated sections of the AWS Cloud for secure networking.
Route 53 – Scalable and highly available DNS web service.
✅ Storage & Content Delivery:

S3 (Simple Storage Service) – Scalable and highly durable object storage.
EBS (Elastic Block Store) – Block-level storage volumes for EC2 instances.
Glacier – Low-cost, long-term archival storage.
CloudFront – CDN service for securely delivering data, videos, apps, and APIs globally.
✅ Databases:

RDS (Relational Database Service) – Managed relational databases supporting MySQL, PostgreSQL, Oracle, and SQL Server.
DynamoDB – Fully managed NoSQL database with automatic scaling.
These services are the building blocks for deploying powerful applications on AWS. 🚀





28:00
======================
Before we dive into exploring AWS services, the first step is to create an AWS account.

In the next video, we'll walk you through the process of opening an account, what you need to get started, 
and how to take advantage of AWS’s free tier.

Stay tuned, and let's get started!








=================================================
Opening AWS Account and Free Tier
=================================================
"Hey everyone! Welcome to this tutorial.
    Today, we’ll see how to create an AWS account and explore the Free Tier benefits.
    Let’s get started!"

    A valid email address 📧
    A credit or debit card 💳
    A phone number 📱
    A billing address 🏠
    Acceptance of AWS Terms & Conditions ✅






2:20
=============
Let's start the account opening process using this link:
    SignUp Link: https://console.aws.amazon.com/console/home?nc2=h_ct&src=header-signin


Or

Search for AWS and go to the Create an Account link.

I already have an AWS account, so I'm not going to open a new one again.
However, I will show the form and provide step-by-step screenshots for creating an account.


Step 1: Enter Account Details
    Provide your account email and root username.
    You'll receive an email verification code.
    Enter the code and click Verify.


Step 2: Provide Contact Information
    Fill in your country, city, postal code, phone number, etc.

then anohter form asky you for Billing information :
    Add your credit/debit card number for payment verification.


and now final step:
     Select a support plan—for learning purposes, choose "Basic Support", which is free.




4:20
================================
"Hey everyone! In this video, we’ll explore how AWS Free Tier works and what policies you need to be aware of.
Let’s dive in!"



[WHAT IS AWS FREE TIER?]
✅ AWS Free Tier gives you 1 year of free access to select AWS services.
✅ Each service has different limits and policies.
✅ You can find full details on the AWS website or by searching on Google.

[IMPORTANT THINGS TO KNOW]
✅ Watch your usage carefully to avoid unexpected charges.
✅ Example: EC2 (Virtual Machine) allows 720 hours per month under Free Tier.
✅ If you don’t stop the service, even after signing out or closing your browser, it keeps running on AWS servers, and you might exceed your Free Tier limit.

[LIMITATIONS]
✅ Not all AWS services are included in Free Tier.
✅ Some services, like EC2, only offer specific instance types (CPU, memory).
✅ Always check AWS documentation for clear details.

"That’s how AWS Free Tier works!
In the next video, we’ll start using AWS services hands-on.







=================================================
Getting Started
=================================================

"Hey everyone! Today, we’re going to explore AWS for the first time.
Let’s start by logging in and understanding how to work with AWS."


[WAYS TO ACCESS AWS]
✅ You can use AWS in three ways:
1️⃣ AWS Management Console – Login with a password 🖥️
2️⃣ Command Line Interface (CLI) – Uses access keys for authentication 💻
3️⃣ Software Development Kit (SDK) – For automation and integration using programming languages 📜

[BEST OPTION FOR BEGINNERS]
✅ After logging in, you’ll see the AWS Management Console.
✅ For learning purposes, I highly recommend using the Management Console because it’s easy to navigate.

[WHEN TO USE CLI & SDK]
✅ CLI – Best for faster operations once you gain expertise.
✅ SDK – Ideal for automation, letting software interact with AWS without human intervention.
✅ AWS SDK supports almost all popular programming languages.

[OUTRO]
🎬 Presenter:
"That’s how you access AWS!
In the next video, we’ll start using AWS services hands-on.





4:20
====================
To get started, go to the AWS Management Console and search for a service, such as EC2, RDS, S3, etc.

Here, you will see different services along with their details.





5:00
=========================
"Hey everyone! Today, we’re launching our first AWS EC2 instance.
Let’s go step by step and get it running!"

[STEP 1: INSTANCE CONFIGURATION]
✅ Give a Name – Choose a name for your instance.
✅ Select an OS – We’ll pick Ubuntu for this tutorial.
✅ Choose Instance Type – For Free Tier, select t2.micro (perfect for learning).

[STEP 2: KEY PAIR]
✅ Create or select a key pair – This is needed for remote access via CLI.
✅ We’ll cover how to use key pairs in a future video.

[STEP 3: NETWORKING]
✅ Select a Security Group – Works like a firewall for your instance.
✅ We’ll have a dedicated video on networking and security, so don’t worry for now.

[STEP 4: STORAGE]
✅ Allocate storage space – We’ll leave it at the default setting for now.

[STEP 5: LAUNCH INSTANCE]
✅ Click the Launch button! 🚀
✅ The instance is now starting – It may take a few minutes to boot up.

[CHECK INSTANCE DETAILS]
✅ Once running, you can view details like:

Private IP
Public IP
Public DNS
[OUTRO]
🎬 Presenter:
"And that’s it! Our EC2 instance is now running.
In the next video, we’ll dive deeper into working with EC2.








10:30
=================================
"Hey everyone! Welcome to today's tutorial. In this video, we’ll walk through how to make our newly created EC2 instance useful by installing packages on it and setting up a server. Let’s get started!"

Step 1: Login into the EC2 Instance

"Now that our EC2 instance is ready, we need to log into it to start installing some packages.
One way to do this is by clicking on this icon here, and it will automatically open the CLI mode for you."

Click the icon
"I’m clicking it now and, as you can see, I’m logged in."

Step 2: Check the Release Version

"Let’s first run a simple command to check the release version of our instance.
I’ll run the cat /etc/os-release command."

Run command
"As you can see, we have the release version details here."

Step 3: Update the Instance

"Before installing any package, just like on any Linux machine, we need to update the instance.
So, I’ll run sudo apt-get update to make sure everything is up to date."

Run command
"And that’s done!"

Step 4: Install the Nginx Server

"Now, let's install Nginx, which is a popular web server.
We’ll use the regular command: sudo apt-get install nginx."

Run command
"The installation is complete!"

Step 5: Check the Running Port

"Let's check if Nginx is running. But first, we need to verify the ports that are open on the instance."

Run command
"Ah! Looks like the net-tools package is missing. No worries, let’s install it."

Run command to install net-tools
"Alright, it’s installed!"

"Now, let’s check the ports again."

Run command to check ports
"Here it is! Nginx is running on port 80, as expected."

Step 6: Access the Server

"Now, let’s access the server.
To do this, we’ll use the public DNS or public IP of the EC2 instance, which you can find in the instance details section."

Show where to find the public IP in AWS Management Console
"Let’s grab the public DNS/IP and access the server."

Access the server via browser
"And there you go! We have the default Nginx page running on our AWS EC2 instance."

Outro:
"That’s it for today’s tutorial. We’ve successfully logged into our EC2 instance, installed Nginx, and accessed the server via the public IP.
Thanks for watching, and don’t forget to like and subscribe for more AWS tutorials!"







15:00
==================
No we’ll learn how to copy files from your local machine to your AWS EC2 instance.
We’ll go over multiple methods to do this, including using the CLI, Python SDK, and Software SDKs. Let’s dive in!"

Step 1: Using CLI in PowerShell

"First up, I’ll show you how to copy files using the CLI.
Since I’m on Windows, I’ll be using PowerShell to do this."

Show PowerShell example for copying files
"Here’s the command you would use in PowerShell to copy files from your local machine to the EC2 instance."

Step 2: Using AWS Python SDK

"Alternatively, if you prefer Python, you can use the AWS Python SDK to achieve this.
You can get the SDK from GitHub, and I’ve already added the link to the documentation."

Show GitHub link on the screen
"Just follow the instructions on the GitHub repo to get started with the Python SDK."

Step 3: Using Software SDKs (Node SDK Example)

"You can also use software SDKs to copy files, and here’s an example using the Node.js SDK."

Show Node.js SDK example
"This is how you would do it using the Node SDK. It’s pretty straightforward!"

Outro:

"That’s it for today’s tutorial! We’ve covered three different ways to copy files from your local machine to your AWS EC2 instance—using the CLI, Python SDK, and Software SDKs.
I hope this was helpful! Don’t forget to like, comment, and subscribe for more AWS tutorials. See you in the next video!"






=================================================
Cost And Budgets
=================================================
In this tutorial, we will talk about Cost and Budgets in AWS.

AWS provides a dashboard called Cost Management, where you can see all AWS-related costs in one place.

Let's check it out. Open the Cost Management dashboard.

Here, you can see the individual costs for each service, how much is being consumed, and other details.

You can also estimate future costs using the AWS My Estimation menu.

For example, if you need a database server or any other service, you can calculate how much the bill will be based on usage and time.

This helps in planning your AWS budget effectively.






2:20
==============
Let's calculate the bill for an EC2 service.

1️⃣ Select EC2 from the services list.
2️⃣ Choose a region—AWS pricing varies by region for the same server.

We will discuss regions and transactions in more detail later.

Now, select the instance family based on your server requirements.

Payment Options
AWS offers different payment options, each with different cost-saving benefits.

Additional Costs
You can add extra storage volumes, monitoring tools, etc., which increase the service cost.

AWS Budget Notifications
AWS provides a notification system for budget tracking.

You can set a cost threshold.
If the cost exceeds the threshold, AWS sends alerts via SMS, email, etc.
You can take actions like stopping a service or starting another based on notifications.
Creating a Budget
You can create a budget for a single service or multiple services.
AWS Budget helps you track and control your personal or company expenses.

You can also save budgets and create templates for frequent use.

For learning purposes, we can set a $0 or $1 budget to minimize costs and prevent accidental charges.











=================================================
User, Role and IAM User
=================================================
In this tutorial, we will discuss AWS Users, IAM Roles, and IAM Users—their differences, best practices, and how they help manage access in AWS.

1️⃣ AWS Root User
The Root User is created when you sign up for an AWS account.
It has full control over all AWS services and resources.
Best Practice: Avoid using the root user for daily tasks. Instead, create IAM users with specific permissions.
2️⃣ AWS IAM Users (Identity and Access Management)
IAM users have unique credentials (username/password or access keys).
They can have custom permissions to access only the necessary AWS resources.
Common Use Cases:
Developers accessing specific AWS services.
Admin users managing AWS accounts.
Applications using access keys for authentication.
Security Best Practices:
Enable Multi-Factor Authentication (MFA).
Assign least privilege permissions—only what is required.
Rotate access keys regularly to prevent security risks.
3️⃣ AWS IAM Roles
IAM roles allow AWS services or users to assume temporary access permissions.
Unlike IAM users, roles do not require long-term credentials.
Common Use Cases:
EC2 instances accessing S3 without storing credentials.
Lambda functions interacting with databases.
Federated access for users logging in via external identity providers.
4️⃣ AWS Federated Users
These are users who log in using an external identity provider (e.g., Active Directory, Google, Facebook).
They do not need IAM user accounts but gain access through IAM roles.
Useful for large enterprises with existing authentication systems.
5️⃣ AWS Account
An AWS account represents a unique business or organization within AWS.
It includes:
Billing and resource management.
Security and identity settings.
Multiple IAM users and roles under one account.
🔹 Key Takeaways
✔️ Use the root user only for critical tasks, like billing or security configurations.
✔️ Create IAM users for team members and assign permissions carefully.
✔️ Use IAM roles to grant temporary access instead of long-term credentials.
✔️ Enable MFA and follow security best practices to protect your AWS environment.

Managing users, roles, and permissions properly helps secure your AWS infrastructure while ensuring smooth operations.







3:30
====================

We will also learn how to assign permissions and sign in as an IAM user step by step.

1️⃣ What is an IAM User?
An IAM (Identity and Access Management) user is a secure way to allow individuals or applications to access AWS services without using the root account.

✅ Each IAM user has specific credentials (username/password or access keys).
✅ Users can have custom permissions to access only the required AWS services.
✅ Using IAM users ensures better security and access control.

📌 Example:

A developer may have access to EC2 but not billing.
A finance team may have access to AWS billing but not EC2 instances.
2️⃣ IAM Policies – Controlling Access
IAM policies define what an IAM user, group, or role is allowed or denied to do in AWS.
A policy consists of statements that specify:
✔️ Allowed or denied actions (e.g., Start EC2, Read S3 bucket).
✔️ Resources on which these actions apply (e.g., specific S3 buckets).
✔️ Conditions for access (e.g., allowed only from a certain IP address).

Types of IAM Policies
🔹 AWS Managed Policies – Predefined by AWS for common use cases.
🔹 Customer Managed Policies – Custom policies created by users.
🔹 Inline Policies – Directly attached to a single IAM user, group, or role.

📌 Example Policy (Allow access to S3):

3️⃣ IAM Groups – Simplifying User Management
IAM Groups allow you to assign policies to multiple users at once, instead of assigning permissions individually.

✔️ Helps organize users based on their roles.
✔️ Users in a group inherit all the group permissions.
✔️ Makes permission management easier when onboarding new users.

📌 Example Groups:

Developers Group – Can access EC2, RDS, S3.
Admins Group – Full access to AWS resources.
Read-Only Group – Can only view AWS services but cannot modify them.
4️⃣ Step-by-Step: Creating an IAM Policy and Group
Now, let’s create an IAM policy and a user group and assign them to an IAM user.
📺 Watch the step-by-step process on the screen!

🔹 Step 1: Go to the IAM Management Console.
🔹 Step 2: Create a new policy with required permissions.
🔹 Step 3: Create an IAM group and attach the policy.
🔹 Step 4: Add an IAM user to the group.
🔹 Step 5: Assign necessary credentials.

5️⃣ Signing in as an IAM User
Once permissions and groups are assigned, we will sign in as the IAM user and verify access.

📌 IAM User Login Steps:
1️⃣ Open the AWS IAM Sign-In page.
2️⃣ Enter the IAM user credentials (username & password).
3️⃣ Verify that access is restricted based on permissions.

✅ IAM users help maintain secure and controlled access to AWS resources.
✅ Policies and groups simplify management, making it easy to assign permissions to multiple users.

🔹 Final Thoughts
✔️ Use IAM Users instead of the root user for daily tasks.
✔️ Apply least privilege when assigning permissions.
✔️ Use IAM Groups to manage multiple users efficiently.
✔️ Regularly review IAM Policies to maintain security.

That’s how AWS IAM Users, Policies, and Groups work!
🚀 Stay secure and manage access the right way!







=================================================
AWS Architecture, Regions and AZ
=================================================

In this tutorial, we will talk about AWS Architecture, Regions, and Availability Zones (AZs).
Understanding these concepts is essential for building scalable, reliable, and high-performance applications in the cloud.

1️⃣ AWS Architecture – Key Concepts
AWS is designed to provide high availability, fault tolerance, and scalability through:

✔️ Regions – Independent geographical locations.
✔️ Availability Zones (AZs) – Data centers within a region.

📌 AWS Documentation:
Regions & Availability Zones

2️⃣ What is an AWS Region?
A Region is a geographically isolated area where AWS resources are hosted.

✅ Each region is independent to ensure reliability.
✅ Helps businesses deploy applications close to their customers for better performance.
✅ Regions are separated to prevent failures from affecting global AWS services.

📌 Example AWS Regions:

us-east-1 (Virginia, USA)
eu-west-1 (Ireland)
ap-southeast-1 (Singapore)
🔹 Choosing the right region depends on latency, compliance, and cost.

3️⃣ What is an Availability Zone (AZ)?
An Availability Zone (AZ) is a physically separate data center or a collection of data centers within a region.

✅ Each region has multiple AZs to ensure redundancy.
✅ AZs are connected via low-latency networks.
✅ If one AZ fails, AWS automatically shifts workloads to another AZ.

📌 Example:
A region like us-east-1 has multiple AZs:

us-east-1a
us-east-1b
us-east-1c
🔹 Best Practice: Always deploy applications across multiple AZs for high availability.

4️⃣ Why Are AWS Regions and AZs Important?
AWS Regions and Availability Zones are critical for:

✔️ Fault Tolerance – Prevents system failures by distributing workloads.
✔️ Scalability – Allows businesses to expand without downtime.
✔️ Disaster Recovery – Ensures data is safe even if one AZ goes down.
✔️ High Performance – Reduces latency by serving users from the nearest region.

5️⃣ Best Practices for Using Regions and AZs
💡 Choose the right region based on latency, cost, and compliance.
💡 Deploy across multiple AZs to ensure high availability.
💡 Use AWS services like Route 53, Auto Scaling, and Load Balancers to manage traffic and improve reliability.

🔹 Final Thoughts
✔️ AWS Regions provide geographical isolation for resources.
✔️ Availability Zones ensure high availability and fault tolerance.
✔️ Using multiple AZs prevents downtime and improves application resilience.

That’s how AWS Regions and Availability Zones help you build scalable and reliable cloud applications! 🚀








=================================================
Play with EC2
=================================================







=================================================
AWS Storage services
=================================================



=================================================
Database in AWS 
=================================================



=================================================
ELB, ASG
=================================================



=================================================
AWS Managed Services
=================================================



=================================================
AWS Serverless
=================================================



=================================================
AWS Queue and Streams
=================================================



=================================================
Route53 and CDN
=================================================




=================================================
AWS Networking
=================================================



=================================================
Security and Monitoring
=================================================



=================================================
AWS Machine Learning
=================================================



=================================================
AWS Well-Architected
=================================================



=================================================
Project run on AWS
=================================================



=================================================
AWS Certification
=================================================



