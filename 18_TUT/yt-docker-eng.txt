#################################################
#                DOCKER-ENG                           #
#################################################


=================================================
##ForDockerCourse:
=================================================



##1) Introduction
=================================================

00:00-to-00:40mm
================
StartngPeech:
    Hey Guys, Welcome to this tutorial on Docker.
    If you are new to Docker, and want to learn Docker from scratch you’re in the right place.

    In this tutorial, I'll explain Docker from the very beginning.
    What is docker, how this docker thing works, why it’s so popular, and definitely TheEasyWay!

    Each topic will be explained with hands-on exercises to make it clear and practical.
    We are gonna use different programming languages, such as  Java, Python, PHP javaScript for practice projects. 
    This will be more interesting and gain a clear understanding of 
    how docker deals with various programming languages.

    and finally, we will deploy a Three Tier application including frontend, backend and Database using docker.
    to get a clear picture.

    Really,
    By the end, you’ll have a solid understanding of Docker and be ready to start using Docker in 
    real-world projects.
    So, grab your coffee, get comfortable, and let’s dive into the world of Docker!


00:40mm-to-00:50mm
==================
AboutDocuemnt:
    In this tutorial, I am gonna use this Document to organize the topic-resource, uses-commands, diagrams, screenshots, etc etc.
    and I will share it with you.
    The link of this Document will be available in the video description and first comment.
    And I will also share the GitHub link of the project and source code that will be used in this tutorial.
    


00:50mm-to-1:05mm
=================
You don’t have to be a programmer to learn Docker.
Anyone can learn Docker without coding skills.
actually, docker focuses on deployment and system management, not application development.



1:05mm-to-2:40mm
================
Introducing Tutorial Topics

Introduction
Just course Intro.


Docker Installation:
Here we Learn how to install Docker on various platforms, including Windows, macOS, and Linux.
Set it up step-by-step to ensuring Docker runs smoothly on your system and get started quickly.

Getting Started with Docker
Run our first container and we will explore some basic commands. 
a HelloWorld thing of docker.
Get familiar with Docker’s key parts like images and containers.

Docker in Depth
Understand how Docker works behind the scenes. 
Learn about its components, engine, internal-architecture, and how it makes apps run faster.

Docker Images and Containers
a deep dive into Docker images and containers.
Learn how to create, manage, and optimize Docker images and containers for efficient application deployment.
Find out what images and containers are and how they’re different. 
Create, manage, and explore them in detail.

Storage and Volumes
Explore Docker's storage options for data persistence.
Learn about different types of volumes and mounting to manage container data effectively.

Networking and Security
Discover Docker's networking capabilities, type of network. 
Learn about how to create, manage Docker's network and 
how containers talk to each other and stay secure using this docker network.

Simple Example Project
Work on several simple hands-on projects using different programming languages 
and run them as Docker containers. including frontend backend and database.
This will reinforce key concepts and give you practical Docker experience.


Docker Compose
Set up and run multiple containers with one file using Docker Compose. 
Learn how to run multiple DockerContainer using a single command.
Like frontend backend and database all those will run using only a single command.
Waht is Simplify your workflows with YAML-based configuration files and Manage everything easily.

Container Orchestration
Understand the need for container orchestration and explore tools like Kubernetes and Docker Swarm. 
Learn how to manage and scale containerized applications in production environments.


2:40mm-to-3:06
================
Which for This Course
    This course is for DevOps professionals, app developers, software engineers, IT managers, 
    and system architects. 
    It’s also perfect for anyone interested in learning Docker.





##2) Docker Installation In Windows | 10:44mm
=================================================
00:00 -to- end

Hey Guys: 
In this tutorial, we are gonna see how to install Docker on Windows.
It's pretty simple and state-forward.
Official Docker documentation provides installation guides for various operating systems.
Like linux, windows Mac etc.
We will follow the recommended steps to install Docker on Windows.

Need to know one thing before we proceed.
Docker was two editions:
    Docker Community Edition (CE) – Free and suitable for learning and development.
    Docker Enterprise Edition (EE) – Includes additional features for enterprise use.

Now subscription base. you cna find more details on officeal site.
Let’s go for installation.


First, let's start by downloading the Docker .exe file.

Download is in progress, Let’s check the system requirements to ensure compatibility.
Also we need to verify the hypervisor settings before installation.
If you're using a hypervisor, select that option and uncheck the other one before the installation.

Now, let's start the installation process. 
Follow the on-screen instructions to complete the setup.

Once the installation is done, restart your PC.
After rebooting, You get the Docker app from the Start Menu.

To confirm that Docker is installed correctly, 
open Command Prompt or PowerShell and check the Docker version. 
It will make sure our docker installed perfectlty.

In the next video, we'll cover Docker installation on Linux.

If you have an issue installing docker in your current machine 
like security or office-regulation then don't worry.
There is a way: Play with Docker, It's a web-based platform for practicing Docker.
It will give you free access Linux host with docker and you can practice on it.
every session of three hours.

Stay tuned as we explore Docker’s menu functionalities and how to use them effectively in the upcoming video!


Before we get started, I recommend creating an account on hub.docker.com.
This is where we can find and upload Docker images, including official images provided by Docker.
Now, let's run a simple Hello World container.

First, open the Docker Desktop app.
Since we haven’t run any containers yet, you’ll see that there are no images or containers available.
We can also verify this using the command line—both should be empty.

Next, let's pull the Hello World image from Docker Hub.
To do this, we run the docker pull hello-world command.
This command fetches the image from Docker Hub and downloads it to our local system.

Once the download is complete, we should see the image listed in Docker Desktop.

Now, let's execute the docker run hello-world command to run the container.
If everything is set up correctly, we should see a success message in the terminal.

Finally, let’s check the Containers section in Docker Desktop and verify the running container using PowerShell.

In the next video, we’ll explore more Docker commands and features. 
Stay tuned!





##LinuxInstallation | 8:44 sec
===========================================

"In this video, we’re going to install Docker on a Linux machine.

There are two ways to install Docker on Linux:

Using Docker Desktop
Installing just the Docker Engine (without the desktop interface)
The official documentation provides multiple installation methods for different Linux distributions.
However, the easiest way is to use a simple installation script.
First, we download the script.
Before running it, we can perform a dry run to check for any potential issues.

Once everything looks good, we proceed by running the script to install Docker.
Since installation steps may vary across Linux distributions, 
always refer to the official documentation for details.

After installation is complete, let's verify that Docker is installed by checking its version.
If we encounter any permission issues, we need to grant the necessary permissions to our user.

Next, we check the list of images and containers, at this point, both should be empty.
Now, let’s pull and run a simple Hello World container to confirm that Docker is working correctly.

That’s it for this installation guide!
In the next video, we’ll explore more Docker commands and best practices. Stay tuned!"**


"In this video, we’ll explore Docker’s online platform— Play with Docker.

First, go to the Play with Docker website.
To use this platform, you’ll need a Docker account.
Log in with your Docker credentials to start a three-hour session where you 
can practice running containers online.

Once logged in, let’s create an instance and run a simple Hello World Docker image.
This is perfect for learning and testing Docker commands.
You can even run web applications here with port access.

Now, let’s try running an NGINX web server on this platform.
We’ll map port 8080 on our instance to the default port 80 of NGINX.

Don’t worry too much about the command right now, we’ll cover everything in detail in a later video.
For now, just know that we’re using Docker’s official NGINX image.

You can check the official documentation to learn more about this image and how to run it.

Once the application is running, click on the 8080 port link.
You should see the default NGINX welcome page!

This works just like running Docker on a local machine, 
making it a great environment for learning and experimentation.

In the next video, we’ll dive into Docker’s basic commands and how to use them effectively. 
Stay tuned!"**




##3) Getting Started with Dockers | 30:44 sec
===================================================

1:00mm
=========
HeyGuys:
"In today’s video, we’ll go over some of the most frequently used Docker commands.

You can run these commands using the Docker command line on Windows, Linux, or Mac.
Docker Desktop also provides a visual interface, 
but in real-world professional projects, developers primarily use the command line.

So, it’s best to get comfortable with the command-line mode for better efficiency and flexibility.

Let’s dive in and explore these essential Docker commands!"**



2:00 mm
=====================
"Let's start with our first Docker command: 
=>docker info
This command displays detailed information about the current Docker setup, including:
    The installed Docker version
    System information, such as CPU and memory usage
    Default network drivers
    Docker volumes

Since this is a brand-new installation, we’ll see 0 containers and 0 images listed.

Now, let’s move on to the next command: 
=>docker ps
This command is used to list running containers.
Since we haven't started any containers yet, nothing will be displayed.
We can also check this visually in Docker Desktop, and it should be empty.

Next, let’s pull an image from Docker Hub, we’ll start with the simple Hello World image.
To do this, we run:
docker pull hello-world
Once the image is pulled, we can verify it using the command:
docker image ls
This will display a list of all downloaded images, including hello-world.

You can also check this in Docker Desktop, it should now show the pulled image.
Now lets run it.

That’s it for now! In the next part, we’ll run a container and explore more Docker commands."**

3:40
===========
"Now, let’s run an NGINX container with port mapping on port 8080.

To do this, we use the following command:
=>docker run -p 8080:80 nginx

The docker run command performs two actions at the same time:
Pulls the image from Docker Hub if it's not already downloaded.
Runs the container using that image.
If the NGINX image isn’t already on your system, Docker will first pull it.
Once the download is complete, you can verify that the image is now available by running:
docker image ls
You’ll see the NGINX image listed both in the command line and in Docker Desktop under the Images section.

However, you won’t see anything in the Containers section yet, 
because we haven't actually started the container.

In the next step, we’ll run the container and check its status. Stay tuned!"**



3:05mm
==============
"Now, let’s run the NGINX container and check its status in the command line.
To start the container, we use:
=>docker run -d -p 8080:80 nginx
The -d flag runs the container in detached mode (in the background).
The -p 8080:80 maps port 8080 on our local machine to port 80 inside the container.

Checking the Running Container
To see the running container, use:
=>docker ps

This command displays:
Container ID – A unique identifier for the container
Name – An auto-generated name for the container
Command – The default command used to run the container
Now that the container is running, if we open http://localhost:8080 in a browser, 
we should see the NGINX default home page.

Custom Container Names
By default, Docker assigns random names to containers.
If you want to set a custom name, you can use the --name option:
=>docker run -d -p 8080:80 --name my-ng1 nginx
We’ll go over this in more detail later.

If we run:
=>docker ps
It only shows running containers.
But what if we want to see all containers, including those that have stopped?
docker ps -a
This command lists both running and stopped containers.
From here, we can also remove containers if needed.
We’ll cover container management in detail in the next video.

Stay tuned!"**



8:40mm
=================
Now, let's see how to stop a running container using the command line.
To stop a container, we need its Container ID or Name.
First, list running containers:
docker ps
Copy the Container ID or Name, then stop it with:
docker stop <container_id_or_name>
For example:
docker stop my-nginx
Now, let’s check if the container is still there:
docker ps -a
This lists all containers, including stopped ones.

Removing a Container
To delete a stopped container, use:
docker rm <container_id_or_name>
You don’t need to type the full ID—just a few characters are enough.
Now, check again:
docker ps -a
You’ll see no containers left.
However, the Docker images are still there.

An image is like a class in programming—it's a read-only template.
A container is like an object, a running instance of an image.
You can run multiple containers from the same image.

Now, let’s run a new container from the NGINX image and give it a custom name:
docker run -d -p 8080:80 --name ng-cont1 nginx
-d → Runs the container in detached mode (background).
-p 8080:80 → Maps port 8080 on the host to port 80 in the container.
--name ng-cont1 → Assigns a custom name instead of a random one.
Check the running container:
docker ps
Running Another Container from the Same Image
Now, let’s start another container using the same image:

docker run -d -p 8081:80 --name ng-cont2 nginx

If you try to use a name that already exists, Docker will show an error.
If the port is already in use, you must choose a different one.
If you get an error, you can either:
    Delete the previous container:
    docker rm ng-cont1
    OR Use a different container name, like:
docker run -d -p 8082:80 --name ng-cont3 nginx

Now, both ng-cont2 and ng-cont3 are running.
Check this using docker ps.




16:40
=======================
here is a interesting fact i am going to sared: 

Let’s look at a real-world Problem:
Imagine you need multiple NGINX instances on your machine:so..
Without Docker (Traditional Way)
    You would have to manually copy multiple versions of the NGINX software.
    Keep them in different locations to avoid conflicts.
    Update the nginx.conf files separately for each instance.
    Manage them individually, which is complex and time-consuming.

With Docker (The Magic Solution):
    Using Docker, we skip all that complexity!
You can run multiple NGINX instances with just one simple command: 
What we just did.

docker run -d -p 8080:80 --name nginx1 nginx
docker run -d -p 8081:80 --name nginx2 nginx
    ✔ No need to copy the software multiple times
    ✔ No manual configuration conflicts
    ✔ No dependency issues with the host machine
✔ Easy to start, stop, and manage everything with commands

This is the true power of Docker!

It allows us to run multiple apps efficiently, without worrying about underlying host dependencies.
Now, you can deploy and manage multiple services effortlessly—all with just a few Docker commands.
That’s why Docker is a game changer in software deployment!



17:50
=====================
Docker containers run in an isolated environment, meaning:
✔ Each container works independently and doesn’t affect the others.
✔ Containers are isolated from the host machine as well.

As long as the host machine has Docker Engine running, multiple containers 
(like NGINX or others) can operate without interfering with each other.

In this video, we won’t dive deep into Docker's internal architecture just yet, but don’t worry!
We’ll explore how Docker manages containers in more detail in the Docker In-Depth Section.


Right now, we’ll keep our focus on the basic Docker commands to get you 
comfortable with docker.




18:40
===========================
Docker Exec Command: Interact with Running Containers
The docker exec command allows you to enter a running container and execute operations inside it. 
This is super helpful for tasks like:
✔ Installing packages
✔ Updating files
✔ Modifying configurations (e.g., updating NGINX pages)

How Does It Work?
    To interact with a container, we use the -it flag, which stands for:
    i: Interactive mode
    t: Terminal, so we get a terminal session inside the container

We’re going to change the default NGINX page running on port 8282.

Enter the container using the docker exec command.

We can see the container is running with a minimal Linux distribution, 
so some packages (like vi or nano) might be missing.
We’ll use basic commands like cat and echo to interact with the container.

Enter the running container using the docker exec -it <container_id> bash command.
Inside the container, we’ll run the command cat /etc/os-release to check the Linux distribution it’s running.

Next, we will update the default NGINX homepage (located in the default directory) 
using the echo command (because text editors like vi aren’t available).

Exit the current container running on port 8282, and enter the container running on port 8181.

Check the container ID, and use it to enter the new container with docker exec -it <container_id> bash.
Update the NGINX page by running echo 'Welcome to My Custom NGINX Page' > /usr/share/nginx/html/index.html 
to change the homepage content.
Results:
Once you’ve updated the page, you can verify it by checking the contents of the index.html 
file again with the cat command.
If you refresh your browser, you’ll see the updated NGINX homepage! 🌐


25:50
===============
Now we explore How to Check Container Logs
When a container is running an application, it often produces logs. 
You can easily view these logs using the docker logs command. 
This is useful to monitor the application's behavior or debug issues.

Find the Container ID – First, check the container ID by running the command:
docker ps
Use the Docker Logs Command – Once you have the container ID, you can view the logs with:
docker logs <container_id>

What’s Next?
We’ll explore more about viewing and managing container logs in detail in the container section. 
But for now, just know this basic log-checking command!
Stay tuned for more advanced log monitoring techniques!


26:35
=====================
Lest see docker netowrk now:

docker network ls
This will show you a list of the networks available. 
As we haven’t created any custom networks yet, you’ll see the default ones.

What is a Docker Network?
Docker networks allow containers to communicate with each other. 
Containers that are connected to the same network can easily interact with one another, 
which is essential for multi-container applications.

We will dive deeper into Docker networks in a dedicated section, so don't worry if it’s not clear yet!


28:10
========================
Docker Volumes:
We can view the existing volumes using the following command:
docker volume ls
Since we haven't created any volumes yet, this command won’t show any volumes at the moment.

dockr login/logout To push images to Docker Hub (Docker's cloud registry), you need to log in first:

Prune Unused Images:
You can remove unused images using the following command to clean up your system:

Building Docker Images:
The docker build command is used to create custom images from a Dockerfile. 
We'll cover this in more detail in the Images and Containers section.


Pushing Images to Docker Hub:
To upload an image to Docker Hub, you use the docker push command. Make sure you're logged in first:

In the next video, we'll explore Docker's internal architecture in greater detail, 
including how Docker manages containers, images, networks, and volumes.







##4) Docker in Depth 
====================================
HeyGuys:
"In today’s video, we’ll go over some of the most frequently used Docker commands.



00:00-to-1:50
=========================
In this section we talk about docker internal architecture with:
    Docker Architecture
    Docker Components
    Namespaces
    Control Groups (cGroups)


First of Docker Architecture: docker actually working as client/server mode
we provide docker command using cli, here cli is the client and docker Engine is the server.
When we provide a command using cli docker engind receive this command and execute it return a response what we see in this cli black screen.

Dash board also a client what is show data from inter engind and show it.


1:50-to-3:00
======================
We can use doker client in local also from any remote cli.


3:00-to-3:00
=========================
Now taling about docker componet, there are 4 to 5 componet of docker inter componetn as:
Docker Daemons: Its crea continer manage voluem etc.
Docker Client: pass commad to docker Engin or server.
Docker Image: its a read only file for create contener
Conteiner: a run time container of image. We will ses more datails about docker image and contienr in leter video


Docker-Registry: its a public repository of docker image, its have officeal image, we can also push you custome image to it.

This is my accoutn in docker hub, here i already push some my custome image, you can also push image and shared with other.

For any company its self software or product its cna possible manage a private docker regirstru for internal use only.


So when we install docker in our machine this componetn all install on this time and work all togetehr.


Here i give thsi link or docker hub, you cna explore ti how it looks like and starting using image from here.
its give awesome documentation about all image .

Like we see about mysql official image now thsi way, here how use this image all details description are avialable in this docker.




09:10-to-17:00 
===========================
Now we taling about Namespace and cGroup.

Namespace: this for isolated a contiener and like a process.
Same software or same image we can run multiple time what is not interact with other, 
all contienr run its context.
every process/Conteiner is isolated and run independently, ther process id different.


cGroup: When we run a container cGroup assign its resource like cpu, memory etc. 
How much resoruce a contaiber consume what is define by cGrpup.

I in a host we buget 50% of resoruce for app a and 50% for B, we can define how much what app able to use
this how manage by cGrpup.





17:00 -to - End
===========================
This is overal ide of docker architecure and component how actually docker work.
You dont need to spend so many time here jsut take a highlevel view of docker internal componsents.

When we pass a docker command using cli then docker internal sercer receive thsi command 
and give instruction to docker engin to run this perticular image ad contiaenr,
if the container already not presetn insede docker then docekr pull it form regiistry and then run it.

Next vide we will see Image and contaiener operation, how build image how to run it as contienr etc.
how create and modify custome image and upload it to docker hub.





##5) Docker Image and Containers
======================================

00-3:00
=============
HeyGuys in this tutoruyal we gonna see image and continer operation.

Image: Image its a exuectable file or package including every this you need to run ap perticular application like nginx.

We can download our required image like java, mysql and redis or we cna also create our own image.

Actually Image a template of contiener.
Here you see we crate two java app from a single image and threed redis app form one redis image.
This is how we can create as much as image as we need.

Lets take look on docker pubhlik registry docker-hub...
Here a lot of official and custome image, we cna also upload our own image here we will just after a few moment.

this is how we cna keep oru public image on public registry if we need mantain private registry for a company
we cna also do it and share to other teamp and run it as app.


3:00--
====================
Now see some of frequently uses docker image command.
first:
dokcer image ls
thsi comand show the list of image in you current docker host.

reposity: this is thei image reposity.
Tag: tag actually image version. let me go in docker hub explore a tag form ther.

Check a image, ubuty.
see the show ubutn image tag this is actually  thsi is the release version.


Now check one of my custome image wha i build and release with different version as tag.
In reql-world project thsi is you can mangain app relsaversion as tag


Now we see uses of tag, how to we can run a docker image with specific version or tag.
I am gonn pull a ubuntu image with a specific tag
If some one dosnot mentation any tag then by defautl it pull the latest version form docker hub

Another note: tag latest dosnot mean thsi will be the most latest version of thsi app/os 
the latest tag mamy assign on a specific version what is may not the most recent release or version.


List we run a ubutu image with latest tag but see its run 22.04 but most latesr version is 23.xx
so tag latest dosnot mean then most recent latest version.
You can find the version wiath tag with latest on docker hub image documetnation..

ImageId: its  a auto generate of id , then show create date of ite and then size of image.


10:20
=====================
Now we see base from from image build and how to build a image.

For that we need to know base image, Waht is actually base image, Its a actually prant image of all officeal image and custome image.
I mean all image creagte from a image call base image.


Now we explore on another thing its DockerFile, what is docker file, its a file we define abotu image waht is adn what it do. 
Docker image ia alear architecture what is we can see in this docker file how it build layer by leyer.

Lets explore a docker file of nginx, from docker hub.
Here we see the fitst line of a DockerFile is From: directive what is define what from image we goign to create a new image or app.
This is the prent image of this nginx Image, this is how all image has its a prant image.


Okey we can explore another image like: mysql.
find it and open its dockerfile.
see its docker file first line start with FROM directirve and thsi is the prant image for thsi mysql image.

This is how all image create top of another image for its base iamge.


13:20
=====================
Lets see some of custome exmple fo docker file.
Looks here alos we have to use a from directorve to define its base image.

So are we gonna chose random bae image ? no.
We have to chose current base image for our custome image wiath is relatvely same.
Lise if we need to build a java application then we cholse a jdk image waht specifice version.
If we do thsit then the image come with ready madn java install ation.

onte other hand if we chase ubutnu iamge for java then we have to install jkd and deploy java app.
so we have to chose right base iamge for oru custome image base on its type, requirment or its businesslogic waht actually thsi image gonna do.


14:10
==========================

Now see thsi From Scratch: this is then minimal version thsit for vrsion of a docker image.
Every image build to of thsi image layer by layer.

Let go explore a image file from dockerhub, ok go for myusql image.
Looks its docekr file it buil top of orcls linux image.
so its mean we definitely fond a image wtih thsi name, letst find it.

We get it, oh, its hasr amy tag, what was then tag number in mysql docker let me checkit of it was 8-slim.
so open thsi8- simom image, Loos we found the root of all image what is scratch.





All image build on top of another image, thsi those image build on many another image... and finally the image we 
get what is scratch. 
thsi iamge is the minum unti of all docker image.
and top of this scrath image additional commadn intall package and  finally build second lavel image.
This is how layer by layer a image develop.


If you dont use ready made image like officeal image like nginx you can also build your own image 
as layer by layer.
Here is am example of createing a ngixn from of linxu image as base.
The process as our Traditional hsot wher we fits ready maby a linux host and we inatall package like nginx
same you can take a linux image and install manualli andy server or package like nginx and ready to use it.



This is actually scratch image, you can more datails in its docuemtaton.

In a docker file all line you see its all each one of call a leyer of this image.


23:00-end
===============
Lest see a DockerFile more details.
A docker file is combanigaton Instruction and argumant.

Here you see in my pc screen its the iamge from ubutnu.
Its take a updte then.
then its inatall a package of nginx.
Define its defautl port and finally its run command.

From this docker file we goignn to build our image the command is:
docker build  -t image-name and tag

 
Oke now we see how we cna build a docker image  from a dockerfile in practical
i need a index.html file so i am gonna create it in this same location.

now check my current image, here show cuttent image list in my curetn host.
Oke now this time to build our fitrst image: run thei docker build cmmand.
i paace this screent shot in our document.

Oke our image build donen so check it out usign docker image ls command
and this shwo our newly created image here.


So now this to run oru new build image as contianer.
run done, check the container.
Now w check in our browser.

thst was defautl nginx image, now we gonna run our custome nginx lets see it.
check in browser, its show out custome nginx defautl page.

If we want to see more details of a image we cna use image isnpect command.
Now my image run insude in oru dockr enginx.

so how we can get this image in my machine as a phical file ?
we can save this iamge as .tar file ans share it wit other so lest see it.
for this we hve to use docker save command this way.

So this is out tar file we get ater run dockdr save comamdn.


a contienr create from a image using docer run comand wath we alteady see.
Dockdr run comand do loat of thing, wc can explote this way.

docker pa and dockdr -a shwo docker cuntne contianer.


we cna alsoe a contier details using dokcer inspect.
we have to use using contienr id and we get details information of a contener etc.




=================================================
##6) Storage and Volumes
=================================================
In this tutorial we are talking about docker storage and volume

By default all files created inside a container are stored on a writable container layer.

What is the problem with this by defautl system:
    The data doesn't persist when that container no longer exists. 
    Tightly coupled to the host machine.
    Reduces performance.



3:00
==================
To solve this problem dockr do this two way:
To managing and persisting data in containers. Two way solved this problem: Volume and Bind-mount.
 you cna get details in docker official site documentation.

this is the tow main system of dockder staorage.


Volume: are inside docker and only can by access by docker-contienr only, not host process.


Bind-mount: thsi way a file or directoy manage any weher on host maching and non-dockr process can modify it.


So wehn you container data have to secure and no other has requred thsi you cna use voluem.
Docker also sugest this is a best approaches.

On the other hand if you need to analysis or need access container app generated to process by another other
host porcess like: application log, report date etc.
the main resones if you what to do any ferther operation on container generated data or any other host machine process need to access this
then you have to use bind mounting.
And you achive it use bin-mounting.



tmpfs: this way docker keep data in host machine memory, its most secure and faster way.



9:20mm
============================
Let’s starting basic dockr voluem commadn and start practice with voluem first.


lest start with nginx, how we can use volume with application server lets see an exmple.
Oh, i run it but i mees this port mapping, so its run without any host machine port.


So i am gonna run it again wit port mapping, lets do it.
Oke my application is runnign now, lets modify so this my app, like update the defautl nginx pag.
Ltst do it, so we need exec contienr to go inside it for update its welcome html page.
Oke now i am inside then container.

Inside vi is not available, so i am gonna use here echo command for now.
Lsts update this index.html file.
Updatation done, refresh then browser, and we see our updaton is refalaceted here, and it good.


Now lets say my applicaton/ container some how stope wroing or may cresh it and i need to start it again.
Lets do it.
manually stope the contienr and run it again.
Now see this time show nginx default welcome page we lost our updatation what is just do a few minute ago.
This way contienr keep its data inseide contienr file system, when its delete or crash some how, its data also lost with it.
Actually this is the defautl behavor of docker contienr.


16:00
============================
Lets see how to fixed this data loss isuue with docker volume.

Okey, now first create a volume, fist run docker voluem ls to see current volume list, its have to be no volume cos we are not crate yet.

Now create a voluem, using dokcer volume create command.
do docker volume ls to check it, see here show the volume wht we jsut create.

Oke my docker volume is ready, lets run oru nginx server with this volume.
For thsi we goign to run the command this way:
here -v is need to use for volume, this is the voluem name in left side of the colone: and right side is contienr insided directory.
this way we have to use volume for our nginx server.

Okey if app is runnginx now, lets check the home page form browser.
In docker desktop show the contienr and volume.

Letst Update ageing the this nginx html page agian.
for this we have to do docker exec againg.
we are gonna use updte the index.html page as previouse.
Using echo we update it, check ti use cat command.
lets check it from browser.

asume this our app crash, and we need to run it again.
for thiw we maually stop and delete contener also image.
so there no iamge, and coneteiner show in docker deshtop dashboard.
also check by comand line not contiber here.

But we can found a voluem in here, we remove contienr may its crash byuts self but not volume !
lsts run my applicaton run again with this same voume.
we gonna pull image againe.
and we have to get our previous updated index.html file have to show same again form volume.


lets run another nginx server without voluem, lsts check what happend..
See we doen map voluem wthithis contienr ths why we not get our previsou date.
its run wtih its defautl dta.



27:30
==================================

Lets see now bind mounting, the bind mount command like this.


So waht is actually mean this bind mounting: 
    In this way a file or directory on the host machine is mounted into a container. 
    Sharing data or files from the host machine to containers.


This is the syntax of bind mounting.
Here if show linux and windowns system bothe command.
instead of -v we can also use -mount for more explicitly.

--mount type=volume, source=myvolume, target=/usr/share/nginx/html this is the recommend way and other one -v is short way.


Let try bind mountting in a action, lets create a cotaoner with bind mount.
Before thsit let me clearn our previous container.

For thsit first i am gonna update the html pageagiain. and this file path i am gonna to then bind mount.
and this host machine file/directory well create a vlume to the continer.


oke applicaton run done with bind mount file, we going to refresh browser and i have to get our update file here.
Yes ! we got our expected result.

In this way the key different between volume mounting that we cna update the application file from our host machine
and this update refelacted on docker contener directly like as a shred file.
Lets check it out update it again.

yes we got it. the is how it work actually.


and Another one mounting is tmpfs, this is rearly uses mechanism this is the command you can explore it
for now i leave it as it.
Here is mentation the command for windows and linux systemn both. 



34:30
=============================
We will se docker volume for a most real-worl example, what is with a database mysql volume mounting now.

Now we are run a mysql database with docker volume.
Let me clear provisou contienr.

First we run a myusql contienr without mounting and check what happedn of data.
oke i am going run the command, and we going to insent some data in mysql.
Ok its run now. docker desktop app shows the mysql conteinr.

to insetn some data this mysql database we manually insert some data 
for ths i amd gonna do docker exec for go to insent container.
docker document shwo how to i define mysql serverport and dtabase and defaut user credentails.


Now i am inside out mysql data base contienr, use the databse, create a table and insent some data in it.

Mysql connamd for creating a table i mentaiton this in this documetn.

oke i am insetn some data on this table and with the select query we alsoe retrive it. 


lets datel the contianer like as its crash the database sercer.
Run it server ageing and check the data same preiviso follow the step.
do exec ageing, echeck thsi no data, table of prefisou if the contienr crash or delete the container.



Let do it now with volume and bind boutn with mysql data contienr.
first i go with voluem, so i have to create a voluem name mysql-data.
we chan check it with dockr voluem ls command.

Now run the myusql server with thsi volume. and its run done.
Do insernt crate a table and insetn some data in to it.

use database. 
show tabel, not table now.

get table create command form my doucment and run it.
and iset some data command run int it.

after we get data useing select query.
in thsi case docker voume keep date data from a seprate place from contienr. 
In doeckr desktop shwo it.


do it delete the contienr, and run the contienr agein with mount with the mysql_data volme.
and we should get our previsou data.


let check it our useig docker exec.
I ma going tie check it as same use databse check table and do a select query.
and we get it !
so this is how we can keep contienr data.

Let check and ith bind-mounting way.
so for this pick a host maching directory and do bind moutn it and run the command..
We thsi commadn left side we keep host machin path and riht side will contienr targate path.

run tthe commnad with bidn mounting.
run finish and app is running.
che this howt machine pathe we should get the mysql directoy in this path, yes we get it here.

same here, do exec, inset dome data insetn it.
agine delete thsi contienr and run it ageing to check our previosu inserted data.

yes, we get our data ! that great.

This is how we can use docker volume to persiste container data after it delete or destry the contienr 
and run again with previosu data.

i taking a screehshot and leave it on docuemt for you guys.





=================================================
##7) Networking and Security
=================================================
Waht is docker networking and  why need this, actually docker network provide communication between containers.
Specially multi tier applicaton where one server need to communticaton wtih other service like
app server mantation communitcaton with database server.
Also for security perpose.

Lets see a three tier applicaton, here app server talik with formaten and databse sercr throw networking.
Herw typically fronend app deploy in a public network onthe other hand app server deploy in a secure network
alose database deploy another network with restrice secureity only may accable for app servr.
this is look like a three tier applicaton  and Docker network give this mechanism to mantaine differetn tier 
for differetnt access authorize.


Now see some basic netowrk command:
We alreadhy see some contienr wth is was docker by defaylt netwrok.

Lets see what is default detwork with docker network ls, here shwo then defautl detwork.
When we run a contienr its by defaytl run with a bridge newroik if we dont specility mentaiton any newrok.


to see it lets explore a contienr with docker inspect.


9:30:
=================
Lets create out first docker network.
If we dont mentaton any driver for the network then it will creaed with bridge nework.

Waht is actually network derive , lets explore it in details for this image.


frst see bridge nework:
To see the detwork details we have to inspect the netork what we creareed just now.
When we create a nework its taken an subnet seris ip, we can alsoe mentation a cutome submit.
and every contienr wtih thsi network and get a uniquer ip from this subnet.


hsot driver crate conniecotn with curnet host machine.
none dosnto make any conecton of its how or any orher netork, here contienr get run isolated way.




14:30
===================
lets contienr ip form its inside.
With help of docker exec command we see the contienr ip.
ths coniner this ip, and thist contiern get this ip we see by docker exec.
and this bothe as in a same netwrok so then can communicate each other.


Ok, lets create another nwtwork, run some conierh with this new work.
to run a container aor service with nwtrok we have to pass this network with docker run command.
oke run done, now we gonna check its nwtork.


Lets run another contienr whti this nework waht is called mybackend app.
So now my backend app and mydatabse app now running with in same netwrok.


20:00
==============
Lts update this databse and app container to see the wht is what contener.
Lets do some curl commadn this check the connections.
As then running diffetne network so the not make communicaton each other.


ok lets delete our backend contier, and run it with same newrork as then same network of mysql server.
this way our backedn conter and mydatabse server can be conninication each other.
oke our new backend server run done wth same network with dtabse server.

now check this conneciton to reach each other.
get it ! yes we can now make ntwork.
this is how actually bridge network to make connunication contienr.


Host newrork donsnot use so much.

29:00
============================
Lets see the overlay network, is main perpose for working with cluster of servers like docer Swarm.
In a cluster where mulitple node withkign with in a network for HighAvailable for a signle applicaotn.
here a single run mutiple copy in different node, here mantain communtioct user overlay newrork.
thsi is hwo work overlay network.

Bridge network ok for single host machinge and overlay for culater newroking.



32:30:
=====================
Lets see how to create a ntwrok with custome subnet now.
Previoursly we crate ntwerok wtih out mentation andy subnet wher docker provide subnet ip seri.
Now we provide our custome subnet ip serise of the network.


this is how we define our custome subnet serise with gateway.
lets create it and inspect the newrok to see then details or thsi network.


Now if we run a conter wtih this nework it will get a ip address for our custome submint ip.
lets run it and check thsi conteinr ip.
yest we get as expected resutl with our custome submtiu ip in our conteinr.







=================================================
##8) Simple Example Project
=================================================

This is well be handon tutorial where we going to roun bunch or project using docker.
and Here is the project source gitHub link, you cna get the source code from here also ths docuemn.
What is i use on this tutorial for help.
You cna make a git colne or may download directly.


So let see how we cna dow git clone and directly zip download.


1:30
==============
In very frisrt we now going to run a php projectr using docker.
Lets see how we cna do it.

In thsi project drectory there is a only one file index.php to macke it simple.
Just like a HelloWorld project.

Lets see the docker file how it looks like:
Here jsut a from tag for get php runtime enviroment, then a copy comand wht is copy file from this location to a docker directory
and Finay expose a port.

4:10
=====================
Now we goitng to build our php project image with the command docker build image.
Now we run this image with docker run comand, lets Runn the command.

Go to browser and check 8080 port.
Yes we get it ! we get our expected resutl.

In this case here only a single file and defanntly your project comw with many file, dont same projectss.


7:40
==========================
We know that a multip tier like Three tier applicaotn run frontend backend and databse differently.

So we going to run same a three tier application, with frontend, badk end and databse.
and All together will run entier application. 

In this case frontend have to communticaton with backend and backeend havd both with database and fronend also.
So we need a netwrok to resolve tis issue.

First check the what network we already have.

Befor we goitn to create our application I have need clear a issue with defautl netwrok.
the issue defautl bridege nework dosnot come with internal dns resolver, until is create a custome one.

Lets check it our in protically to run tow contienr.
Here we can do make communitcation using ip address but not by contienr name, what is need intenral dns resolver.


When we create a custome network it come with docker internal dns resolver.
and this way we cna use contaienr anem as dns to communticton instead of ip address.


Then we call other serive by its name like this instead of IP address.

yes on the document say this that defautl and usier-define network difference.




19:20
=====================
So we start with create a user-define netwrok with custome subnet, lets run a create command.
Run it
Take a screenshot and add it in the docuemtn.
Run done, so now for testing perpose I amd going to run againt two nginx contienr we this ntwerok.
My new conteinr  is ng3 and ng4.

Lets instpect then ntwork to chck the current status.
so oru ng3 and ng4 contienr runnign with this newtork.


so lets echk the is it possible to make communtit contienr to contienr using dns.
First lets check using ip againg and then dns.
Now usign dns, and yes grate ! we get it we can able to conenction with dns.


So wha we get here, for dns resoluation we have to use user-define network not defautl one.


We go to out three tier application, befor the we ging to clean and remove oru current all docker contienr.


Lwts echk what oru three tier applicaotn will looks like, here good show one.




26:10
=====================
First we goiny to run our database server as a container as:
This is then comand you cna copy it from thsi docuemtn and run it.
You cna also chedk the docker hub mysql image ducument ehat is infor need to run this mysql image as a server.


mysql service run done !
Do mysql contienr exec and run mysql command with user credentials.

Chek database, use one, her we use simpledatabase.

then create a table, here is table creation mysql command, and run it.
So now our mysql database server ready to use !




30:10
==========================
Now we goitn to run a python project with this database.
So check then sourc code of python file.

Nothenr fency hee we create database connection in this connecotn we pass hostname with enviornment.

we just going run a simple select query to keep it simple.

Lets ceck thsi Dockerfile now,

Fistr as ausual a from tage for python.
crate a directory to get a copy of source and keep it in thsi directory indise of a contienr.
and Expose the port.
Finally execut python run commnd.



36:20
==================
Lets build a image ro python applicaton wth docker build command.
Run doen ! check this image with image ls command age we get it !
Now the Image is ready.

To run it wiht mysql database the comamn is as:
here this is contienr naem this is network name, port mapping, and mysql server information here and finally image name.
Run it, run done lets check it on browser 8080 port.

Yes ! we get it ! we get the data from mysqlserver.
lets leave a screenshot from here to doucment.


40:10
===========================
Now we gong work king with a java applicaotn. I am gonna use a java spring boot project.

for run a java applicatoon we have to first compali and build a jar file first, here i am usring maven.
This is my appliaotn .pom file.
now i amd run the jar build command.
yes the build pross is success.
So the location of har is here showing, and my applicaotn ready to run.


Lets now create a dokcerfile for this java applicaton.
Same we crate befor python image i am doing same here.

See thsi commadn:
    from a jdk
    create a directory 
    copy file and exppsoe the port.
    then finally run it.

Hwre we see how to maek database credentails. i have to go thsi way for docker contienr perpose.


lets run thei build comand. and tis done.
Check thed image.
Now run this java applicaton with this ntwrok and mysql server as:
run it.
Oh! we get port conflicts with pthon app. lets stop sna delete previour ptyhon app.
and run tis ageitn, run done, taking a screenshot and add it on document.



lets eheck the application on browser 8080 port. 
and yest we get it! data from mysql server.


here another this conteinr logges, how we can check contienr logs.
usti contienr lgos, 
we can also see live log using -f.

ok now our mysqldatabse and backeend applicaothn is ready now.
For frontend ther we gojtn to run a Node applicaton.



53:30
=====================
Lets run a nodeja applicaton as a fronend app.

lets echk the appliaton source code.
Nother faccy here here we provie oru backne url and make a http reqeust and get resposne.
then we map this respons data wtih a html file.


Lets build a image, ok check the dockerfile first.

same as befor: a form tag, copy file, 
We use diffetne commadn in diffente docker file.


Lwts run image build command.
taking a screenshot and keep it in the document.

In this soruce code the app will run on 3000 port.


Now time to run the fronedn applicaton wtih backend server.
ok run done !

now check it on the browder 3000 port.

we can now flow teh three step for three tier application.
here data base is mysql, middletier is java app and node app is a fron end.

yes we get oru data in browser wth beautiful way.


Now lets add some data on the database manually.

Refresh the frowser and we get new addes data !















9) Docker Compose
============================================






10) Container Orchestration















