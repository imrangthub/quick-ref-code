#################################################
#                 LINUX-OS                      #
#################################################
=>hostname -I/f 
=>printenv

=>cat /proc/version
=>cat /etc/*-release
=>lscpu | egrep 'Model name|Socket|Thread|NUMA|CPU\(s\)'
=>lscpu | egrep 'Model name|CPU MHz|Thread|CPU\(s\)'
Kernel Version

=> ./startup.sh 
=>shutdown / -h now / +10

=>netstat -tulpn
=>netstat -an | grep 80

=>curl -v telnet://172.16.191.16:3000
=>su - root
=>sudo apt update && sudo apt upgrade
=>uptime
=>du -sh fileNameForShoSize
=================================================
#                  Basic                                          
================================================= 
=>ps -eaf
=>ps -ef
=>ps -ef | grep sys-log
=>ps -ef |grep nginx
Find runing process

=>uname -a
=>which ifconfig
Where from run this ifconfig

=>tty
Terminal type
sudo apt autoremove
sudo apt autoclean
=>sudo nano /etc/sudoers

=>free -g
=>df -H
=>sudo lshw -class memory
Ram Details

>lsblk -d
=>lshw -class disk -short
Hard disk size

=>apt list
Show list of package


=>more /someFile
=>less /someFile
=>head -n 5 /someFile
=>tail -n 5 /someFile
Show taxt file with number of line and end/start

=================================================
#    Find | search    |    look up      
================================================= 
=>which java
=>ls *someFolder*

=>find /mydir/otherdir -name '*somePartOfFileName*'
=>find /app/myDir -type d -name 'someDir' 
=>find /app/apihub -type f -iname '*runner*.sh'

Wild card Search

=>sudo grep -rnw -e 'myFileName'
=>grep -rnw '/etc/nginx/conf.d' -e '9940'
FindKeywordInFiles:



=>grep fWord myTextFile.txt
=>grep 'Please find my sentence' myTextFile.txt
Search word in text file


=>cat RELEASE-NOTES | grep "Apache Tomcat Version"
Tomcat version check
=>sudo find / -name "version.sh"
If you are not sure where is the version.sh file
then
=>/app/archive/artifactory-oss-6.12.0/tomcat/bin/version.sh
systemctl status nginx



=================================================
# System  |  CTL                         
================================================= 
=>init 3 // Text mode
=>startx 
=>init 0 shatdown
=>init 6 or =>reboot
=>who 
Current log in user


=>history 
Show uses caommand from start to at now

=>history -c
Clear command history


=>dpkg --list
Currently installed programs

=>sudo apt-get remove packagName
=>sudo apt-get --purge remove packagName
=>sudo aptitude remove packagName
Uninstalling Programs with Terminal

=>sudo apt-get dist-upgrade

=>sudo apt-get autoremove

=>sudo systemctl daemon-reload 
Reload the systemd daemon service to load newly create files.

=>sudo apt update
Syncs your local copy of available packages and their versions against the current-state index with the repositories

=>sudo updatedb


=================================================
#   CRON | crontab                                     
================================================= 
crontab -e
CreateACronEverySec:
*/1 * * * * echo 'This is from Cron Job v2.......'>> /home/imran/imranMadbar/myPROJECT/linuxScript/cronLog.txt

Check if cron package is installed:
=>dpkg -l cron 
=>apt-get install cron
=>systemctl status cron

crontab -l : List the all your cron jobs.
crontab -r : Delete the current cron jobs.


Syntax:
* * * * * /path/to/command arg1 arg2
OR
* * * * * /root/backup.sh


=>less /etc/crontab
Show all cron systex

=================================================
#    File or Directory  | Operation    | Copy                                     
================================================= 
=>nano simpleFile.txt
=>scp simpleFile.txt remoateUser@remoteHost:/app/remoteMachin/filePath/
Copy file to remote server

=>scp remoateUser@remoteHost:/app/remoteMachin/filePath/someFile.txt /localMachin/filePath
Copy file from remote server


=>mv simpleFileV3.txt mySimpleFolder/
Move file to folder

=>rm -r  file/
=>rm -f file
Delete file


=>scp -r /home/imran/localMachineFolder remoateUser@remoteHost:/app/remoteMachineFolder/path
Copying Directories local machine to remote machine

=>scp  -r remoateUser@remoteHost:/app/mySimpleFolder /home/imran/localhMachinePath
Copying directories from remote machine to local machine


=>ls -a
Show hiddne file 
=>ls -R
Show all file and folder inside of folder


=>cp fileName /copyFolder/
Copy file

=>cp -rf targetFolder /folderPath/
Copy folder

=>cp -rf /etc/tomcat/* /otherFolder/
Copy all contain

=>mv oldFileName newFileName
Rename file

=>mv myFolder /locationFolder/
Move file 

=>rm -rf /mhFolder/*
Delete every thing in mhFolder


=>rmdir directory
Delete folder


=>cp * /destination/directory/
Copy all file to another folder



=>scp localmachine/path_to_the_file username@server_ip:/path_to_remote_directory

=>scp -r /app/test/test.txt apihub@172.16.254.25:/app
=>scp -r cassandra.yaml C:
=>scp -r apihub@172.16.8.132:standalone.xml "C:"
=>docker cp e029d15afdfc:/etc/cassandra/cassandra.yaml C:/Z_MY_COMPUTER
=>docker cp C:/Z_MY_COMPUTER/cassandra.yaml a394ae84224c:/etc/cassandra


=>cd /etc/skel/
=>touch sharedFile
Sharing file for all user


#TAR |  ZIP
-------------------------------------------
=>tar -cvf myTarFile.tar *
Make tar file with all contain in current folder
=>tar -cvf myTarFile targetFolder/
Make Tar
=>tar -tvf myTarFile
=>tar -xvf myTarFile
UnTar
=>tar -rf myTarFile newFile
=>tar -xvf myTarFile reqFile
Add/emit a file to exists tar


=>gzip myFolder
=>sudo unzip -d /opt/gradle gradle-5.6.1-bin.zip 
Zip/Unzip file




=================================================
# User | Group                                      
================================================= 

=>usermod -aG sudo imran
Add a user on sudo group

=>useradd imran
=>groupadd empGroup
=>chown imran:empGroup fileName
In Root mode, assign a file permission


#User
---------------------------------------------------------------------------------------

=>compgen -u
=>cat /etc/passwd
=>cut -d: -f1 /etc/passwd
=>getent passwd | grep imran
Check user list


=>id -g -n imran
=>id -G -n imran
To print the primary/secondary group membership for a user


=>adduser imran |  and other information
=>sudo passwd imran
Add /del user

=>userdel imran


=>su newUseraName
Switch user

=>grep -Po '^sudo.+:\K.*$' /etc/group
See number of super users in the available system: 

=>newgrp docker

Run the following command/ Login or logout: 


#Group
-----------------------------------------------

=>compgen -g
=>cat /etc/group
List of group

=>getent group groupname
List fo group membership


=>groupadd empGroup


=>sudo adduser $USER docker
=>usermod -G empGroup imranUser
=>usermod -G empGroup, otherGroup imranUser
=>newgrp docker
Add user in a group

=>gpasswd -d imranUser empGroup
Remove user from a group

=>groupmod -n newGroupName oldGroupName
Rename group

=>groupdel empGroup
Delete group


=>whoami
=>id -un

=>id -gn

=>id -Gn
=>groups

=>compgen -g
=>getent group
List all group names on Linux:




=================================================
# cGroup                               
================================================= 

=>cd /sys/fs/cgroup


Emmp1
=====
=>sudo cgcreate- -g memory:cg1
Create a memory cgroup

=>echo 100000 | dudo tee /sys/fs/cgroup/memory/cg1/memory.limit_in_bytes
Assign memory to cGroup

=>sudo cgexec -g memory:cg1 ./myProcess.sh
Run process under cGroup


Exmp2
=====

=>cgcreate -g cpuset:cpusetA

=>cgset -f cpuset.cpus=0 cpusetA
=>cgset -f cpuset.mems-0 cpusetA

=>cgget -r cupset.cpus -r cpuset.mems cpusetA
=>cgexec -g cpuset:cpusetA dd if=/dev/zero of=/dev/null &






=================================================
# Monitoring | CUP  | memory | storage                               
================================================= 

=>top

#Memory
-------------------------------------------------
=>df
=>free -m
=>df -kh .
=>df -T -h /myDir/

=>cat /proc/meminfo
=>grep MemTotal /proc/meminfo
Ram size check

=>dmesg | grep blocks
=>sudo fdisk -l | grep Disk
=>sudo fdisk -l | grep "^Disk /" | gawk '{print $3,$4}'
Total disk Size

#Cpu
-------------------------------------------------
=>lscpu

=>lscpu
=>lscpu | egrep 'Model name|Socket|Thread|NUMA|CPU\(s\)'
=>cat /proc/cpuinfo
=> grep 'cpu cores' /proc/cpuinfo | uniq



=================================================
#SH | sh | shall script| cmd                                  
================================================= 
=>nohup sh my-syslog.sh &
=>nohup sh my-syslog.sh > sys-log.txt &


Exmp1
=====
while true
do
        echo "System is runing $(date) !"
        sleep 1
done



Exmp2
=====
while true
do
        echo "System is runing !    Date: $(date)     User: $USER" 
        sleep 1
done


=================================================
#apache2                               
================================================= 

=>sudo apt install apache2

=>sudo systemctl start apache2.service
=>sudo systemctl status apache2

=>sudo systemctl stop apache2.service
=>sudo systemctl restart apache2.service
=>sudo systemctl reload apache2.service



=>sudo ufw app list
=>sudo ufw allow 'Apache'
=>sudo ufw status




Change port 
=>/etc/apache2/ports.conf
 


=================================================
# Security | Permissions  | access                                
================================================= 

=>tail -f /var/log/auth.log
Show login information

=>chmod go=- two-simple.txt
=>chmod ugo=- *
Remoce all permission from group and other


=>chmod u=rwx perm_test


=>chmod u/g/o +/- file/folder
Permissions Syntax

=>chmod u+w myFileName
=>chmod u+w,g+r,o+r myFileName
=>chmod 777 myFileName
Add file permission


=>chown imranUser myFolder
=>chmod .empGroup myFolder
=>chmod imranUser.empGroup myFolder

=>chown imranUser:empGroup myFolder
Add Owner permission


=>sudo su
Log in as root

=>sudo passwd root
For Change password

=>runlevel
Show current runlevel id

=>su - imran
Change system user


=>sudo chown userName:groudName fileName
Change Owner/Group of a File

=>sudo chown -R userName:groudName /path/to/directory/*
Change Owner/Group of All Files/Directories


=>sudo chmod a+rwx /szDirectoryName
=>sudo chmod -R 700 folder3



Id From 0 to 499 System generated and Other user generated


chmod a-w file (removes all writing permissions)
chmod o+x file (sets execute permissions for other (public permissions))
chmod u=rx file        (Give the owner rx permissions, not w)
chmod go-rwx file      (Deny rwx permission for group, others)
chmod g+w file         (Give write permission to the group)
chmod a+x file1 file2  (Give execute permission to everybody)
chmod g+rx,o+x file    (OK to combine like this with a comma)

u = user that owns the file
g = group that owns the file
o = other (everyone else)
a = all (everybody)

r = read aces to the file
w = write access
x = execute (run) access


#root
------------------------------------------------------------------------------------------
=>sudo -i
=>passwd
Set root password


=================================================
#Networking | Net                                           
================================================= 

=>ip a
=>ip addr show
=>ifconfig

=>hostname -i 

=>nmcli con up id ethernet-eno1
Reload network card


=>host google.combine

=>netstat -tulpn
=>netstat -an | grep 80

=>sudo route
=>suod route add default gw 192.168.1.1
=>suod route del default gw 192.168.1.1

=>sudo apt-get install traceroute
=>traceroute google.com

 
=>sudo apt install net-tools

=>ip route add default via 10.21.29.11
Set default getway

=>ip route show
Show default getway 



=>systemctl status NetworkManger
Check net manager status

=>cd /etc/NetworkManger/system-connections
System net conn list


#SSH
------------------------------------------------

=>echo $SHELL 
Show alll shele list
=>sudo apt install openssh-server



=>ssh imran@192.168.1.514

=>mv pappjar pappjar_23032022
=>scp papp.jar imran@192.168.1.514:/home/imran


=>scp -r /home/imran/blPROJECT/deploymentProcess  imran@192.168.1.514:/home/imran/mySimpleFolder
Copying Directories to remote machine

=>scp  -r imran@192.168.1.514:/home/imran/mySimpleFolder /home/imran/blPROJECT/deploymentProcess
Copying directories from remote machine to local machine




#Namespace
-------------------------------------------------
=>ip netns
=>ls /var/run/netns
List of namespace

=>ip netns add nameOfNamespace


=>ip netns add net1
Add name space

=>ip netns exec net1 ip link
=>ip netns exec net1 ip addr

=>ip netns exec net1 ip link set dev lo update


=================================================
#    Storage |   
================================================= 
=>fdisk -l
list of disk in system

=>fdisk /dev/deviceNameDB
create partition new volum drive

=>mkfs -t xfs /dev/xvdbl/deviceName
Formate disk device


=>mount /dev/xvdbl/deviceName /data/myTargetDrive
Formated storage mounting

=================================================
#Service | systemd | Process                                    
=================================================



#Process
-------------------------------------------------

=>ps
=>ps aux
show all current proecess in the system

=>ps -f -U username
Show process run by user




#service
-------------------------------------------------
=>nano /etc/systemd/system/my_simple_service.service
Create a services with below script

=>sudo  systemctl daemon-reload
=>sudo systemctl start my_simple_service.service
=>sudo systemctl status my_simple_service.service
=>sudo systemctl stop my_simple_service.service

=>sudo systemctl enable my_simple_service.service
=>sudo systemctl disable my_simple_service.service
To enable/disable your service on every reboot

=>sudo systemctl enable simple-system-monitor-service.service 
=>cd /etc/systemd/system/multi-user.target.wants
=>sudo systemctl disable simple-system-monitor-service.service 



SimpleSerEx1
============
[Unit]
Description=My Simple Custome Service

[Service]
Type=simple
ExecStart=/bin/sh -c  'echo "Lgo written By SimpleService" >> /var/log/my_simple_service.log 2>&1'

[Install]
WantedBy=multi-user.target


Example2
=========
BashScript:
while true
do
        echo "System is runing !" >>/home/imran/imranMadbar/myPROJECT/linuxScript/service-log.txt
        date >> /home/imran/imranMadbar/myPROJECT/linuxScript/service-log.txt
        sleep 1
done


=>sudo chmod +x simple-system-monitor.sh

Simple system monitor service:
[Unit]
Description=MySimpleShellScript

[Service]
ExecStart=/home/imran/imranMadbar/myPROJECT/linuxScript/simple-system-monitor.sh

[Install]
WantedBy=multi-user.target




#Signal
-------------------------------------------------

=man 7 signal

=>dd if=/dev/zero of=/dev/null &
Start a process

=>top 
then ->k
To sent signal sent process


Process signal
9=kill, 15=terminated

=>kill
=>killall dd





=================================================
#Ufw Firewall                  
================================================= 

=>sudo ufw status
=>sudo ufw disable

=>vim /etc/default/ufw 

=>sudo ufw reset
Reset current rule



=>sudo apt install ufw
=>sudo ufw status
Check the allow app list
=>sudo ufw allow ssh

=>sudo ufw delete allow ssh
=>sudo ufw delete allow 22/tcp


=>sudo ufw status numbered
 

=================================================
#Software|repositories|packages|install|Tools                  
================================================= 


=>sudo apt install synaptic 
=>sudo apt-get install vlc

=>sudo apt show
=>sudo apt search "web browser"
=>sudo apt install chromium-browser
Finding and Installing New Software


Install  Net tools
=>sudo apt install net-tools


=================================================
#   PYTHON | PY  | py
=================================================  
=>sudo python3 -m pip install paramiko

=================================================
#    Jar Operation       | java  | JAVA
================================================= 
=>which java
=>dirname $(dirname $(readlink -f $(which javac)))
=>java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home' 
=>update-alternatives --config java
=>sudo update-alternatives --config java
Check all java version on this mechine

=>java -jar -Dserver.port=8083 simpleJar.jar
=>java -jar -Dspring.profiles.active=dev-bl spring-service-with-profile.jar
=>java -jar -Dspring.profiles.active=dev-bl service-with-port.jar --server.port=8083

find out which process is listing upon a port
=>netstat -tulpn
=>netstat -tulpn | grep :9940


=>nohup java -jar spring-boot-simple-web-1.0.0.RELEASE.jar > myLogFile.txt &

=>nohup /app/somedir/jdk1.8.0_231/bin/java -jar some-app.jar --spring.profiles.include=pre-prod --server.port=8080



#Install JAVA 
------------------------------------------------------------------------------------------

=>sudo mkdir  -p /opt/jdk
=>sudo cp -rf /home/sivasai/jdk-8u251-linux-x64.tar.gz /opt/jdk/
=>cd /opt/jdk/
=>sudo tar -zxf jdk-8u251-linux-x64.tar.gz
=>sudo update-alternatives --install /usr/bin/java java /opt/jdk/jdk1.8.0_333/bin/java 100
=>sudo update-alternatives --install /usr/bin/java java /opt/jdk/amazon-corretto-11.0.15.9.1-linux-x64/bin/java 100

=>sudo  nano /etc/environment
JAVA_HOME=/opt/jdk/jdk1.8.0_333
JRE_HOME=/opt/jdk/jdk1.8.0_333/jre

=>java -version
=>sudo update-alternatives --display java
=>sudo  update-alternatives --list java
=>sudo update-alternatives --config java

=>sudo update-alternatives --remove java /opt/jdk/jdk1.8.0_333/bin/java


=>nano ~/.bashrc
export JAVA_HOME="/opt/jdk/jdk1.8.0_333/"
export PATH=$PATH:$JAVA_HOME/bin

save the file

=>source ~/.bashrc
=>echo $JAVA_HOME



=================================================
# MySQL                  
================================================= 
=>sudo mysql -u root -p -e 'SHOW VARIABLES LIKE "%version%";'
=>sudo mysqladmin -u root -p version
=>SELECT version();


=>service mysql start
=>systemctl status mysql
=>service mysql stop



#InstallMySql
--------------------------------------------------------------------------------------------------
=>sudo apt install mysql-server
=>sudo mysql_secure_installation
Security configuration



=>sudo apt install ./mysql-workbench-community_8.0.20-1ubuntu20.04_amd64.deb
=>snap install mysql-workbench-community
=>sudo snap connect mysql-workbench-community:password-manager-service :password-manager-service


mysql>update mysql.user set plugin = 'mysql_native_password' where User='root';
mysql>FLUSH PRIVILEGES;
mysql>exit;
Access denied for user 'root'@'localhost'


=================================================
#Font | Text                  
================================================= 
=>cd /usr/share/fonts/
=>sudo apt-get install fontconfig


=>fc-list
=>fc-list : family | sort | uniq

=>fc-list | grep "DejaVu Sans"
=>sudo find / -type f -name "*.ttf"




=================================================
# Media |  Audio                  
================================================= 
 =>suod apt install sox
 => sudo apt-get install libsox-fmt-mp3
 =>sudo apt-get install sox libsox-fmt-all



=================================================
#Linux | Info | Desc | documentation                            
=================================================

#APT
--------------------------------------------------
APT is the default package-management framework for Ubuntu and several other popular distributions.

=>apt-get upgrade 
Updates the package but does not, by default, delete other packages or add new ones. 
Instead, the upgrade will fail if it requires added or deleted dependencies.
=>apt-get dist-upgrade
Updates and deletes prior versions of the package, including dependencies.
apt upgrade: 
Functions like apt-get upgrade --with-new-packages, which is a fancy way of saying that it updates, 
but does not delete prior versions, yet it does install new packages (but won't delete them) if doing so is required to satisfy dependencies.




#Tidying Up Packages
-------------------------------------------------
apt reinstall: Reinstalls the package from the repository source, useful if you think you've broken a program that you like.
apt remove: Removes a package, but leaves user-configured files in place.
apt purge: Removes a package and also all associated files related to it, including user configuration files.
apt autoremove: Deletes packages that had been installed as dependencies but, given that they're obsolete or the other package was removed, are now orphaned. Running this command occasionally can recover some disk space.



Linux software is available from repositories—servers that hold software that can be installed for a particular distribution. 
A repository is stored on one or more servers known as mirrors. Each item of software within a repository is called a package. 
There are many package formats, but Ubuntu uses the Debian package format. 
You'll find most of the things you need in the default repositories, but you can add and enable some extra repositories to acquire additional software.


Using graphical packages such as Ubuntu Software and Synaptic aren't the only ways to install software using Ubuntu.
You also can install packages from the command line using apt-get. 
While the command line may seem daunting, you will come to appreciate the power of apt-get after using it for a bit.


Some packages require specific other packages as well as their own; others require that some packages be removed before they'll work. 

The files for installing software is usually called a package and packages come in many different flavors. 
Ubuntu packages end in .DEB.



#Common File Permissions
----------------------------------------------------------------------------

Setting			Numerical			Owner						Group						Others
-rw——-			600				Read/Write	 	 
-rw-r—–				640				Read/Write				Read	 
-rw-r–r–				44				Read/Write				Read						Read
-rw-rw-r–			664				Read/Write				Read/Write				Read
-rwx——			700				Read/Write/Execute	 	 
-rwxr-xr-x			755				Read/Write/Execute	Read/Execute			Read/Execute
-rwx–x–x			711				Read/Write/Execute	Execute					Execute
-rw-rw-rw-			666				Read/Write				Read/Write				Read/Write
-rwxrwxrwx		777				Read/Write/Execute	Read/Write/Execute	Read/Write/Execute



#Linux Main directories about
----------------------------------------------------------------------------


/bin  is a place for most commonly used terminal commands, like ls, mount, rm, etc.

/boot contains files needed to start up the system, including the Linux kernel, a RAM disk image and bootloader configuration files.

/dev contains all device files, which are not regular files but instead refer to various hardware devices on the system, including hard drives.

/etc contains system-global configuration files, which affect the system's behavior for all users.

/home home sweet home, this is the place for users' home directories.

/lib contains very important dynamic libraries and kernel modules

/media is intended as a mount point for external devices, such as hard drives or removable media (floppies, CDs, DVDs).

/mnt is also a place for mount points, but dedicated specifically to "temporarily mounted" devices, such as network filesystems.

/opt can be used to store additional software for your system, which is not handled by the package manager.

/proc is a virtual filesystem that provides a mechanism for kernel to send information to processes.

/root is the superuser's home directory, not in /home/ to allow for booting the system even if /home/ is not available.

/run is a tmpfs (temporary file system) available early in the boot process where ephemeral run-time data is stored. Files under this directory are removed or truncated at the beginning of the boot process.
(It deprecates various legacy locations such as /var/run, /var/lock, /lib/init/rw in otherwise non-ephemeral directory trees as well as /dev/.* and /dev/shm  which are not device files.)

/sbin contains important administrative commands that should generally only be employed by the superuser.

/srv can contain data directories of services such as HTTP (/srv/www/) or FTP.

/sys is a virtual filesystem that can be accessed to set or obtain information about the kernel's view of the system.

/tmp is a place for temporary files used by applications.

/usr contains the majority of user utilities and applications, and partly replicates the root directory structure, containing for instance, among others, /usr/bin/ and /usr/lib.

/var is dedicated to variable data, such as logs, databases, websites, and temporary spool (e-mail etc.) files that persist from one boot to the next. A notable directory it contains is /var/log where system log files are kept.
