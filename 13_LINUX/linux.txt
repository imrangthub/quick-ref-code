#################################################
#                 LINUX                        #
#################################################

=>alias d='docker'
=>uptime
=>printenv
=>hostname -I/f 
=>cat /proc/version
=>uname
=>cat /etc/*-release
=>lscpu | egrep 'Model name|CPU MHz|Thread|CPU\(s\)'

=>su - root
=>sudo su jenkins
=>sudo su -s /bin/bash jenkins

=>netstat -tulpn
=>netstat -an | grep 80
=>curl -v telnet://172.16.191.16:3000
=>nc -vz <IP_ADDRESS> <PORT>

=>ss -nltp | grep 8001
Port lisaning info

=>sudo lsof -i :8181
sudo kill -9 PID
prodess kill by port

=>sudo apt update && sudo apt upgrade -y
=>sudo apt autoremove && sudo apt autoclean -y


=> ./startup.sh 
=>ls -lrth
=>du -hs fileNameForShoSize
=>du -sh *
=>sudo du -sh .
=>df -h .

=>echo $SHELL
=>cat /etc/shells
=>sudo nano /etc/sudoers

=>k describe deploy -A | grep -a20 -i image

=>tar -xvf pkgName.txz

=>systemctl list-unit-files | grep enabled
=>shutdown / -h now / +10

=>sudo apt install gnome-control-center

=>apt install dnsutils
=>apt-get install dnsutils -y

=>sudo apt install flameshot
For screen short
=================================================
#                  Basic                                          
================================================= 

=>hostname -I | awk '{print $2}'
Print host base ip

=>hostnaem mynodemachine
Change node name

=>id 
Print user name and group and sube-group

=>id userName
=>chage -l imran

=>cat /etc/passwd
=>cat /etc/group
DB of user and group

=>getent group sudo
Check group Member

=>cp /etc/passwd .
=>awk -F':' '{print $1}' passwd 
Get first column

=>tty
=>uname -a
=>which poweroff
Where from run this command

=>apt-get update && apt-get install procps -y 
Install ps

=>apt list
Show list of package
=>ps -eaf
=>ps -ef | grep nginx
Find runing process


=>sudo fdisk -l
All hard device for storage
=>free -g
=>df -H
=>sudo lshw -class memory
=>lshw -class disk -short
Ram Details and Hard disk size

=>more /someFile
=>less /someFile
=>head -n 5 /someFile
=>tail -n 5 /someFile
Show taxt file with number of line and end/start

=>rm -rf `find . -type d -name .idea`
Delete all folder and subfolder

	- xargs
=>ls *.txt | xargs rm
executes a command for each item, like: list of files that you want to delete:

	- sed
=>sed 's/apple/orange/g' input.txt
replaces all occurrences of "apple" with "orange" in a file named input.txt
It is used to edit streams (files) using regular expressions. But this editing is not permanent.

	- chmod
=>chwon -R imran myFile
=>chgrp imran myFile
>chmod 774 file.txt
owner and group of a file full permission and allow all other users to read the file
Change permissions for a file or directory
 
	- netstat
=>netstat -a
List all listening ports

	- route
=>route
To add a default gateway.
=>sudo route add default gw 169.254.0.0
To display the IP/kernel routing table.
The route command can be used to display the current routing table

	- vmstat
=>vmstat -a
displays a summary of system-wide memory usage

	- visudo
a command-line utility that is used to edit the sudoers file

	- awk
=>awk '{print $1}' file.txt
reads through the file file.txt and prints the first field of each line
curly braces {} enclose the command to be executed for each line of the file, and $1 specifies the first field of the line.
utility for processing and manipulating text files

=>echo imran | base64
=>echo aW1yYW4K | base64 --decode

add short cut
=>nano ~/.bashrc
alias k=kubectl
=>source ~/.bashrc


EnvSetting:
------------------------------------------------
Variable Setting:



Host key Generate
------------------------------------------------
=>ssh-keygen -t rsa
=>ssh-copy-id -i ./.ssh/id_rsa admin@192.168.1.2
  enter password and done

=>ssh admin@192.168.1.2
=>ssh -i /var/lib/jenkins/.ssh/id_rsa admin@192.168.1.2
=>sudo ssh -i /var/lib/jenkins/.ssh/id_rsa admin@192.168.1.2
Now Can ssh without passwd



Utils:
-------------------------------------------------
=>apt-get install -y netcat


=================================================
#    Find | search    |    look up      
================================================= 
=>which java
=>ls *someFolder*

=>find /mydir/otherdir -name '*somePartOfFileName*'
=>find /app/myDir -type d -name 'someDir' 
=>find /app/admin -type f -iname '*runner*.sh'

Wild card Search

=>sudo grep -rnw -e 'myFileName'
=>grep -rnw '/etc/nginx/conf.d' -e '9940'
FindKeywordInFiles:


=>grep 'myText' ./*.txt
Find myText in current location with all file with .txt
=>grep fWord myTextFile.txt
=>grep 'Please find my sentence' myTextFile.txt
Search word in text file


=>cat RELEASE-NOTES | grep "Apache Tomcat Version"
Tomcat version check
=>sudo find / -name "version.sh"
If you are not sure where is the version.sh file
then
=>/app/archive/artifactory-oss-6.12.0/tomcat/bin/version.sh
systemctl status nginx


=>find . -type d -name ".git" -exec rm -rf {} \;
Find all directory in sub-dir and delete all

=================================================
#Link | SoftLink | HardLink                            
================================================= 
=>sudo update-alternatives --display java
=>sudo  update-alternatives --list java
=>sudo update-alternatives --config java


Fine alternatives install location:
--------------------------------------------------
imran@imranPC:~$ which java
/usr/bin/java
imran@imranPC:~$ ls -l /usr/bin/java
lrwxrwxrwx 1 root root 22 মে       24  2022 /usr/bin/java -> /etc/alternatives/java
imran@imranPC:~$ readlink /etc/alternatives/java
/opt/jdk/jdk-11.0.15.1/bin/java
imran@imranPC:~$ 
imran@imranPC:~$ 
imran@imranPC:~$ which mvn
/usr/bin/mvn
imran@imranPC:~$ ls -l /usr/bin/mvn
lrwxrwxrwx 1 root root 21 মার্চ     12 17:21 /usr/bin/mvn -> /etc/alternatives/mvn
imran@imranPC:~$ readlink /etc/alternatives/mvn
/usr/share/maven/bin/mvn
imran@imranPC:~$



Link/Unlink:
sudo ln -s /etc/nginx/sites-available/redis-sentinel.conf /etc/nginx/sites-enabled/
sudo unlink /etc/nginx/sites-enabled/redis-sentinel.conf




=================================================
# host| dns                               
================================================= 
=>sudo cat /etc/hosts
Show dns list








=================================================
#Permission Security | Permissions  | access                                
================================================= 

=>tail -f /var/log/auth.log
Show login information

=>chmod go=- two-simple.txt
=>chmod ugo=- *
Remove all permission from group and other


=>chmod u=rwx perm_test


=>chmod u/g/o +/- file/folder
Permissions Syntax

=>chmod u+w myFileName
=>chmod u+w,g+r,o+r myFileName
=>chmod 777 myFileName
Add file permission


=>chown imranUser myFolder
=>chmod .empGroup myFolder
=>chmod imranUser.empGroup myFolder

=>chown imranUser:empGroup myFolder
Add Owner permission


=>sudo su
Log in as root

=>sudo passwd root
For Change password

=>runlevel
Show current runlevel id

=>su - imran
Change system user


=>sudo chown userName:groudName fileName
Change Owner/Group of a File

=>sudo chown -R userName:groudName /path/to/directory/*
Change Owner/Group of All Files/Directories


=>sudo chmod a+rwx /szDirectoryName
=>sudo chmod -R 700 folder3



Id From 0 to 499 System generated and Other user generated


chmod a-w file (removes all writing permissions)
chmod o+x file (sets execute permissions for other (public permissions))
chmod u=rx file        (Give the owner rx permissions, not w)
chmod go-rwx file      (Deny rwx permission for group, others)
chmod g+w file         (Give write permission to the group)
chmod a+x file1 file2  (Give execute permission to everybody)
chmod g+rx,o+x file    (OK to combine like this with a comma)

u = user that owns the file
g = group that owns the file
o = other (everyone else)
a = all (everybody)

r = read aces to the file
w = write access
x = execute (run) access


#root
------------------------------------------------------------------------------------------
=>sudo -i
=>passwd
Set root password



=================================================
#Networking | Net                                           
================================================= 
=>ip a
=>ip addr show
=>ip -s link showonfig

=>nmcli con show
Show current activeconn
=>nmcli con up id ethernet-eno1
Reload network card


=>host google.combine

=>netstat -tulpn
=>netstat -an | grep 80

=>ip addr add 192.168.1.11/24 broadcast 192.168.1.255 dev eno1
Add secondary IP


=>sudo route
=>suod route add default gw 192.168.1.1
=>suod route del default gw 192.168.1.1

=>sudo apt-get install traceroute
=>traceroute google.com

 
=>sudo apt install net-tools

=>ip route add default via 10.21.29.11
Set default getway

=>ip route show
Show how to reach internet and default getway 



=>systemctl status NetworkManger
Check net manager status

=>cd /etc/NetworkManger/system-connections
System net conn list


#SSH
------------------------------------------------

=>echo $SHELL 
Show alll shele list
=>sudo apt install openssh-server



=>ssh imran@192.168.1.514

=>mv pappjar pappjar_23032022
=>scp papp.jar imran@192.168.1.514:/home/imran


=>scp -r /home/imran/blPROJECT/deploymentProcess  imran@192.168.1.514:/home/imran/mySimpleFolder
Copying Directories to remote machine

=>scp  -r imran@192.168.1.514:/home/imran/mySimpleFolder /home/imran/blPROJECT/deploymentProcess
Copying directories from remote machine to local machine




#Namespace
-------------------------------------------------
=>ip netns
=>ls /var/run/netns
List of namespace

=>ip netns add nameOfNamespace


=>ip netns add net1
Add name space

=>ip netns exec net1 ip link
=>ip netns exec net1 ip addr

=>ip netns exec net1 ip link set dev lo update



=================================================
#Firewall | Ufw | FIREWALL                 
=================================================

=>systemctl status firewalld.status

=>firewall-cmd --get-zones
=>firewall-cmd --get-default-zone
=>firewall-cmd --get-active-zone
=>firewall-cmd --set-default-zone=home
Show fw zone


=>firewall-cmd --zone=public --list-all
List of active services


=>firewall-cmd  --get-services
List of all services available

=>firewall-cmd --permanent --zone=public --add-service=http
=>firewall-cmd --permanent --zone=public --remove-service=http
=>firewall-cmd -reload
Add services permanent

=>ls /usr/lib/firewalld/services/
Service config file list



=>sudo apt install ufw
=>sudo ufw status
Check the allow app list
=>sudo ufw allow ssh

=>sudo ufw delete allow ssh
=>sudo ufw delete allow 22/tcp


=>sudo ufw status numbered

=>sudo ufw status
=>sudo ufw disable

=>vim /etc/default/ufw 

=>sudo ufw reset
Reset current rule



=================================================
#System | systemctl | CTL                         
================================================= 
=>init 3 // Text mode
=>startx 
=>init 0 shatdown
=>init 6 or =>reboot
=>who 
Current log in user

=>systemctl list-unit-files | grep enabled
List of all shstemctl enable services

=>history 
Show uses caommand from start to at now

=>history -c
Clear command history


#Process | PS | process
-------------------------------------------------
=>ps aux
=>ps -fax | less
Show all process and with chile proc



=>dpkg --list
Currently installed programs

=>sudo apt-get remove packagName
=>sudo apt-get --purge remove packagName
=>sudo aptitude remove packagName
Uninstalling Programs with Terminal

=>sudo apt-get dist-upgrade

=>sudo apt-get autoremove

=>sudo systemctl daemon-reload 
Reload the systemd daemon service to load newly create files.

=>sudo apt update
Syncs your local copy of available packages and their versions against the current-state index with the repositories

=>sudo updatedb



=================================================
# Monitoring | CUP  | memory | storage                               
================================================= 

=>top

=>man 7 signal
Show all single list

=>dd if=/div/zero of=/dev/null &
Simple process


=>ls /var/log/
Show all system logs file

#Memory
-------------------------------------------------

=>lsblk
Show all memory/block device and partation attatch to the machine 


=>sudo umount /devic/nameOrPath
Un-mount a partation 


#Mounting a new device
-------------------------------------------------
Step1: Create a mount point to a device path
=>sudo fdisk /dev/sdb
	->p			# Show all disk partation
	->n			# Create new Partation
	->w			# Finalize write
	
Step1: Create file System
=>sudo apt install exfat-utils exfat-fuse
=>sudo mkfs.exfat /dev/sdb1






=>free -g
=>df -H
=>sudo lshw -class memory
Ram Details

=>cat /proc/meminfo
=>grep MemTotal /proc/meminfo
Ram size check


>lsblk -d
=>lshw -class disk -short
Hard disk size


=>du -hs fileNameForShoSize
=>du -sh *
=>sudo du -sh .
=>df -h .
Specific file size in hard disk


=>df
=>free -m
=>df -kh .
=>df -T -h /myDir/

=>dmesg | grep blocks
=>sudo fdisk -l | grep Disk
=>sudo fdisk -l | grep "^Disk /" | gawk '{print $3,$4}'
Total disk Size

#Cpu
-------------------------------------------------
=>uptime
CPU usage over the last 1, 5, and 15 minutes with start-time and user

=>lscpu

=>lscpu
=>lscpu | egrep 'Model name|Socket|Thread|NUMA|CPU\(s\)'
=>cat /proc/cpuinfo
=> grep 'cpu cores' /proc/cpuinfo | uniq



=================================================
#SH | sh .sh | shall script| cmd | command                                
================================================= 
=>tail -n 1000 access.log.131223>access.log
Copy 1k Line to another file

=>nohup sh my-syslog.sh &
=>nohup sh my-syslog.sh > sys-log.txt &




| sort | uniq --count
-------------------------------------------------
in example.txt file data
apple
orange
banana
apple
orange
orange

=>cat example.txt | sort | uniq --count
rs:
   2 apple
   1 banana
   3 orange



=>=>tail -n 20  access.log |awk  '{print $8}'
=>tail -n 20  access.log |awk  '{print $8}'| sort | uniq --count
Print uniq-count 8-no column for last 20 line

=>cat access.log.131223 | awk '{print $8}'
=>cat  access.log |awk  '{print $8}'| sort | uniq --count
=>cat access.log | awk '{print $8}' | sort | uniq --count | grep 404
=>cat access.log | grep -v '200' |  awk '{print $12 " " $8}' | sort | uniq --count
For all file





Ascending Order (default):
 | sort file.txt

Descending Order:
 | sort -r file.txt




awk | sh | Operation 
-------------------------------------------------

Name,Age,Location
John,25,New York
Jane,30,San Francisco
Bob,22,Los Angeles

=>awk -F',' '{print $2}' nohup.out
rs:
Age
25
30
22

=>awk -F',' '{total += $2} END {print "Total Age:", total}' nohup.out
rs:
Total Age: 77




Exmp1
=====
while true
do
        echo "System is runing $(date) !"
        sleep 1
done



Exmp2
=====
while true
do
        echo "System is runing !    Date: $(date)     User: $USER" 
        sleep 1
done


=================================================
#   CRON | crontab                                     
================================================= 
=>less /etc/anacrontab
=>ls -l /etc/cron.daily/
Show daly default cron 


crontab -e
CreateACronEverySec:
*/1 * * * * echo 'This is from Cron Job v2.......'>> /home/imran/imranMadbar/myPROJECT/linuxScript/cronLog.txt

Check if cron package is installed:
=>dpkg -l cron 
=>apt-get install cron
=>systemctl status cron

crontab -l : List the all your cron jobs.
crontab -r : Delete the current cron jobs.


Syntax:
* * * * * /path/to/command arg1 arg2
OR
* * * * * /root/backup.sh


=>less /etc/crontab
Show all cron systex





=================================================
# Script | example | bash | sh                                  
================================================= 

Return a random number:
------------------------------------------------
#!/bin/bash

# Define an array of numbers
numbers=(1 2 3 4 5 6 7 8 9)

# Get the length of the array
length=${#numbers[@]}

# Generate a random index
index=$((RANDOM % length))

# Get the randomly selected number from the array
number=${numbers[index]}

# Check if the number is odd or even
if ((number % 2 == 0))
then
    echo "$number is even."
else
    echo "$number is odd."
fi



Processing step
------------------------------------------------
#!/bin/bash

# Function to print a message with a spinner
print_message() {
    local message=$1
    local spinner="/-\|"
    printf "%s " "$message"
    for i in $(seq 1 10); do
        printf "%s" "${spinner:i % 4:1}"
        sleep 0.1
        printf "\b"
    done
    printf "   \n"  # Clear the spinner
}

# Process data function
process_data() {
    total_steps=10

     print_message "Processing step 1/$total_steps"
        # Simulate some data processing
        sleep 1



        print_message "Processing step 2/$total_steps"
        # Simulate some data processing
        sleep 1

                print_message "Processing step 3/$total_steps"
        # Simulate some data processing
        sleep 1



    echo "Processing completed!"
}
OR
# Process data function
process_data() {
    total_steps=10

    for ((step = 1; step <= total_steps; step++)); do
        print_message "Processing step $step/$total_steps"
        # Simulate some data processing
        sleep 1
    done

    echo "Processing completed!"
}

# Call the function to process data
process_data


Example2
--------------------------------------------
#!/bin/bash

# Function to print a formatted message
print_message() {
    local message="$1"
    printf "[INFO] %s\n" "$message"
}

# Function to display a progress bar
print_progress() {
    local width=30
    local progress=$1
    local percentage=$((progress * 100 / width))
    printf "["
    for ((i = 0; i < width; i++)); do
        if [ "$i" -le "$percentage" ]; then
            printf "#"
        else
            printf " "
        fi
    done
    printf "] %d%%\r" "$percentage"
}

# Function to process data
process_data() {
    total_steps=10

    print_message "Starting data processing..."
    
    for ((step = 1; step <= total_steps; step++)); do
        # Simulate some data processing
        sleep 1

        # Print a progress bar
        print_progress "$step"
    done

    print_message "Data processing completed!"
}

# Call the function to process data
process_data






=================================================
# Editor   | vi | vim | VIM                    
================================================= 
VIM:

Insert mode:	Press i or insert for insert mode
Exit mode:	press esc btn for exit
Command mode	fill navigation, cut, past, undo,redo
Visual Mode:	Press ctrl+v form keyboard


:x or f:wq or save and quit.
:q! for not save

v/V/ctrl+v for visual based
d for delete/cut
y for copy
p for paste

dd onel line delete/cut
ndd n line delete/cut
dw word delet/cut
dl letter delete/cut
shift+d cut line from current cursor position


Multi-Line text Operation:
v = visul mode
Shift+V = visual line mode
Ctl+V = Visual Block Mode

Then: Shift+ .or, 
Shift+. = right
Shift+, = Left
Then for repert the command(mode multiple line) continue press `.` (period).


vim COMMAND MODE
-------------------------------------------------
o/O for direct insert text with new line
u for Undo
ctrl r for redo

:saveas fileName
Current file save as

shift+6 cursor to line start
shift+4 cursor to line end of line 

gg got to first line
G got to end line
:25 go to 25 line


r replace char
cw change word
cc change line

yy full line copy

nyy/4yy number of line copy
p/P for paste

dl single letter delete

D cut all text from text from left side

?searchKwyWord
/searckKeyWord
n/N for find next/Previous match keyword


:s/oldWord/newWord/gc
Search and replace one by one
:%s/oleKey/newKey/g
Replace all





=================================================
#    File or Directory  | Operation    | Copy                                     
================================================= 
=>nano simpleFile.txt
=>scp simpleFile.txt remoateUser@remoteHost:/app/remoteMachin/filePath/
Copy file to remote server

=>scp remoateUser@remoteHost:/app/remoteMachin/filePath/someFile.txt /localMachin/filePath
Copy file from remote server


=>mv simpleFileV3.txt mySimpleFolder/
Move file to folder

=>rm -r  file/
=>rm -f file
Delete file


=>scp -r /home/imran/localMachineFolder remoateUser@remoteHost:/app/remoteMachineFolder/path
Copying Directories local machine to remote machine

=>scp  -r remoateUser@remoteHost:/app/mySimpleFolder /home/imran/localhMachinePath
Copying directories from remote machine to local machine


=>ls -a
Show hiddne file 
=>ls -R
Show all file and folder inside of folder


=>cp fileName /copyFolder/
Copy file

=>cp -rf targetFolder /folderPath/
Copy folder

=>cp -rf /etc/tomcat/* /otherFolder/
Copy all contain

=>mv oldFileName newFileName
Rename file

=>mv myFolder /locationFolder/
Move file 

=>rm -rf /mhFolder/*
Delete every thing in mhFolder


=>rmdir directory
Delete folder


=>cp * /destination/directory/
Copy all file to another folder



=>scp localmachine/path_to_the_file username@server_ip:/path_to_remote_directory

=>scp -r /app/test/test.txt admin@172.16.254.25:/app
=>scp -r cassandra.yaml C:
=>scp -r admin@172.16.8.132:standalone.xml "C:"
=>docker cp e029d15afdfc:/etc/cassandra/cassandra.yaml C:/Z_MY_COMPUTER
=>docker cp C:/Z_MY_COMPUTER/cassandra.yaml a394ae84224c:/etc/cassandra


=>cd /etc/skel/
=>touch sharedFile
Sharing file for all user


#TAR |  ZIP | compress | Compression
-------------------------------------------
=>tar -cvf myTarFile.tar *
Make tar file with all contain in current folder
=>tar -cvf myTarFile targetFolder/
Make Tar
=>tar -tvf myTarFile
=>tar -xvf myTarFile
UnTar
=>tar -rf myTarFile newFile
=>tar -xvf myTarFile reqFile
Add/emit a file to exists tar


=>zip app.zip app.js
Single file zip

=>zip -r archive_name.zip directory_to_compress

=>unzip file.zip -d destination_folder
=>gzip myFolder
=>sudo unzip -d /opt/gradle gradle-5.6.1-bin.zip 
Zip/Unzip file





=================================================
# User | Group                                      
================================================= 

=>usermod -aG sudo imran
Add a user on sudo group

=>useradd imran
=>groupadd empGroup
=>chown imran:empGroup fileName
In Root mode, assign a file permission


#User
---------------------------------------------------------------------------------------

=>compgen -u
=>cat /etc/passwd
=>cut -d: -f1 /etc/passwd
=>getent passwd | grep imran
Check user list


=>id -g -n imran
=>id -G -n imran
To print the primary/secondary group membership for a user


=>adduser imran |  and other information
=>sudo passwd imran
Add /del user

=>userdel imran


=>su newUseraName
Switch user

=>grep -Po '^sudo.+:\K.*$' /etc/group
See number of super users in the available system: 

=>newgrp docker

Run the following command/ Login or logout: 


#Group
-----------------------------------------------
=>id
ubuntu print current user name and group and sube-group

=>compgen -g
=>cat /etc/group
List of group

=>getent group groupname
List fo group membership


=>groupadd empGroup


=>sudo adduser $USER docker
=>usermod -G empGroup imranUser
=>usermod -G empGroup, otherGroup imranUser
=>newgrp docker
Add user in a group

=>gpasswd -d imranUser empGroup
Remove user from a group

=>groupmod -n newGroupName oldGroupName
Rename group

=>groupdel empGroup
Delete group


=>whoami
=>id -un

=>id -gn

=>id -Gn
=>groups

=>compgen -g
=>getent group
List all group names on Linux:




=================================================
# cGroup                               
================================================= 

=>cd /sys/fs/cgroup


Emmp1
=====
=>sudo cgcreate- -g memory:cg1
Create a memory cgroup

=>echo 100000 | dudo tee /sys/fs/cgroup/memory/cg1/memory.limit_in_bytes
Assign memory to cGroup

=>sudo cgexec -g memory:cg1 ./myProcess.sh
Run process under cGroup


Exmp2
=====

=>cgcreate -g cpuset:cpusetA

=>cgset -f cpuset.cpus=0 cpusetA
=>cgset -f cpuset.mems-0 cpusetA

=>cgget -r cupset.cpus -r cpuset.mems cpusetA
=>cgexec -g cpuset:cpusetA dd if=/dev/zero of=/dev/null &






=================================================
#apache2                               
================================================= 

=>sudo apt install apache2

=>sudo systemctl start apache2.service
=>sudo systemctl status apache2

=>sudo systemctl stop apache2.service
=>sudo systemctl restart apache2.service
=>sudo systemctl reload apache2.service



=>sudo ufw app list
=>sudo ufw allow 'Apache'
=>sudo ufw status




Change port 
=>/etc/apache2/ports.conf
 

 
 
=================================================
#    Storage |   
================================================= 
=>fdisk -l
list of disk in system

=>fdisk /dev/deviceNameDB
create partition new volum drive

=>mkfs -t xfs /dev/xvdbl/deviceName
Formate disk device


=>mount /dev/xvdbl/deviceName /data/myTargetDrive
Formated storage mounting

=================================================
#Service | systemd | Process                                    
=================================================

=>sudo netstat -tuln

=>sudo lsof -i -P -n -f | grep LISTEN
=>sudo lsof -i :8000
Get service by port/ process running and its port




#Process
-------------------------------------------------

=>ps
=>ps aux
show all current proecess in the system

=>ps -f -U username
Show process run by user




#service | .service
-------------------------------------------------
=>nano /etc/systemd/system/my_simple_service.service
Create a services with below script

=>sudo  systemctl daemon-reload
=>sudo systemctl start my_simple_service.service
=>sudo systemctl status my_simple_service.service
=>sudo systemctl stop my_simple_service.service

=>sudo systemctl enable my_simple_service.service
=>sudo systemctl disable my_simple_service.service
To enable/disable your service on every reboot

=>sudo systemctl enable simple-system-monitor-service.service 
=>cd /etc/systemd/system/multi-user.target.wants
=>sudo systemctl disable simple-system-monitor-service.service 




# Output all active services:
systemctl -t service --state=active --no-pager --no-legend
# Count of all active services:
systemctl -t service --state=active --no-pager --no-legend | grep -c -
# Output all running services:
systemctl -t service --state=active --no-pager --no-legend | egrep '^*\.service.*running'
# Count of all running services:
systemctl -t service --state=active --no-pager --no-legend | egrep '^*\.service.*running' -c -


Disable a service start automati
=>sudo systemctl disable mysql.service
=>sudo systemctl disable jenkins


systemctl stop redis
systemctl disable redis
systemctl is-enabled redis
Check and disable auto start service on linux os

It remove this serice:
bs960@BS-960:~$ systemctl disable redis
Removed /etc/systemd/system/multi-user.target.wants/redis-server.service.
Removed /etc/systemd/system/redis.service




Service1
============
[Unit]
Description=My Simple Custome Service

[Service]
Type=simple
ExecStart=/bin/sh -c  'echo "Lgo written By SimpleService" >> /var/log/my_simple_service.log 2>&1'

[Install]
WantedBy=multi-user.target


Example2
=========
BashScript:
while true
do
        echo "System is runing !" >>/home/imran/imranMadbar/myPROJECT/linuxScript/service-log.txt
        date >> /home/imran/imranMadbar/myPROJECT/linuxScript/service-log.txt
        sleep 1
done


=>sudo chmod +x simple-system-monitor.sh

Simple system monitor service:
[Unit]
Description=MySimpleShellScript

[Service]
ExecStart=/home/imran/imranMadbar/myPROJECT/linuxScript/simple-system-monitor.sh

[Install]
WantedBy=multi-user.target




#Signal
-------------------------------------------------

=man 7 signal

=>dd if=/dev/zero of=/dev/null &
Start a process

=>top 
then ->k
To sent signal sent process


Process signal
9=kill, 15=terminated

=>kill
=>killall dd





=================================================
#Software|repositories|packages|install|Tools                  
================================================= 


=>sudo apt install synaptic 
=>sudo apt-get install vlc

=>sudo apt show
=>sudo apt search "web browser"
=>sudo apt install chromium-browser
Finding and Installing New Software


Install  Net tools
=>sudo apt install net-tools


#httpd
--------------------------------------------------
#!/bin/bash
yum update -y
yum install -y httpd
systemctl start httpd
systemctl enable httpd
echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html

For Ubuntu:
sudo apt update
sudo apt install apache2 -y
sudo systemctl status apache2
sudo chmod -R 777 /var/www/html
echo "<h1 style='text-align:center'>This msg from server one</h1>" > /var/www/html/index.html


=>ssh -i ssh-key.pem ubuntu@yourIpAdress
=>ssh -i ssh-key.pem ec2-user@yourIpAdress



=================================================
#   PYTHON | PY  | py
=================================================  
=>sudo python3 -m pip install paramiko





=================================================
#    Jar Operation       | java  | JAVA
================================================= 
=>which java
=>dirname $(dirname $(readlink -f $(which javac)))
=>java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home' 
=>update-alternatives --config java
=>sudo update-alternatives --config java
Check all java version on this mechine

=>java -jar -Dserver.port=8083 simpleJar.jar
=>java -jar -Dspring.profiles.active=dev-bl spring-service-with-profile.jar
=>java -jar -Dspring.profiles.active=dev-bl service-with-port.jar --server.port=8083

find out which process is listing upon a port
=>netstat -tulpn
=>netstat -tulpn | grep :9940


=>nohup java -jar spring-boot-simple-web-1.0.0.RELEASE.jar > myLogFile.txt &

=>nohup /app/somedir/jdk1.8.0_231/bin/java -jar some-app.jar --spring.profiles.include=pre-prod --server.port=8080



#Install JAVA 
--------------------------------------------------

=>sudo mkdir  -p /opt/jdk
=>sudo cp -rf /home/sivasai/jdk-8u251-linux-x64.tar.gz /opt/jdk/
=>cd /opt/jdk/
=>sudo tar -zxf jdk-8u251-linux-x64.tar.gz
=>sudo update-alternatives --install /usr/bin/java java /opt/jdk/jdk1.8.0_333/bin/java 100
=>sudo update-alternatives --install /usr/bin/java java /opt/jdk/amazon-corretto-11.0.15.9.1-linux-x64/bin/java 100

=>sudo update-alternatives --install /usr/bin/java java /opt/jdk/jdk-17.0.8/bin/java 100

=>sudo  nano /etc/environment
JAVA_HOME=/opt/jdk/jdk1.8.0_333
JRE_HOME=/opt/jdk/jdk1.8.0_333/jre

Change java version
-----------------------------------------------------
=>java -version
=>sudo update-alternatives --display java
=>sudo  update-alternatives --list java
=>sudo update-alternatives --config java

=>sudo update-alternatives --remove java /opt/jdk/jdk1.8.0_333/bin/java


Set JAVA_HOME variable
--------------------------------------------------

=>nano ~/.bashrc
export JAVA_HOME="/opt/jdk/jdk-17.0.8/"
export PATH=$PATH:$JAVA_HOME/bin

save the file

=>source ~/.bashrc
=>echo $JAVA_HOME



SoftLink
-------------------------------------------------
=>sudo ln -s /opt/jdk/jdk1.8.0_333/bin/java /usr/bin/java8
=>sudo ln -s /opt/jdk/jdk-11.0.15.1/bin/java /usr/bin/java11
=>sudo ln -s /opt/jdk/jdk-17.0.8/bin/java /usr/bin/java17


Uninstall java
-------------------------------------------------
=>sudo update-alternatives --remove java /opt/jdk/jdk-17/bin/java





=================================================
#Gradle | gradle install
================================================= 
=>VERSION=5.6.1
=>wget https://services.gradle.org/distributions/gradle-${VERSION}-bin.zip -P /tmp
=>sudo unzip -d /opt/gradle /tmp/gradle-${VERSION}-bin.zip
=> export PATH=$PATH:/opt/gradle/gradle-${VERSION}/bin

=>nano ~/.bashrc
        =export PATH=$PATH:/opt/gradle/gradle-7.4.1/bin
Set home




=================================================
# MySQL                  
================================================= 
=>sudo mysql -u root -p -e 'SHOW VARIABLES LIKE "%version%";'
=>sudo mysqladmin -u root -p version
=>SELECT version();


=>service mysql start   
=>systemctl status mysql
=>service mysql stop



#InstallMySql
--------------------------------------------------------------------------------------------------
=>sudo apt install mysql-server
=>systemctl is-active mysql

=>sudo mysql_secure_installation


=>sudo mysql

=>SELECT User, Host, authentication_string FROM mysql.user;
Check all user

=>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_password';
=>FLUSH PRIVILEGES;
=>exit;
=>sudo service mysql restart


Install workbrnach:
=>sudo snap install mysql-workbench-community


create table std_tbl(
   id INT NOT NULL AUTO_INCREMENT,
   name VARCHAR(100) NOT NULL,
   gender VARCHAR(40) NOT NULL,
   PRIMARY KEY ( id )
);
=>INSERT INTO std_tbl VALUES (1, 'IMRAN', 'MALE');


Update password policy:

=>sudo mysql
=>SHOW VARIABLES LIKE 'validate_password%';

set global validate_password.check_user_name='OFF';
SET GLOBAL validate_password.policy=LOW;
SET GLOBAL validate_password.length=4;
set global validate_password.mixed_case_count=0;
set global validate_password.number_count=0;
set global validate_password.special_char_count=0;
set global validate_password.policy=0;
SHOW VARIABLES LIKE 'validate_password%';





Uninstall mysql server

=>sudo systemctl stop mysql.service
sudo apt-get remove mssql-server
sudo apt-get remove --purge mysql*
sudo apt-get purge mysql*
sudo apt-get autoremove
sudo apt-get autoclean
sudo apt-get remove dbconfig-mysql
sudo apt-get dist-upgrade




=================================================
# Media |  Audio                  
================================================= 





=================================================
#Font | Text                  
================================================= 
=>cd /usr/share/fonts/
=>sudo apt-get install fontconfig


=>fc-list
=>fc-list : family | sort | uniq

=>fc-list | grep "DejaVu Sans"
=>sudo find / -type f -name "*.ttf"




=================================================
# Media |  Audio                  
================================================= 
 =>suod apt install sox
 => sudo apt-get install libsox-fmt-mp3
 =>sudo apt-get install sox libsox-fmt-all



=================================================
#Linux | Info | Desc | documentation                            
=================================================

> copy to
>> append out to a file
=>ls > myOutPutFile.txt

STDIN = 0
STDOUT = 1
STDERR = 2
Stendard Input/output and err value for execution

#APT
--------------------------------------------------
APT is the default package-management framework for Ubuntu and several other popular distributions.

=>apt-get upgrade 
Updates the package but does not, by default, delete other packages or add new ones. 
Instead, the upgrade will fail if it requires added or deleted dependencies.
=>apt-get dist-upgrade
Updates and deletes prior versions of the package, including dependencies.
apt upgrade: 
Functions like apt-get upgrade --with-new-packages, which is a fancy way of saying that it updates, 
but does not delete prior versions, yet it does install new packages (but won't delete them) if doing so is required to satisfy dependencies.




#Tidying Up Packages
-------------------------------------------------
apt reinstall: Reinstalls the package from the repository source, useful if you think you've broken a program that you like.
apt remove: Removes a package, but leaves user-configured files in place.
apt purge: Removes a package and also all associated files related to it, including user configuration files.
apt autoremove: Deletes packages that had been installed as dependencies but, given that they're obsolete or the other package was removed, are now orphaned. Running this command occasionally can recover some disk space.



Linux software is available from repositories—servers that hold software that can be installed for a particular distribution. 
A repository is stored on one or more servers known as mirrors. Each item of software within a repository is called a package. 
There are many package formats, but Ubuntu uses the Debian package format. 
You'll find most of the things you need in the default repositories, but you can add and enable some extra repositories to acquire additional software.


Using graphical packages such as Ubuntu Software and Synaptic aren't the only ways to install software using Ubuntu.
You also can install packages from the command line using apt-get. 
While the command line may seem daunting, you will come to appreciate the power of apt-get after using it for a bit.


Some packages require specific other packages as well as their own; others require that some packages be removed before they'll work. 

The files for installing software is usually called a package and packages come in many different flavors. 
Ubuntu packages end in .DEB.



#Common File Permissions
----------------------------------------------------------------------------

Setting			Numerical			Owner						Group						Others
-rw——-			600				Read/Write	 	 
-rw-r—–				640				Read/Write				Read	 
-rw-r–r–				44				Read/Write				Read						Read
-rw-rw-r–			664				Read/Write				Read/Write				Read
-rwx——			700				Read/Write/Execute	 	 
-rwxr-xr-x			755				Read/Write/Execute	Read/Execute			Read/Execute
-rwx–x–x			711				Read/Write/Execute	Execute					Execute
-rw-rw-rw-			666				Read/Write				Read/Write				Read/Write
-rwxrwxrwx		777				Read/Write/Execute	Read/Write/Execute	Read/Write/Execute



#Linux Main directories about
----------------------------------------------------------------------------


/bin  is a place for most commonly used terminal commands, like ls, mount, rm, etc.

/boot contains files needed to start up the system, including the Linux kernel, a RAM disk image and bootloader configuration files.

/dev contains all device files, which are not regular files but instead refer to various hardware devices on the system, including hard drives.

/etc contains system-global configuration files, which affect the system's behavior for all users.

/home home sweet home, this is the place for users' home directories.

/lib contains very important dynamic libraries and kernel modules

/media is intended as a mount point for external devices, such as hard drives or removable media (floppies, CDs, DVDs).

/mnt is also a place for mount points, but dedicated specifically to "temporarily mounted" devices, such as network filesystems.

/opt can be used to store additional software for your system, which is not handled by the package manager.

/proc is a virtual filesystem that provides a mechanism for kernel to send information to processes.

/root is the superuser's home directory, not in /home/ to allow for booting the system even if /home/ is not available.

/run is a tmpfs (temporary file system) available early in the boot process where ephemeral run-time data is stored. Files under this directory are removed or truncated at the beginning of the boot process.
(It deprecates various legacy locations such as /var/run, /var/lock, /lib/init/rw in otherwise non-ephemeral directory trees as well as /dev/.* and /dev/shm  which are not device files.)

/sbin contains important administrative commands that should generally only be employed by the superuser.

/srv can contain data directories of services such as HTTP (/srv/www/) or FTP.

/sys is a virtual filesystem that can be accessed to set or obtain information about the kernel's view of the system.

/tmp is a place for temporary files used by applications.

/usr contains the majority of user utilities and applications, and partly replicates the root directory structure, containing for instance, among others, /usr/bin/ and /usr/lib.

/var is dedicated to variable data, such as logs, databases, websites, and temporary spool (e-mail etc.) files that persist from one boot to the next. A notable directory it contains is /var/log where system log files are kept.
