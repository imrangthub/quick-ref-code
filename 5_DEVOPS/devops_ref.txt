#################################################
#                 DEVOPS                        #
#################################################

192.168.217.145

=================================================
#                  Basic                                          
================================================= 


--module-path C:\Z_MY_COMPUTER\Software\javafx18\lib 
--add-modules=javafx.controls,javafx.fxml

=================================================
#Linux | DEPLOYMENT                                          
=================================================

=>ssh imran@192.168.1.5
=>mv pappjar pappjar_23032022
=>scp papp.jar imran@192.168.1.5:/home/imran/appService
=>scp student-service-1.0.0.RELEASE.jar imran@192.168.1.2:/home/imran/appService


=>scp -r /home/imran/blPROJECT/deploymentProcess  imran@192.168.1.514:/home/imran/mySimpleFolder
Copying Directories to remote machine

=>scp  -r imran@192.168.1.514:/home/imran/mySimpleFolder /home/imran/blPROJECT/deploymentProcess
Copying directories from remote machine to local machine




=>java -jar student-service-1.0.0.RELEASE.jar --CONFIG_SERVER=configserver:http://192.168.1.2:9091 --eureka.client.serviceUrl.defaultZone=http://192.168.1.2:9092/eureka/
=>java -jar student-service-1.0.0.RELEASE.jar --server.port=8888 --CONFIG_SERVER=configserver:http://localhost:8080

=>java -jar zipkin-server-2.23.15-exec.jar --server.port=9410 --zipkin.storage.type=cassandra3 --zipkin.storage.cassandra3.ensure-schema=true --zipkin.storage.cassandra3.contact-points=localhost:9042 --zipkin.storage.cassandra3.username=imran --zipkin.storage.cassandra3.password=123456 --zipkin.storage.cassandra3.keyspace=spring_boot_keyspc

=================================================
#CURL                                         
=================================================

curl https://www.cyberciti.biz/files/sticker/sticker_book.pdf --output output.pdf



=================================================
# Sucurity | Permissions  | access                                
================================================= 


#
=================================================
# SSH | SHALL | cmd                            
================================================= 

=>ssh imran@192.168.8.10



=>Set-ExecutionPolicy Unrestricted
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false

=================================================
#                  Window | batch | .bat                                          
=================================================

=>services.msc 

=>msinfo32
Cores in your CPU in RUN command

#CMD
================================================= 
=>cd C:\Z_MY_COMPUTER\PROJECT\BS23_BANGLALINK
=>date
=>cd\
=>d:
=>dir
=>mkdir

=>copy README.txt d:\http\temp
=>ren README.txt READLATER.txt
=>del READLATER.txt
=>del *.*
=>rmdir myNewFolder
=>color 0a


=>systeminfo
=>driverquery
Lists Installed Drivers and Hardware

=>ipconfig
Networking Information
=>tasklist

>echo %JAVA_HOME%
=>echo %CATALINA_HOME%
=>netstat
=>tracert google.com

=>wmic MEMORYCHIP get BankLabel, DeviceLocator, MemoryType, TypeDetail, Capacity, Speed
=>wmic memorychip list full
RAM details

=>wmic cpu get loadpercentage



#Batch
================================================= 
test.bat
Show sample Msg:
------------------------------------------------

@echo off
title This is your first batch script!
echo Welcome to batch scripting!
pause


Create folder:
------------------------------------------------
WAY1
====

@echo off

if not exist "MyFolder" (
	echo File creating ....!
	mkdir "MyFolder"
) else (
    echo Folder already exists!
)
pause

WAY2
====
@echo off
for /f "tokens=2 delims==" %%a in ('wmic OS Get localdatetime /value') do set "dt=%%a"
set "YY=%dt:~2,2%" & set "YYYY=%dt:~0,4%" & set "MM=%dt:~4,2%" & set "DD=%dt:~6,2%"
set "HH=%dt:~8,2%" & set "Min=%dt:~10,2%" & set "Sec=%dt:~12,2%"
set "fullstamp=%YYYY%_%MM%_%DD%_H%HH%M%Min%S%Sec%"

echo fullstamp: "%fullstamp%"
mkdir "%fullstamp%"
pause


@echo off 
cd target
java -jar spring-boot-simple-web-0.0.1-SNAPSHOT.jar
echo "Done,  application run successfully !"
exit

=================================================
#  JAVA                                          
================================================= 

echo %JAVA_HOME%

Extract the Jar
Jar -xvf webapp-1.0.0.SNAPSHOT.jar

=================================================
#  GIT                                          
================================================= 


Git Clone 
---------
=>git clone link..
=>git clone -b internDev --single-branch [clone link]


You can fetch all branches from all remotes like this:
git fetch --all

git branch -a - All branches.

git branch -r - Remote branches only.

git branch -l or git branch - Local branches only.

Check out, review, and merge locally
Step 1. Fetch and check out the branch for this merge request

git fetch origin
git checkout -b "main" "origin/main"
Step 2. Review the changes locally

Step 3. Merge the branch and fix any conflicts that come up

git fetch origin
git checkout "internDev"
git merge --no-ff "main"
Step 4. Push the result of the merge to GitLab

git push origin "internDev"


 =>git add pom.xml src


=================================================
#  Tomcat                                          
================================================= 

#Killing Port:
-------------------------------------------------
netstat -ano | findstr 8080
netstat -ano | findstr 3306
netstat -an | grep 80
taskkill /F /PID 2368

=> ./startup.sh 
=>sudo systemctl start tomcat.service
=>sudo systemctl status tomcat.service
=>sudo systemctl stop tomcat.service


https://stackoverflow.com/questions/48938921/error-while-deploying-spring-boot-war-file-on-tomcat-server

#Config
-------------------------------------------------

In server.xml set server port
<Connector port="8585" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" />

In tomcat-users.xml set user
<role rolename="manager"/>
<role rolename="manager-gui"/>        
<role rolename="admin"/>
<role rolename="manager-script"/>
<user username="admin" password="admin" roles="admin,manager,manager-gui,manager-script" /> 


#Restart Tomcate Server
-------------------------------------------------
[root@cmhdbserver ~]# systemctl restart tomcat



#Tomcate Status
-------------------------------------------------
[root@cmhdbserver ~]# systemctl status tomcat



#Tomcat Log Out
-------------------------------------------------

[root@cmhdbserver ~]# tail -f /opt/tomcat/logs/catalina.out
OR
[root@rushmonodbserver logs]# cd /opt/tomcat9092/logs/
[root@rushmonodbserver logs]# tail -f catalina.out


#Tomcat Log Show in loca host
-------------------------------------------------

catalina.bat run



=================================================
#  NGINX | nginx                                          
================================================= 
=>start nginx
=>nginx -s stop	
=>nginx -s quit	
=>nginx -s reload	

=>ps -ef|grep nginx

=>nginx -s reopen	
Reopening log files



#Reverse Proxy
-------------------------------------------------

server {
	listen       8181;
	server_name  localhost;

location / {
		proxy_pass   http://localhost:8080;
	}
}

#Load Balancer
-------------------------------------------------
upstream upstreamGroup1 {
   server localhost:8080;
   server localhost:8282;
}
server {
	listen       70;
	server_name  localhost;

location / {
		proxy_pass   http://upstreamGroup1;
	}
}


Windows CMD
---------------------------------------------------
=>wmic process where name='nginx.exe' delete
=>nginx.exe -s quit



MySql proxy
-------------------------------------------
stream {
    include stream.conf;
}


In stream.conf file on the same folder of nginx.conf write down this 
upstream galera_cluster {
    server 127.0.0.1:3306; #node1
    zone tcp_mem 64k;
}

server {
    listen 3366; # MySQL default
    proxy_pass galera_cluster;
}





Some helpful commands:
---------------------------------------------
Reload NGINX: /app/nginx/sbin/nginx –s reload

Test NGINX conf: /app/nginx/sbin/nginx –t

Check log: tail –f access.log
Filtering status code except 200 and 202 ok: 
=>tail –f access.log | grep –v ‘ 200 ‘  | grep –v ‘ 202 ‘     (202 is the status code of otp success)
Printing only destination IP: 
=>cat access.log | awk ‘{print $(NF-2)}‘
Print destination IP count: 
=>cat access.log | awk ‘{print $(NF-2)} | sort | uniq --count‘
 
You can mix between these commands to achieve your goal. For example, you want to see which destination server is failing:
=>cat access.log | grep –v ‘ 200 ‘  | grep –v ‘ 202 ‘ | awk ‘{print $(NF-2)} | sort | uniq --count‘

Debug:
=> tail -f access.log | grep 53489776
=>tail -f access.log | grep -v "200"



nginx.conf for log
-------------------------------------------------
http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" $upstream_addr $upstream_response_time' " $request_time";
    access_log  /app/NginxFolder/logs/access.log   main;
}
	



=================================================
#         Jar add on Class Path                                          
================================================= 
#For Windows
-------------------------------------------------
install:install-file -Dfile=E:\jasperFont\Arial-Narrow-Italic.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow-Italic -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=E:\jasperFont\Arial-Narrow.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true

#For Linux
-------------------------------------------------
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/Arial.jar   -DgroupId=com.mysoft.report-font -DartifactId=Arial -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/lockman/snap/skype/common/Nikosh.jar   -DgroupId=com.mysoft.report-font -DartifactId=Nikosh -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/imran/LIBRARY_AND_JAR/ReportFont/Arial-Narrow.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/Arial-Narrow-Italic.jar   -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow-Italic -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/imran/LIBRARY_AND_JAR/ReportFont/segoeui.jar -DgroupId=com.mysoft.report-font -DartifactId=segoeui -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/Desktop/odbcjar/ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/segoeui.jar   -DgroupId=com.mysoft.report-font -DartifactId=segoeui -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true



=>java -jar -DMYSQL_HOST=127.0.0.1 arif-travel-agency-0.0.1-SNAPSHOT.jar
=================================================
#  Maven                                          
================================================= 
mvn -v
mvn clean
mvn package
mvn spring-boot:run

=>mvn dependency:tree



=================================================
#                  GRADLE                                          
================================================= 

=>gradlew dependencies --configuration runtimeClasspath -q
Check class path dependencies 

=>gradle -version
=>gradle task
=>gradle task --all 



=>gradlew dependencies
=>gradlew dependencyInsight --dependency log4j-core
=>gradlew dependencyInsight --dependency log4j
=>./gradlew dependencyInsight --dependency log4j-core

=>gradlew dependencyInsight --dependency jaxb-core

Check Gradle dependencies jar version



<<<<<<< HEAD
# /etc/profile.d/gradle.sh
# export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin


Installed on Linux
---------------------------------------------------------------------------------------
=>sudo unzip -d /opt/gradle
=>ls /opt/gradle/gradle-7.0.2


=>sudo nano /etc/profile.d/gradle.sh
Add the following lines in the file:

export GRADLE_HOME=/opt/gradle/gradle-7.0.2
export PATH=${GRADLE_HOME}/bin:${PATH}

=>sudo chmod +x /etc/profile.d/gradle.sh
 Then give the /etc/profile.d/gradle.sh file execute permission using the command below:
 
 =>sudo chmod +x /etc/profile.d/gradle.sh
Now load the environment variables as follows:

=>source /etc/profile.d/gradle.sh
=>gradle -v


=======
Wapper
--------------------------------------------------
=>gradlew --version
=>gradlew init
=>gradlew.bat clean



implementation("org.springframework.boot:spring-boot-starter-web"){
	exclude group: 'com.fasterxml.jackson.core'
	exclude group: 'com.fasterxml.jackson.datatype'
	exclude group: 'com.fasterxml.jackson.module'
}
>>>>>>> 772383c1b636a083a7076735c8a615c7c9f73d05

=================================================
#  JENKING                                          
================================================= 
2fab04a40b4146beba38a3da5b9c9415

java -jar jenkins.war --httpPort=9999



@echo off
cd target 
java -jar spring-boot-simple-web-0.0.1-SNAPSHOT.jar
exit


=================================================
#  PYTHON                                          
================================================= 
=>python --version



=================================================
#  APP TESTING |  MEMORY CHECK                                          
================================================= 


view how much of memory consumption in spring boot app

Setup#1 Create spring boot app as .jar file and execute it using java -jar springboot-example.jar

Setup#1 Now open the CMD and type jconsole and hit enter.
=>jconsole

Setup#1 Note :- before opening the jconsole you need to run .jar file

Setup#1 Now you can see a window like below and it will appear application that previously ran in Local Process section.



=================================================
#  LOAD TESTING                                          
================================================= 

TPS=Transaction per second


AHUB 
-------------------------------------------------

AHUB = 25/PS


20 TPS testing for 1 minutes has been successful-Going for 40 TPS with 5 minutes now.
Please go with 30 TPS then 40