#################################################
#                 DEVOPS                        #
#################################################
https://www.youtube.com/watch?v=Wvf0mBNGjXY



The military sleep method is a deep muscle relaxation technique that the military has used for years to help troops fall asleep quickly. The six steps to fall asleep in two minutes using the military method are:
  Get into a comfortable position, either lying down or sitting up.
  Relax your face, including the muscles inside your mouth.
  Drop your shoulders to release tension.
  Take a deep breath and relax your chest.
  Relax each leg in turn.
  Clear your mind of any stresses.


First, relax your face. Start with your forehead, then your eyes, your cheeks, and your jaw, while focusing on your breathing.
Drop your shoulders as low as you can. Make sure you release any tension and keep your arms loose at your side including your hands and fingers. Imagine there's a warm sensation traveling from your head all the way down to your fingertips. Move down one arm at a time, relaxing each section as you go and keeping your breathing slow and steady.
Take a deep breath and relax your chest. Slowly inhale and exhale moving down to your stomach.
Relax each leg in turn. Imagine a warm sensation working its way down your thighs, knees, legs, feet, and all the way to your toes.
Clear your mind of any stresses. Think of one of these scenarios: (1) You're lying in a canoe on a calm lake with nothing but clear blue sky above you. (2) You're lying in a black velvet hammock in a pitch black room.
Repeat these words in your mind. If you get distracted (which is natural), repeat, “Don't think,” in your head for 10 seconds.
Apparently, after six solid weeks of practice, this will work for 96% of people who try the technique.





select * from information_schema.processlist where Command='Sleep'


=>kubectl run pod1 --image=imranmadbar/nginx && sleep 2 && kubectl exec -it pod1 -- bash
=>echo -e "Welcome to nginx! \nHost Name: $(hostname -f)\nHost IP: $(hostname -i)">/usr/share/nginx/html/index.html
=================================================
#                  Basic                                          
================================================= 

=>nslookup someDomain.nets
Fine ip of domain

DnsaddLinux
=>vi /etc/hosts
Add local dns record
as:
192.156.1.2 gitlab.madbarsoft.net

DnsaddWindows:
Edit: C:\Windows\System32\drivers\etc\hosts


=>route -n 
Check the route path

=>apt-get install iputils-ping
Install ping

=>apt install net-tools
Install netstat

=>apt-get update && apt-get install iputils-ping && apt install net-tools -y

--module-path C:\Z_MY_COMPUTER\Software\javafx18\lib 
--add-modules=javafx.controls,javafx.fxml



=>dd if=/dev/zero of=bigfile.txt bs=1M count=500
=>du -sh bigfile.txt
Create a file with size of 5MB

=>df -h .
Show current space free memory size

=>tail -n 10000 nohup.out | grep -a20 'PrematureCloseException'
=>more fileName 
=>more +/'no live' error.log.260624
Read file page by page


=================================================
#Linux | DEPLOYMENT                                          
=================================================
=>curl -4 icanhazip.com
Get your public ip

=>ssh imran@192.168.1.5
=>mv pappjar pappjar_23032022
=>scp papp.jar imran@192.168.1.5:/home/imran/appService
=>scp student-service-1.0.0.RELEASE.jar imran@192.168.1.2:/home/imran/appService


=>scp -r /home/imran/blPROJECT/deploymentProcess  imran@192.168.1.514:/home/imran/mySimpleFolder
Copying Directories to remote machine

=>scp  -r imran@192.168.1.514:/home/imran/mySimpleFolder /home/imran/blPROJECT/deploymentProcess
Copying directories from remote machine to local machine




=>java -jar student-service-1.0.0.RELEASE.jar --CONFIG_SERVER=configserver:http://192.168.1.2:9091 --eureka.client.serviceUrl.defaultZone=http://192.168.1.2:9092/eureka/
=>java -jar student-service-1.0.0.RELEASE.jar --server.port=8888 --CONFIG_SERVER=configserver:http://localhost:8080

=>java -jar zipkin-server-2.23.15-exec.jar --server.port=9410 --zipkin.storage.type=cassandra3 --zipkin.storage.cassandra3.ensure-schema=true --zipkin.storage.cassandra3.contact-points=localhost:9042 --zipkin.storage.cassandra3.username=imran --zipkin.storage.cassandra3.password=123456 --zipkin.storage.cassandra3.keyspace=spring_boot_keyspc







=================================================
#mysql                              
=================================================
=>mysql -uroot -p
=>mysql --host=127.0.0.1 --port=3307 -u root
=>mysql -h 192.168.8.1 -p 6787 -u dbuser -p

#Current User
----------------
select user();

Check user
=>SELECT host, user FROM mysql.user;

UserLogin
-----------
=>mysql -uroot -p 

show databases;
use databaseName;
show tables;
describe tableName;
select * from tableName;


SHOW VARIABLES LIKE 'HOSTNAME';     -- Returns: MyHostName
SHOW VARIABLES LIKE 'BIND_ADDRESS'; -- Returns: 127.0.0.1



Bangla character issue:
ALTER TABLE openapi_otp_service MODIFY COLUMN otp_sms VARCHAR(255)  
    CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL;
	



=================================================
# WiFi                              
================================================= 
List all wireless network profiles: 
=>netsh wlan show profiles
=>netsh wlan show profile name="Profile_Name" key=clear
=>netsh wlan show profile "Sales Dept Network" key=clear | findstr Key





=================================================
# Nexus | Sonatype Nexus Repository Manager                            
================================================= 
.\nexus.exe /run


Upload artifact to nexus:
-------------------------------------------------
Modify pom.xml with repo location
Modify setting.xml with permission
=>mvn deploy

Dwonload artifact to nexus:
-------------------------------------------------
Modify pom.xml with dependent lib which you want to download
Modify setting.xml with mirrors
=>mvn compile | test | install



https://repo.maven.apache.org/maven2/

Create repository with Maven hosted
=>http://localhost:8081/repository/imranmadbar/
Create repository with Maven shapshort
=>http://localhost:8081/repository/imranmadbar-snapshot/
Create repository with Maven proxy
=>http://localhost:8081/repository/imranmadbar-proxy/
Create repository with Maven group
=>http://localhost:8081/repository/imran-group/





=================================================
# SSL/TLS | ssl | tls  | https                             
=================================================

ExamplePEM (.crt, .key, .csr and .p12 ): 
=>openssl req -new -newkey rsa:2048 -nodes -keyout myapp.key -out myapp.csr -subj "/C=bd/ST=Dhaka/L=Gulshan/O=MadbarSoft/OU=Software/CN=madbarsoft.com"
=>openssl req -new -newkey rsa:2048 -nodes -keyout myapp.key -out myapp.csr -subj "/C=bd/ST=Dhaka/L=Gulshan/O=MadbarSoft/OU=Software/CN=localhost"
=>openssl req -new -newkey rsa:2048 -nodes -keyout myapp.key -out myapp.csr -subj "/C=bd/ST=Dhaka/L=Gulshan/O=MadbarSoft/OU=Software/CN=192.168.1.5"
=>openssl req -new -newkey rsa:2048 -nodes -keyout myapp.key -out myapp.csr -config openssl.cnf

=>openssl x509 -req -in myapp.csr -signkey myapp.key -out myapp.crt -days 365
=>openssl x509 -req -in myapp.csr -signkey myapp.key -out myapp.crt -days 365 -extfile openssl.cnf -extensions req_ext

=>openssl pkcs12 -export -in myapp.crt -inkey myapp.key -out myapp.p12 -name myapp -CAfile myapp.crt -caname root -password pass:12345



curl --cacert /home/bs960/imranMadbar/tempOps/myapp.crt https://192.168.1.5:8282/
curl --cacert /home/bs960/imranMadbar/tempOps/myapp.crt https://localhost:8282/
curl --cacert /home/bs960/imranMadbar/tempOps/myapp.crt https://madbarsoft.com:8282/



=>sudo cp myapp.crt /usr/local/share/ca-certificates/
=>sudo update-ca-certificates
Add the Self-Signed Certificate to the Trusted CA Store (Secure) in Unbuntu



openssl x509 -text -noout -in myapp.crt
openssl s_client -showcerts -connect  192.168.1.5:8282 </dev/null
Server and client cert info



cat openssl.cnf
[ req ]
distinguished_name = req_distinguished_name
req_extensions = req_ext
prompt = no

[ req_distinguished_name ]
C = bd
ST = Dhaka
L = Gulshan
O = GoroSoft
OU = Software
CN = 192.168.1.5

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
IP.1 = 192.168.1.5
DNS.1 = localhost
DNS.2 = madbarsoft.com





Self-signed Ceftificated | ssl | tls
=================================================
When you access a public website like https://www.google.com, you don't need to provide a certificate because:
Google, like most public websites, uses a certificate issued by a globally recognized Certificate Authority (CA) 
that is trusted by all major web browsers and operating systems.

But

Private or Self-Signed Certificates:
The server at https://192.168.1.1:9090 likely uses a certificate that is either self-signed or issued by a 
private CA that is not recognized by your system's default trust store. it requires you to provide the necessary certificate manually to establish trust.



How To identify whether a server uses a public (globally trusted) 
certificate or a private (self-signed or private CA) certificate:
-------------------------------------------------
=>openssl s_client -connect <server-ip-or-domain>:<port> -showcerts

Inspect the Certificate: Look at the Issuer and Subject fields in the certificate details.
  Public Certificate:
    If the Issuer is a well-known CA (e.g., Let's Encrypt, DigiCert, GlobalSign), it’s a public certificate.
  Private Certificate:
    If the Issuer is the same as the Subject, it is likely a self-signed certificate.
    If the Issuer is an organization you recognize as internal or private, it may be issued by a private CA.

  Checking the Certificate Chain info:
    Public CA: The chain will usually include intermediate and root certificates from a well-known CA.
    Private CA or Self-Signed: The chain may only include the server's certificate itself, or the root CA may be an internal or unknown CA.



Verify Self-signed Ceftificated | Check Server Certificate
------------------------------------------------------------------
Step1: Get server certificate, and copy to a file (server.crt) and save it
      =>echo | openssl s_client -connect 10.13.48.90:7070 -showcerts

Step2:  Extract Subject and Issuer and Compare Subject and Issuer with each other
      =>openssl x509 -in server.crt -noout -subject -issuer
      =>openssl x509 -in my-client.crt -noout -subject -issuer

      Ensure They Match: The subject and issuer should match between the server certificate and your local .crt file if it is the correct CA certificate.
      If the issuer and subject of your local certificate (e.g., my-client.crt) do not match the server’s certificate, they are not intended to be used together for mutual authentication.


Step3:You can also Validate the public keys to ensure they match(Optional)
      Extract Public Key and Compare Public Key
    =>openssl x509 -in server.crt -pubkey -noout > server_pubkey.pem
    =>openssl x509 -in my-client.crt -pubkey -noout > local_pubkey.pem
    =>diff server_pubkey.pem local_pubkey.pem
    If there’s no output from diff, the public keys match.


Step4: Validate Certificate Key Pair
      =>openssl rsa -in my-key.key -pubout > key_pubkey.pem
      =>openssl x509 -in my-client.crt -pubkey -noout > cert_pubkey.pem
      =>diff key_pubkey.pem cert_pubkey.pem


Additional Debugging
  Verify Certificate Chain: Ensure the entire chain is properly trusted if multiple CA certificates are involved.
  Check Server Configuration: Verify the server’s SSL/TLS configuration to ensure it uses the expected certificates and keys.






JKS 
=============================================
=>keytool --help

Create a Trust Store:
=>keytool -importcert -file certificate.crt -alias mytrustedcert -keystore mytruststore.jks


java -Djavax.net.ssl.trustStore=path/to/mytruststore.jks -Djavax.net.ssl.trustStorePassword=truststorepassword -jar myapp.jar
use it ij java app


=>keytool -list -v -keystore myspringboot.jks
Show details 


=>keytool -export -keystore myapp-keystore.p12 -alias myapp -file myCertificate.crt
Extract an SSL certificate from a keystore


=>Set-ExecutionPolicy Unrestricted
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false












Nginx - enable https proxy:
------------------------------------------------

=>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout madbarsoft.key -out madbarsoft.crt
Create the Certificate using OpenSSL


=>sudo cp madbarsoft.crt /etc/ssl/certs/
=>sudo cp madbarsoft.key /etc/ssl/certs/
Copy the Certificate Key Pair to the Certificates folder on Ubuntu

Nginx-Proxy server config:

server {

    listen 9292 ssl;
    server_name madbarsoft.com;  # Replace with your domain

    ssl_certificate /etc/ssl/certs/madbarsoft.crt;
    ssl_certificate_key /etc/ssl/certs/madbarsoft.key;
    
  location / {
      proxy_pass http://localhost:8282;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
  }
}



application http to https (ssl implementation)
------------------------------------------------
There are three main steps:
  1) Generate a certificate file that can be imported and leveraged for the end-to-end communication.
  2) Configure Spring Boot to use SSL and leverage the certificate generated.
  3) Configure the channels to verify the SSL connection.


Way02: | .jks
=================
keytool -genkeypair -alias spapp1 -keyalg RSA -keysize 4096 -storetype JKS -keystore myspringboot.jks -validity 3650 -storepass appsecpass -dname "C=Bangladesh, ST=Badda, L=Dhaka, O=madbarsoft.com, OU=YourUnit, CN=MD IMRAN HOSSAIN" -ext "SAN=dns:madbarsoft.com"

=>keytool -list -v -keystore myspringboot.jks
verify jks file


=>keytool -importkeystore -srckeystore myspringboot.jks -destkeystore springboot.p12 -deststoretype pkcs12
Convert a JKS keystore into PKCS12


=>keytool -exportcert -alias myspringbootapp -keystore myspringboot.jks -storepass 123455 -keypass apppass -file myspringboot.cer
Export certificate



Way01: | .p12
=================
Generate Keys and Certificates using keytool:

=>keytool -genkeypair -alias myapp -keystore myapp-keystore.p12 -keypass secret -storeType PKCS12 -storepass secret -keyalg RSA -keysize 2048 -validity 365 -dname "C=Bangladesh, ST=Badda, L=Dhaka, O=madbarsoft.com, OU=YourUnit, CN=imran hossain" -ext "SAN=dns:madbarsoft.com"
  
  Desc:
  -genkeypair: This option specifies that the keytool should generate a key pair (a public key and associated private key).
  -alias myapp: Specifies an alias for the key pair. The alias is a name that you will use to refer to this entry within the keystore.
  -keystore src/main/resources/myapp-keystore.p12: Specifies the name and location of the keystore file to be created. In this case, it is located at src/main/resources and named myapp-keystore.p12. The keystore file will be in PKCS12 format.
  -keypass secret: Specifies the password for the private key. In this case, it's set to "secret."
  -storeType PKCS12: Specifies the type of keystore to be created. PKCS12 is a widely used format for storing cryptographic objects.
  -storepass secret: Specifies the password for the keystore itself. In this case, it's set to "secret."
  -keyalg RSA: Specifies the key algorithm to be used, and in this case, it's RSA.
  -keysize 2048: Specifies the size of the key pair. In this case, it's set to 2048 bits.
  -validity 365: Specifies the validity period of the key pair in days. In this case, the key pair will be valid for 365 days.
  -dname "C=CountryName, ST=StateName, L=CityName, O=OrganizationName, OU=UnitName, CN=localhost": Specifies the Distinguished Name (DN) fields for the entity (in this case, the server). It includes information such as the country (C), state (ST), locality (L), organization (O), organizational unit (OU), and common name (CN).
  -ext "SAN=dns:localhost": Specifies the Subject Alternative Name (SAN) extension, which is used to specify additional host names for the certificate. In this case, it includes "dns:localhost" as a Subject Alternative Name.




=>keytool -list -v -keystore myspringboot.jks
In a Java KeyStore (JKS), there are different types of entries that serve different purposes. 
The two primary types are trustedCertEntry and PrivateKeyEntry. 

TrustedCertEntry:
  A trustedCertEntry contains only a public certificate, without the corresponding private key. 
  Client Verification: Clients use trusted certificates to verify the server's certificate chain during an SSL/TLS handshake.

PrivateKeyEntry:
  A PrivateKeyEntry contains a private key and the corresponding public certificate (and optionally the certificate chain). 
  This type of entry is essential for scenarios where the application needs to prove its identity or establish secure communication.











https - ssl/tls doc:
------------------------------------------------
How the Private Key is Used in SSL/TLS
  SSL/TLS Handshake:
    During the SSL/TLS handshake, the server presents its certificate (containing the public key) to the client.
    The client uses the public key to encrypt a piece of data (like a session key) and sends it to the server.
    The server uses its private key to decrypt this data, proving it owns the corresponding private key.

  Digital Signatures:
    The server uses its private key to sign a piece of data, such as a certificate or message.
    The client uses the public key to verify the signature, ensuring the data hasn’t been altered and confirming the server’s identity.



Exmaple for a nginx-ssl-https proxy config:
server {
    listen 9191 ssl;
    server_name your_domain.com;  # Replace with your domain

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-private.key;

    location / {
        proxy_pass http://localhost:8181;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}


Minimum Requirements for https - ssl/tls :
  Private Key(nginx-private.key):
      A private key is used by the server to decrypt data and create digital signatures to prove its identity.
  Public Certificate (nginx.crt):
      Contains the public key.
      Issued by a Certificate Authority (CA) if you are using a certificate from a trusted CA like Let's Encrypt, or it is self-signed if you created it yourself.
      Used by clients (browsers, etc.) to verify the server's identity.
      The certificate must be associated with the private key.






Key Components:
  Private Key and Certificate Pair:
    This pair can be stored in a KeyStore with a PrivateKeyEntry.
  KeyStore:
    A Java KeyStore (JKS) or PKCS12 file containing the private key and public certificate.


Additional Recommendations:
  Intermediate Certificates:

  If the certificate is issued by an intermediate CA, the intermediate certificates should be included in the certificate chain.
  Trusted Root Certificates:
  Clients should have a trust store containing the root certificates of trusted CAs to verify the server's certificate.

Generate a Key Pair and Self-Signed Certificate (if not using a CA):
  keytool -genkeypair -alias mykey -keyalg RSA -keysize 2048 -storetype JKS -keystore mykeystore.jks -validity 365






For HTTPS key and certificate management, the choice of file format (.pem, .p12, or .jks) depends on the specific server 
or application you are using and its requirements. 

Choosing the Right Format:
  .pem: Use for Apache, Nginx, and other similar servers. Good for direct use with many web servers.
  .p12: Use for transporting certificates and keys between different systems, or when importing into applications that support PKCS#12.
  .jks: Use for Java applications and servers like Tomcat. You may need to convert .pem or .p12 files to .jks for this purpose.

Choosing the appropriate format ensures compatibility and security in your HTTPS configuration.

The two most common formats used for keystores are JKS, a proprietary format specific for Java, and PKCS12, an industry-standard format. 


The primary purpose of .pem, .p12, and .jks file formats is for managing cryptographic keys and certificates, 
which are crucial for securing HTTPS communications. However, they are also used in other contexts where secure 
communication and authentication are needed. 

Converting .pem to .p12:
openssl pkcs12 -export -out keystore.p12 -inkey privatekey.pem -in certificate.pem -certfile intermediate.pem

Converting .p12 to .jks:
keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore keystore.jks -deststoretype JKS

Summary
  .pem: Used for a variety of security protocols including HTTPS, SSH, VPNs, and application security.
  .p12: Used for client authentication, email encryption, SSO, and mobile device security.
  .jks: Primarily used in Java applications and enterprise security systems.





HTTPS operates on port 443 by default.




Trust Stores:
-------------------------------------------------
Browsers and clients like Postman know about Certificate Authorities (CAs) and server certificates through a 
combination of pre-installed trusted root certificates and a verification process. Here’s the logic behind it:

1. Pre-installed Trusted Root Certificates:
Browsers and Operating Systems:

Web browsers (like Chrome, Firefox, Safari) and operating systems (like Windows, macOS, Linux) come with a 
pre-installed list of trusted root certificates.
These root certificates belong to trusted Certificate Authorities (CAs).
The list is maintained and updated by the browser and OS vendors.
Trust Chain:

When a browser or Postman connects to a server via HTTPS, it receives the server’s SSL/TLS certificate.
This certificate is part of a chain of certificates, starting from the server certificate to one or more intermediate 
certificates, and ending at a root certificate.
The browser or client checks if the root certificate is in its list of trusted root certificates.

Check Certificate Validity:
The client checks the validity of the server’s certificate, including:
Expiration date: Ensures the certificate is not expired.
Revocation status: Checks if the certificate has been revoked using methods like Certificate Revocation List (CRL) or Online 
Certificate Status Protocol (OCSP).
Domain name: Ensures the certificate’s domain matches the domain being accessed.





Why .pem Files are Important:
Multiple Items in One File: PEM files can contain multiple certificates (e.g., your certificate and intermediate certificates) 
and even keys, making it easier to manage.

like:
=>cat yourdomain.crt intermediate.crt > fullchain.pem

For HTTPS setup, you can use .crt files directly if your server supports them, but sometimes you might need to convert 
them to .pem format or combine them into a single PEM file for convenience and compatibility.



Example:
Apache Configuration:
  Apache can use .crt files directly if they are in PEM format:
  SSLCertificateFile /path/to/yourdomain.crt
  SSLCertificateKeyFile /path/to/yourdomain.key
  SSLCertificateChainFile /path/to/intermediate.crt

Nginx Configuration:
  Nginx might use a single .pem file that includes your certificate and intermediate certificates:
  ssl_certificate /path/to/fullchain.pem;    # fullchain.pem includes yourdomain.crt and intermediate.crt
  ssl_certificate_key /path/to/privkey.pem;  # privkey.pem is yourdomain.key




=================================================
#                  Window | batch | .bat                                          
=================================================

=>services.msc 

=>msinfo32
Cores in your CPU in RUN command

#CMD
================================================= 
=>cd C:\Z_MY_COMPUTER\PROJECT\BS23_BANGLALINK
=>date
=>cd\
=>d:
=>dir
=>mkdir

=>copy README.txt d:\http\temp
=>ren README.txt READLATER.txt
=>del READLATER.txt
=>del *.*
=>rmdir myNewFolder
=>color 0a


=>systeminfo
=>driverquery
Lists Installed Drivers and Hardware

=>ipconfig
Networking Information
=>tasklist

>echo %JAVA_HOME%
=>echo %CATALINA_HOME%
=>netstat
=>tracert google.com

=>wmic MEMORYCHIP get BankLabel, DeviceLocator, MemoryType, TypeDetail, Capacity, Speed
=>wmic memorychip list full
RAM details

=>wmic cpu get loadpercentage



#Batch
================================================= 
test.bat
Show sample Msg:
------------------------------------------------

@echo off
title This is your first batch script!
echo Welcome to batch scripting!
pause


Create folder:
------------------------------------------------
WAY1
====

@echo off

if not exist "MyFolder" (
	echo File creating ....!
	mkdir "MyFolder"
) else (
    echo Folder already exists!
)
pause

WAY2
====
@echo off
for /f "tokens=2 delims==" %%a in ('wmic OS Get localdatetime /value') do set "dt=%%a"
set "YY=%dt:~2,2%" & set "YYYY=%dt:~0,4%" & set "MM=%dt:~4,2%" & set "DD=%dt:~6,2%"
set "HH=%dt:~8,2%" & set "Min=%dt:~10,2%" & set "Sec=%dt:~12,2%"
set "fullstamp=%YYYY%_%MM%_%DD%_H%HH%M%Min%S%Sec%"

echo fullstamp: "%fullstamp%"
mkdir "%fullstamp%"
pause


@echo off 
cd target
java -jar spring-boot-simple-web-0.0.1-SNAPSHOT.jar
echo "Done,  application run successfully !"
exit

=================================================
#  JAVA                                          
================================================= 

echo %JAVA_HOME%

Extract the Jar
Jar -xvf webapp-1.0.0.SNAPSHOT.jar

=>javap -verbose SimpleClsFile.class | findstr "major"
Check current .class file version


=================================================
#GIT  | git                                         
================================================= 
Between <<<<<<< and ======= are local   (Accept Left). 
Between ======= and >>>>>>> are  remote (Accept Right).


git log --oneline --decorate | grep -i CR
Tract the merged List 

=>git branch -D branchName
Delete local branch



Git Clone 
---------
=>git clone link..
=>git clone -b apihubUpdV1 --single-branch [clone link]

=>git fetch origin apihubUpdV1:apihubUpdV1 && git checkout apihubUpdV1
Pull/Fetch specific branch for git

You can fetch all branches from all remotes like this:
git fetch --all

git branch -a - All branches.

git branch -r - Remote branches only.

git branch -l or git branch - Local branches only.

Check out, review, and merge locally
Step 1. Fetch and check out the branch for this merge request

git fetch origin
git checkout -b "main" "origin/main"
Step 2. Review the changes locally

Step 3. Merge the branch and fix any conflicts that come up

git fetch origin
git checkout "internDev"
git merge --no-ff "main"
Step 4. Push the result of the merge to GitLab

git push origin "internDev"


 =>git add pom.xml src
 
 
 
History check
--------------------------
=>git log --graph --pretty=format:"%C(yellow)%h%x09%Creset%C(cyan)%C(bold)%ad%Creset %C(green)%Creset %s" --date=short


=>git remote -v
=>git remote rm origin 
=>git remote add origin http://repo.banglalink.net:8181/open-api/openapi-discovery-eureka.git

=>git remote add origin http://repo.banglalink.net:8181/open-api/openapi-otp.git


================================================= 
Feign | feign
================================================= 



Properties (feign.httpclient):

timeToLive: 900
    The maximum time a connection may be reused, expressed in seconds (900 seconds or 15 minutes).

connectionTimerRepeat: 3000
    checks on the connection pool or related components
    The value 3000 indicates that the connection timer will trigger its task every 3000 milliseconds or every 3 seconds.


Feign default timetoLive is 900 Seconds. So If you want to close immediately after feign call, then change the 
timetolive value and timeToLiveUnit.

feign:
  httpclient:
    timeToLive: 30
#    timeToLiveUnit : MILLISECONDS






=================================================
#VisualVM | VisualVM                                     
================================================= 
Run from Intaller.




=================================================
#JMeter | jmeter | load testing                                          
================================================= 

=>sudo ./jmeter.sh
sudo /home/bs960/imranMadbar/softwareFile/apacheJmeter56/bin/jmeter.sh
Run jmeter
























=================================================
#Tomcat                                          
================================================= 

#Killing Port:
-------------------------------------------------
netstat -ano | findstr 8080
netstat -ano | findstr 3306
netstat -an | grep 80
taskkill /F /PID 2368

=> ./startup.sh 
=>sudo systemctl start tomcat.service
=>sudo systemctl status tomcat.service
=>sudo systemctl stop tomcat.service



Tomcat Install
=============================

Download Tomcat as tar stract it and Configure Server properties:
--------------------

Port:
sudo nano /opt/tomcat/conf/server.xml
<Connector port="8080" protocol="HTTP/1.1"
           connectionTimeout="20000"
           redirectPort="8443" />



Configure Users and Roles
sudo nano /opt/tomcat/conf/tomcat-users.xml
<role rolename="manager-gui"/>
<role rolename="admin-gui"/>
<user username="admin" password="password" roles="manager-gui,admin-gui"/>

Restrict Access to the Manager and Host Manager Apps:Comment out the Valve element
sudo nano /opt/tomcat/webapps/manager/META-INF/context.xml
<!--
<Valve className="org.apache.catalina.valves.RemoteAddrValve"
       allow="127\.\d+\.\d+\.\d+|::1" />
-->

sudo nano /opt/tomcat/webapps/host-manager/META-INF/context.xml
<!--
<Valve className="org.apache.catalina.valves.RemoteAddrValve"
       allow="127\.\d+\.\d+\.\d+|::1" />
-->

 
 
 
Start tomcat
cd /opt/tomcat
sudo ./bin/startup.sh
OR
create a service and:
sudo systemctl restart tomcat




#Config
-------------------------------------------------

In server.xml set server port
<Connector port="8585" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" />

In tomcat-users.xml set user
<role rolename="manager"/>
<role rolename="manager-gui"/>        
<role rolename="admin"/>
<role rolename="manager-script"/>
<user username="admin" password="admin" roles="admin,manager,manager-gui,manager-script" /> 


#Restart Tomcate Server
-------------------------------------------------
[root@cmhdbserver ~]# systemctl restart tomcat



#Tomcate Status
-------------------------------------------------
[root@cmhdbserver ~]# systemctl status tomcat



#Tomcat Log Out
-------------------------------------------------

[root@cmhdbserver ~]# tail -f /opt/tomcat/logs/catalina.out
OR
[root@rushmonodbserver logs]# cd /opt/tomcat9092/logs/
[root@rushmonodbserver logs]# tail -f catalina.out


#Tomcat Log Show in loca host
-------------------------------------------------

catalina.bat run



Tomcat default setting
-------------------------------------------------
By default, Tomcat in Spring Boot has a thread pool consisting of a maximum of 200 threads. 
Server. tomcat. max connections: The maximum number of connections, with a default size of 8192.
server.tomcat.accept-count：The length of the waiting queue, with a default size of 100。



Apache Bench
--------------------------------------------------
=>ab -s 3 -n 100 -c 10 http://localhost:80
=>ab -s0.100   http://localhost:9990/ping


Let’s try it by using Apache Bench to execute 1000 parallel requests:
ab -n 1000 -c 1000 http://localhost:8085/test



server properties
--------------------------------------------------
ref:
https://docs.spring.io/spring-boot/docs/2.0.9.RELEASE/reference/htmlsingle/#common-application-properties

server.tomcat.accept-count=100 # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
server.tomcat.additional-tld-skip-patterns= # Comma-separated list of additional patterns that match jars to ignore for TLD scanning.
server.tomcat.background-processor-delay=10s # Delay between the invocation of backgroundProcess methods. If a duration suffix is not specified, seconds will be used.
server.tomcat.basedir= # Tomcat base directory. If not specified, a temporary directory is used.
server.tomcat.max-connections=10000 # Maximum number of connections that the server accepts and processes at any given time.
server.tomcat.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.
server.tomcat.max-http-post-size=2097152 # Maximum size in bytes of the HTTP post content.
server.tomcat.max-threads=200 # Maximum amount of worker threads.
server.tomcat.min-spare-threads=10 # Minimum amount of worker threads.
server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.
server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named "X-Forwarded-Proto".
server.tomcat.protocol-header-https-value=https # Value of the protocol header indicating whether the incoming request uses SSL.
server.tomcat.redirect-context-root=true # Whether requests to the context root should be redirected by appending a / to the path.
server.tomcat.remote-ip-header= # Name of the HTTP header from which the remote IP is extracted. For instance, `X-FORWARDED-FOR`.
server.tomcat.resource.cache-ttl= # Time-to-live of the static resource cache.
server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.
server.tomcat.use-relative-redirects= # Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.


server.tomcat.threads.max=250




spring boot Tomcat log formate:
=================================================
application.yaml

server:
  tomcat:
    accesslog:
      buffered: false # Whether to buffer output such that it is flushed only periodically.
      enabled: true # Enable access log.
      file-date-format: .yyyy-MM-dd # Date format to place in the log file name.
      pattern: "[ACCESS]: %t %h  %A  %m %q %U \"%{Referer}i\" \"%{User-Agent}i\"  %S %b %s %D %T"# Format pattern for access logs.
      prefix: access_log # Log file name prefix.
      rename-on-rotate: true # Whether to defer inclusion of the date stamp in the file name until rotate time.
      request-attributes-enabled: true # Set request attributes for the IP address, Hostname, protocol, and port used for the request.
      rotate: true # Whether to enable access log rotation.
      suffix: .log # Log file name suffix.




[ACCESS]: [26/Jun/2024:23:56:34 +0600] 172.16.254.157  172.16.7.169  GET  /actuator/health "-" "ReactorNetty/1.0.19"  - 60 200 1 0.001
[ACCESS]: [26/Jun/2024:23:56:54 +0600] 172.16.254.157  172.16.7.169  GET  /actuator/health "-" "ReactorNetty/1.0.19"  - 60 200 2 0.002     
[ACCESS]: [26/Jun/2024:16:50:14 +0600] 172.16.254.157  172.16.7.169  GET  /actuator/health "-" "ReactorNetty/1.0.19"  - 60 200 1 0.001
[ACCESS]: [26/Jun/2024:16:50:34 +0600] 172.16.254.157  172.16.7.169  GET  /actuator/health "-" "ReactorNetty/1.0.19"  - 60 200 1 0.001
[ACCESS]: [26/Jun/2024:16:50:54 +0600] 172.16.254.157  172.16.7.169  GET  /actuator/health "-" "ReactorNetty/1.0.19"  - 60 200 1 0.001





=================================================
#Netty | 
=================================================

The spring.cloud.gateway.httpclient component is responsible for handling outgoing HTTP requests from the gateway 
to other services. It provides a customizable HTTP client implementation that allows you to configure things 
like connection timeouts, maximum connections per route, 
and SSL settings. This component is used when the gateway is acting as a client to other services.

The 'spring.cloud.gateway.httpserver' component, on the other hand, is responsible for handling incoming HTTP 
requests from clients and routing them to the appropriate backend services. 
It provides a customizable HTTP server implementation that allows you to configure things like server ports, 
SSL settings, and request/response filters. This component is used when the gateway is acting as a server to clients.



netty server has a default timeout of 10 seconds

Idle timeout of the Netty channel. When not specified, an infinite timeout is used.
    server.netty.idle-timeout

For Log:
------------------------------
spring:
  cloud:
    gateway:
      httpclient:
        wiretap: true
      httpserver:
        wiretap: true
io:
  netty:
    leakDetectionLevel: paranoid

logging:
  level:
    reactor:
      netty: DEBUG
      channel:
        FluxReceive: DEBUG



spring:
  cloud:
    gateway:
      httpclient:
        pool:
          max-connections: 500
          max-per-route-connections: 100
          connect-timeout: 5000
          max-in-memory-size: 5000000  | maximum request and response sizes 
          max-idle-time: 30000  | keep-alive settings to control how long persistent connections are kept alive:


server:
  port: 80

spring:
  application:
    name: spring-cloud-gateway-demo
  cloud:
    loadbalancer:
      retry:
        enabled: true
        max-retries-on-next-service-instance: 1
        max-retries-on-same-service-instance: 1
        avoid-previous-instance: false
        retryable-status-codes: 500, 501, 502, 503
        retry-on-all-operations: true
    gateway:
      httpclient:
        response-timeout: 3s
        connect-timeout: 2000
      default-filters:
        - StripPrefix=1
      routes:
        - id: spring-webflux-demo
          uri: lb://webflux-demo
          predicates:
            - "Path=/webflux-demo/**"
    discovery:
      client:
        simple:
          instances:
            webflux-demo:
              - uri: http://localhost:8080
              - uri: http://localhost:8081


spring:
  application:
    name: edge-gateway
  main:
    allow-bean-definition-overriding: true
  cloud:
    loadbalancer:
      retry:
        enabled: false
    gateway:
      httpclient:
        connect-timeout: 3000              # Socket connection timeout in milliseconds
        pool:
          max-connections: 1500            # Maximum allowed active connections in the pool
          max-per-route-connections: 500   # Maximum allowed active connections per route
          connect-timeout: 5000            # Connection timeout for acquiring a connection from the pool
          max-idle-time: 3000              # Maximum idle time for a connection in the pool in milliseconds
          type: FIXED                      # Connection pool type (fixed pool of max connections)
          metrics: true                    # Enable metrics for the connection pool
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true



           httpclient:
        connect-timeout: 10000              # Socket connection timeout in milliseconds
        pool:
          max-connections: 3000            # Maximum allowed active connections in the pool
          max-per-route-connections: 750   # Maximum allowed active connections per route
          connect-timeout: 5000            # Connection timeout for acquiring a connection from the pool
          max-idle-time: 3000              # Maximum idle time for a connection in the pool in milliseconds
          type: FIXED                      # Connection pool type (fixed pool of max connections)
          metrics: true                    # Enable metrics for the connection pool     

@Bean
@Primary
public HttpClientProperties overwrittenHttpClientProperties() {
HttpClientProperties p = new HttpClientProperties();
p.setConnectTimeout(1000);
p.setResponseTimeout(Duration.ofMillis(3000));
return p;
}



@Configuration(proxyBeanMethods = false)
public class MyReactorNettyClientConfiguration {

    @Bean
    ClientHttpConnector clientHttpConnector(ReactorResourceFactory resourceFactory) {
        HttpClient httpClient = HttpClient.create(resourceFactory.getConnectionProvider())
                .runOn(resourceFactory.getLoopResources())
                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 60000)
                .doOnConnected((connection) -> connection.addHandlerLast(new ReadTimeoutHandler(60)));
        return new ReactorClientHttpConnector(httpClient);
    }

}


@Bean
public NettyServerCustomizer nettyServerCustomizer() {
    return httpServer -> httpServer.tcpConfiguration(tcpServer -> {
        tcpServer = tcpServer.doOnConnection(conn -> conn
                .onReadIdle(300000, conn::dispose);
        return tcpServer;
    });
}



@Component
public class MyNettyReactiveWebServerCustomizer
                implements WebServerFactoryCustomizer<NettyReactiveWebServerFactory> {
	@Override
	public void customize(NettyReactiveWebServerFactory factory) {
		factory.addServerCustomizers(
                        builder -> builder.option(ChannelOption.SO_BACKLOG, 2000));
	}
}




=================================================
#  NGINX | nginx                                          
================================================= 
myng:
/etc/nginx/nginx.conf
/var/log/nginx/access.log
/var/log/nginx/error.log

=>nginx -v
=>sudo systemctl status nginx
=>sudo systemctl start nginx
=>sudo systemctl stop nginx
=>sudo systemctl reload nginx
=>sudo systemctl restart nginx


=>sudo systemctl enable nginx
=>sudo systemctl disable nginx
Nginx autho start ennable disable when system boot 

=>nginx -t
Check configuration is ok
=>start nginx
=>nginx -s stop	
=>nginx -s quit	
=>nginx -s reload	

=>ps -ef|grep nginx

=>nginx -s reopen	
Reopening log files

proxy_connect_timeout: Default is 60 seconds.
proxy_read_timeout: Default is 60 seconds.
proxy_ignore_client_abort on;


#Reverse Proxy
-------------------------------------------------
http {
	...........
	...........

	server {
		listen       8181;
		server_name  localhost;

	location / {
			proxy_pass   http://localhost:8080;
		}
	}

}

#Load Balancer
-------------------------------------------------

http {
	...........
	...........

	upstream upstreamGroup1 {
	server localhost:8081;
	server localhost:8082;
	}
	server {
		listen       8080;
		server_name  localhost;

	location / {
			proxy_pass   http://upstreamGroup1;
		}
	}
}

nginx.conf 
-------------------------------------------------------
Directives:
	user             nobody;
	error_log        logs/error.log notice;
	worker_processes 1;

Contexts:
	events – General connection processing
	http – HTTP traffic
	mail – Mail traffic
	stream – TCP and UDP traffic


Sample Configuration File with Multiple Contexts
------------------------------------------------
user nobody; # a directive in the 'main' context

events {
    # configuration of connection processing
}

http {
    # Configuration specific to HTTP and affecting all virtual servers  

    server {
        # configuration of HTTP virtual server 1       
        location /one {
            # configuration for processing URIs starting with '/one'
        }
        location /two {
            # configuration for processing URIs starting with '/two'
        }
    } 
    
    server {
        # configuration of HTTP virtual server 2
    }
}

stream {
    # Configuration specific to TCP/UDP and affecting all virtual servers
    server {
        # configuration of TCP virtual server 1 
    }
}


log_format  custom_logs  '$remote_addr - [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" $upstream_addr $upstream_response_time' " $request_time" " $request_id";



In nginx.conf file under http{} Block:
-------------------------------------------------------
  server { # simple reverse-proxy
    listen       80;
    server_name  domain2.com www.domain2.com;
    access_log   logs/domain2.access.log  main;

    # serve static files
    location ~ ^/(images|javascript|js|css|flash|media|static)/  {
      root    /var/www/virtual/big.server.com/htdocs;
      expires 30d;
    }

    # pass requests for dynamic content to rails/turbogears/zope, et al
    location / {
      proxy_pass      http://127.0.0.1:8080;
    }
  }

  upstream big_server_com {
    server 127.0.0.3:8000 weight=5;
    server 127.0.0.3:8001 weight=5;
    server 192.168.0.1:8000;
    server 192.168.0.1:8001;
  }

  server { # simple load balancing
    listen          80;
    server_name     big.server.com;
    access_log      logs/big.server.access.log main;

    location / {
      proxy_pass      http://big_server_com;
    }
  }





Windows CMD
---------------------------------------------------
=>wmic process where name='nginx.exe' delete
=>nginx.exe -s quit



MySql proxy
-------------------------------------------
stream {
    include stream.conf;
}


In stream.conf file on the same folder of nginx.conf write down this 
upstream galera_cluster {
    server 127.0.0.1:3306; #node1
    zone tcp_mem 64k;
}

server {
    listen 3366; # MySQL default
    proxy_pass galera_cluster;
}



Access log:
-------------------------------------------
Disable access log:
http {
	access_log off;
	error_log off;
}


Froward Header under http{} Block:
-------------------------------------------
server {
	listen       8282;
	server_name  localhost;

	location / {
			proxy_pass   http://localhost:8080;
			proxy_set_header X-Request-ID $request_id;

   
		}
}
	
	
Change default port:
---------------------------------------------
=>cat /etc/nginx/sites-enabled/default
=>vi /etc/nginx/sites-enabled/default 
Change port

=>sudo nginx -t
=>sudo service nginx reload







Install Nginx in Ubuntu:
---------------------------------------------
sudo apt update
sudo apt install nginx


=>sudo ufw app list
=>sudo ufw allow 'Nginx HTTP'
=>sudo ufw status

=>systemctl status nginx


=>sudo systemctl stop nginx
=>sudo systemctl start nginx
=>sudo systemctl restart nginx
=>sudo systemctl reload nginx
=>sudo systemctl disable nginx
=>sudo systemctl enable nginx





Default config for Ubuntu
=>cat /etc/nginx/sites-enabled/default





Some helpful commands:
---------------------------------------------
Reload NGINX: /app/nginx/sbin/nginx –s reload

Test NGINX conf: /app/nginx/sbin/nginx –t

Check log: tail –f access.log



MyCHdg
---------------------------------------------------
cat access.log | awk '$8==499{print $14}' | sort -nr | head
cat access.log | grep prepaid-balances | awk '$8==499{print $14}' | sort -nr | head
Response time by httpStatus code

cat access.log | grep prepaid-balances | awk '$8==499{print $14}' | sort -nr | tail -10
Response time MaxMin


cat access.log | grep prepaid-balances | awk '$8==499{print $12}' | sort | uniq -c | sort -nr
Which gateway from Generate this statuCode

cat access.log | grep prepaid-balances | awk '(($8==499)&&($12=="192.168.0.1:7081")){print $0}' | head
Get full request about the statusCode by SLB IP





DebugScript1:
-----------------------------------

=>tail -f access.log | grep -v '200'  | grep -v '202'
Filtering status code except 200 and 202 

=>cat access.log | awk '{print $(NF-2)}'
Printing only destination IP: 

=> cat access.log | awk '{print $(NF-2)}' | sort | uniq --count
Print destination IP count: 


=>cat access.log | grep –v '200'  | grep –v '202' | awk '{print $(NF-2)}' | sort | uniq --count
You can mix between these commands to achieve your goal. For example, you want to see which destination server is failing:


=>tail -f access.log | grep '254.194'


=>cat access.log | grep prepaid-balances | awk '$8==499{print $14}' | sort -nr | head
Response time by status code



DebugScript2:
-----------------------------------

=>tail -100000 ../logs/access.log | awk '{ print $8}'|sort |uniq --repeated --count
Print load balanced IPs and their count

=>tail -10000 access.log |awk '{print $12,$8}'|sort|uniq --repeated --count
Print load balanced IPs and their status count


=>tail -10000 /app/admin/Nginx_LB/logs/access.log | grep customer-information |awk '{ total += $14; count++ } END { print total/count }'
Average RTT

=>for (( i = 5; i >=0; i-- )) ; do grep $(date +%d/%b/%Y:%R -d "-$i min") /app/admin/Nginx_LB/logs/access.log; done| awk '{ print $8}'|sort |uniq --repeated --count
Last 5 minute request satus


=>grep prepaid access.log|tail -1000|awk '{ if ( $14 > .750 ) print $0 }'|wc -l
If RTT greater than:


=>for i in {1..20}; do curl -o /dev/null -s -w '%{http_code},%{time_namelookup},%{time_connect},%{time_pretransfer},%{time_starttransfer}, %{time_total}s\n' "http://10.74.10.10:443/api/v1/subscriptions/32286622/combined-usage-reports"  ; done
20 continuous calls to check DBSS API performance 

=>tail -1000 ../logs/access.log | grep prepaid|awk '{ if (max<$14){ max=$14 }}END {print max}'
Max RTT




Debug:
=> tail -f access.log | grep 53489776
=>tail -f access.log | grep -v "200"



nginx.conf for log
-------------------------------------------------
http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" $upstream_addr $upstream_response_time' " $request_time";
    access_log  /app/NginxFolder/logs/access.log   main;
}
	

The right way to set the timeouts
---------------------------------------------------------
If there are proxies on your setup such as a “Load balancer”, a Firewall, a CDN, etc, you should set the timeouts so that you timeout first your application server and then the other proxies to the user.

Example:

User → CDN → Nginx Load Balancer → Nginx application → Php_fpm

It’s recommended to set the timeouts like this:

n seconds to Php_fpm timeout.
Set the php.ini max_execution_time and
the request_terminate_timeout in your php_fpm config file.
n+1 seconds to Nginx application timeout.
Set the fastcgi_read_timeout in your nginx config.
n+2 seconds to timeout to Nginx Load Balancer
In your location doing the proxy_pass set the timeouts of:
proxy_connect_timeout
proxy_send_timeout
proxy_read_timeout
n+3 seconds of timeout for your CDN. NOTE: If you can’t set the timeouts of your CDN, then find what is its timeout and adjust the others according to it.
It provides a correct chain of timeouts: Setting an incremental chain of timeouts lets you find who is reaching the timeout.







================================================= 
#Nginx HA through Keepalived – Virtual IP vip
================================================= 
Keepalived uses the Virtual Router Redundancy Protocol (VRRP) to manage the VIP and perform failover between the servers.


=>which keepalived
=>ps aux | grep keepalived
=>systemctl cat keepalived
Check where from running keep alive



=>docker run -d --name slb1 --cap-add=NET_ADMIN --network mynet2 imranmadbar/nginx
Run docker host with permission

=>ip address add 192.168.0.50/24 dev eth0
Manually check add ip on net interface


=>sudo apt update
=>sudo apt install keepalived
=>sudo apt install libipset13
=>keepalived -v
Required install inside container



ProxyServer config
-------------------------------------------------
server {
listen       8282;
server_name  localhost;

location / {
    proxy_pass   http://172.18.0.2:80;
    proxy_set_header X-Request-ID $request_id;

  
  }
}


=>ip addr 
Show ip and Net interface
=>curl localhost:9090
Check Nginx running




Active Active FailoverConfig:
------------------------------------------------

root@3715d788b6a8:/etc/keepalived# cat keepalived.conf

vrrp_instance VI_1 {
  state MASTER
  interface eth0
  virtual_router_id 199
  priority 150
  advert_int 1
  unicast_src_ip 192.168.0.5
  unicast_peer {
    192.168.0.4
  }

  authentication {
    auth_type PASS
    auth_pass 12345
  }
  
  virtual_ipaddress {
    192.168.0.100/24 brd 192.168.0.255 dev eth0
  }
}





root@66aeff787855:/# cat /etc/keepalived/keepalived.conf

vrrp_instance VI_1 {
  state BACKUP
  interface eth0
  virtual_router_id 199
  priority 100
  advert_int 1
  unicast_src_ip 192.168.0.4
  unicast_peer {
    192.168.0.5
  }

  authentication {
    auth_type PASS
    auth_pass 12345
  }
  
  virtual_ipaddress {
    192.168.0.100/24 brd 192.168.0.255 dev eth0
  }

}


cd /etc/keepalived/
=>keepalived {start|stop|restart|reload|force-reload}
=>chmod 644 /bin/check_nginx.sh
=>chmod 644 /bin/keepalived.conf
=>service keepalived start
=>service keepalived force-reload
=>service keepalived restart
=>service keepalived start
=>service keepalived stop





=================================================
#Server Tuning | tuning                                         
================================================= 
ResponseHeader:
    connection: keep-alive, keep-alive
    keep-alive: timeout=60

getEmpEnfo1Fes1: <200 OK OK,[connection:"keep-alive", content-length:"48", content-type:"text/plain;charset=UTF-8", date:"Tue, 06 Feb 2024 01:17:51 GMT", keep-alive:"timeout=60"]>
This response keep alive this connection


Error:
    apr_socket_recv: Connection reset by peer (104)

Cos: Limit number of server Connection:
    tomcat:
        maxConnections: 100


proxy_ignore_client_abort on;
When set to on, proxy_ignore_client_abort allows Nginx to continue processing the request and sending 
it to the upstream server even if the client terminates the connection prematurely.



curl:
-------------------------------------------------
curl http://localhost:9993/fesxn?del=100000

zhaquezikZM m n 



EdgeGatewway-Noerror
-----------------------------------------------
spring:
  main:
    allow-bean-definition-overriding: true
  cloud:
    loadbalancer:
      retry:
        enabled: false
    gateway:
      httpclient:
        pool:
          type: fixed
          maxIdleTime: 5000
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
ribbon:
  ReadTimeout: 15000
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:7282/eureka/



httpClientProperties: {
prefix: "spring.cloud.gateway.httpclient",
properties: {
proxy: {
type: "HTTP"
},
websocket: {
proxyPing: true
},
wiretap: false,
pool: {
type: "FIXED",
name: "proxy",
maxConnections: 16,
acquireTimeout: 45000,
maxIdleTime: "PT5S",
evictionInterval: "PT0S",
metrics: false
},






=================================================
#  APP TESTING |  MEMORY CHECK | jvm                                          
================================================= 
















view how much of memory consumption in spring boot app

Setup#1 Create spring boot app as .jar file and execute it using java -jar springboot-example.jar

Setup#1 Now open the CMD and type jconsole and hit enter.
=>jconsole

Setup#1 Note :- before opening the jconsole you need to run .jar file

Setup#1 Now you can see a window like below and it will appear application that previously ran in Local Process section.



=================================================
#  LOAD TESTING                                          
================================================= 

TPS=Transaction per second


AHUB 
-------------------------------------------------

AHUB = 25/PS


20 TPS testing for 1 minutes has been successful-Going for 40 TPS with 5 minutes now.
Please go with 30 TPS then 40




=================================================
# Firewall | Windows                                          
================================================= 
=>nslookup www.google.com
Get IP address
=>control firewall.cpl
Open firewall

=>netstat -a -n


Block any IP Address
-------------------------------------------------

In Windows Defender Firewall: 
=>Advanced Settings > Inbound Rules > New Rule > Custom. Add Ibbound, Outbound Rules.









=================================================
#CURL   | Telnet | connection testing                                   
=================================================


curl -XPOST -d "" http://172.16.254.122:8080/myservice
Post Call

curl https://www.cyberciti.biz/files/sticker/sticker_book.pdf --output output.pdf



curl --location --request POST 'http://localhost:8080/auth/token' --header 'client_id: e828a561ac324ae1b4f7c2be757c24a9' --header 'Content-Type: application/json' --data-raw '{"email": "zhaque@banglalink.net", "password": "asdfasdf", "grant_type": "client_credentials"}'



Telnet
-----------------------------------------------------
=>telnet 192.168.8.132 6600


=>curl -vvv telnet://172.16.10.224:13146
Check Connecton




=================================================
# Network | tcpdump  | tcp dump | udp | http                                        
================================================= 
https://www.youtube.com/watch?v=A0FUxfiYJ3s
tcp state model

sudo apt install tshark
Analysis tools  


tshark -T fields -e ip.src -e ip.dst -r capture.pcap 
tshark -r capture.pcap -q -z conv,eth -z conv,ip -z conv,tcp





#http | connection | sockets | HTTP                
================================================= 

ss -ta 
ss -ta | grep CLOSE-WAIT
ss -tap | grep CLOSE-WAIT
ss -tap state CLOSE-WAIT
OR
netstat -an 1
netstat -an 1 | find "xxx.xxx.62.89"
Show the connection in local,remote and process id 

sudo lsof -i -n -P | grep <PID>
Check socket status by processId

netstat -an|grep ESTABLISHED | grep -w 8181
find Socat with port


=>netstat -an | awk '{print $5"-"$6}' | sort | uniq --repeated --count
display network-related information. 
The options used are:
-a: Show both listening and non-listening sockets.
-n: Show numerical addresses (do not resolve hostnames).

=>netstat -ant |grep CLOSE_WAIT | wc -l

=>lsof -i :portNumber
=>lsof -i :7082
Check which process/application make wait connection

=>ps -p 92669
=>ps -fC java17 | grep 92669
Then grep the pid for find the application



Apache HTTP server benchmarking tool  
-------------------------------------------------
=>ab -n 100 -c 10 https://www.google.com/

-n 100=>Number of request
-n 10=>Number of concurent request



#tcpdump analysis | tcp dump 
================================================= 
=>ip addr
wlo1: This is your wireless network interface.
tun0: This is a VPN interface.


=>tcpdump -i <interface> port <port>

=>tcpdump -D
Display available Net interfaces.

=>sudo tcpdump 
Start a capture

=>sudo tcpdump -i tun0
=>sudo tcpdump -i wlo1
Select an interface

=>sudo tcpdump -i any -c5 icmp
With number of packet and and protocol

=>sudo tcpdump -i any tcp
=>sudo tcpdump -i any tcp dst port 9191
Check localhost all tcp activity

=>sudo tcpdump -i tun0 dst port 9710
=>sudo tcpdump -i tun0 host 192.168.8.132
=>sudo tcpdump -i tun0 host 192.16.8.132 and port 9710 -vvv
Print dump wdith host and interface and port


=>tcpdump -i tun0 -A -s 0 host 192.16.8.132 and port 9710
Capture in info with requ/res hody header etc.




=>sudo tcpdump -i tun0 dst port 9710 -w capture.pcap
=>sudo tcpdump -i tun0 host 172.16.8.132 and port 9710 -w capture.pcap
=>tcpdump -r capture.pcap
Write to a file









Possible Network Issues identify from TCP dump:
----------------------------------------------------
Packet Loss:
            192.168.217.222.48620 > idp132.9710: Flags [P.], seq 1249:1457
            idp132.9710 > 192.168.217.222.48620: Flags [ACK], ack 1457
            192.168.217.222.48620 > idp132.9710: Flags [P.], seq 1249:1457  (repeated)
Explanation: If a packet or acknowledgment is lost, the sender will retransmit the packet, indicated by the same sequence number reappearing. This can suggest packet loss or delays.

High Latency:
            17:08:00.922606 IP 192.168.217.222.48620 > idp132.9710: Flags [P.], seq 1249:1457
            17:08:05.051876 IP idp132.9710 > 192.168.217.222.48620: Flags [P.], ack 1457
Explanation: If the time difference between a sent packet and its acknowledgment or response is significant (more than usual), 
it might indicate high network latency or congestion.

Out-of-Order Packets:
            192.168.217.222.48620 > idp132.9710: Flags [P.], seq 1457:1665
            192.168.217.222.48620 > idp132.9710: Flags [P.], seq 1249:1457  (out-of-order)
Explanation: If packets are received out of sequence, it can indicate issues with the network, such as load balancing problems or a congested route.

Duplicate Acknowledgments (Dup ACKs):
        17:08:00.922606 IP 192.168.217.222.48620 > idp132.9710: Flags [ACK], ack 1457
        17:08:00.923606 IP 192.168.217.222.48620 > idp132.9710: Flags [ACK], ack 1457  (duplicate)
Explanation: Duplicate ACKs usually indicate that the receiver is missing some data and is signaling the sender to 
retransmit the missing segment. This often points to packet loss.

TCP Retransmissions:
        192.168.217.222.48620 > idp132.9710: Flags [P.], seq 1249:1457
        192.168.217.222.48620 > idp132.9710: Flags [P.], seq 1249:1457  (retransmission)
Explanation: TCP retransmissions happen when a packet isn't acknowledged within the expected time. 
Retransmissions suggest network congestion, packet loss, or a problematic link.

TCP Window Size Reduction:
        win 501
        win 150  (window size decreased)
Explanation:  The window size in the TCP header decreases, often abruptly. 
A sudden reduction in the TCP window size can indicate that the receiving side is overwhelmed or congested, 
which might lead to communication delays.

SACK (Selective Acknowledgment):
        Signs: The use of SACK options indicates that certain packets were lost and that only specific segments are being acknowledged.
        sack 1 {1543:1795}
Explanation: SACK allows the receiver to inform the sender about all the segments that have been received successfully, allowing the sender to retransmit only the missing segments. Frequent use of SACK can indicate packet loss.


Communication Without Issues:
        Sequential ACKs: Every packet sent by the client is acknowledged in sequence without duplication or delay.

        No Retransmissions: There are no retransmissions, indicating that all packets are being delivered successfully.

        Stable Latency: The time intervals between packets are consistent and typical for the network's performance.

        Consistent Window Size: The TCP window size remains stable or grows as expected, showing that the receiver is 
        processing data without bottlenecks.




TCP Flags:
===============================================
Value	        Flag Type	     Description
S	            SYN	           Connection Start
F	            FIN	           Connection Finish
P	            PUSH	         Data push
R	            RST	           Connection reset
.	            ACK	           Acknowledgment



Exam1(unexpected behavior):
11:20:43.926491 IP BS-960.50300 > 192.168.8.132.9710: Flags [S], seq 2623079097, win 64240, options [mss 1460,sackOK,TS val 4239763764 ecr 0,nop,wscale 7], length 0
11:20:44.042601 IP 192.168.8.132.9710 > BS-960.50300: Flags [S.], seq 2254210938, ack 2623079098, win 28960, options [mss 1357,sackOK,TS val 1296118935 ecr 4239763764,nop,wscale 7], length 0
11:20:44.042662 IP BS-960.50300 > 192.168.8.132.9710: Flags [.], ack 1, win 502, options [nop,nop,TS val 4239763880 ecr 1296118935], length 0
11:20:44.042888 IP BS-960.50300 > 192.168.8.132.9710: Flags [P.], seq 1:416, ack 1, win 502, options [nop,nop,TS val 4239763880 ecr 1296118935], length 415
11:20:44.050804 IP 192.168.8.132.9710 > BS-960.50300: Flags [.], ack 416, win 235, options [nop,nop,TS val 1296119051 ecr 4239763880], length 0
11:20:44.144854 IP 192.168.8.132.9710 > BS-960.50300: Flags [P.], seq 1:960, ack 416, win 235, options [nop,nop,TS val 1296119071 ecr 4239763880], length 959
11:20:44.144898 IP BS-960.50300 > 192.168.8.132.9710: Flags [.], ack 960, win 501, options [nop,nop,TS val 4239763982 ecr 1296119071], length 0
11:20:44.144917 IP 192.168.8.132.9710 > BS-960.50300: Flags [P.], seq 960:965, ack 416, win 235, options [nop,nop,TS val 1296119071 ecr 4239763880], length 5
11:20:44.144924 IP BS-960.50300 > 192.168.8.132.9710: Flags [.], ack 965, win 501, options [nop,nop,TS val 4239763982 ecr 1296119071], length 0


Describe: TCP (Transmission Control Protocol) communication session between two hosts, BS-960 and 192.168.8.132, over port 9710. Let's analyze each line:

    11:20:43.926491: Host BS-960 initiates a TCP connection by sending a SYN packet (Flags [S]) to 192.168.8.132. The sequence number is 2623079097, and the window size is 64240. It also includes TCP options such as Maximum Segment Size (MSS), Selective Acknowledgment (SACK), Timestamp (TS), and Window Scale. The length of the packet is 0.

    11:20:44.042601: 192.168.8.132 responds with a SYN-ACK packet (Flags [S.]) indicating the start of a TCP connection. The sequence number is 2254210938, and it acknowledges the sequence number sent by BS-960. It also includes TCP options similar to the first packet. The length of the packet is 0.

    11:20:44.042662: BS-960 acknowledges the SYN-ACK packet by sending an ACK packet (Flags [.], ack 1). This acknowledges the receipt of the SYN-ACK packet from 192.168.8.132.

    11:20:44.042888: BS-960 sends a TCP packet with the PUSH (P) flag set, indicating that it has data to transmit. The sequence number ranges from 1 to 416, and it acknowledges the receipt of the SYN-ACK packet. The packet has a payload length of 415.

    11:20:44.050804: 192.168.8.132 acknowledges the receipt of data (ack 416) sent by BS-960.

    11:20:44.144854: 192.168.8.132 sends a TCP packet with data (Flags [P.]). The sequence number ranges from 1 to 960, and it acknowledges the data sent by BS-960. The packet has a payload length of 959.

    11:20:44.144898: BS-960 acknowledges the receipt of data (ack 960) sent by 192.168.8.132.

    11:20:44.144917: 192.168.8.132 sends another TCP packet with data, with a sequence number from 960 to 965. The packet has a payload length of 5.

    11:20:44.144924: BS-960 acknowledges the receipt of data (ack 965) sent by 192.168.8.132.






Exam2(unexpected behavior):
12:28:09.401273 IP6 ip6-localhost.42652 > ip6-localhost.9191: Flags [P.], seq 448:668, ack 413, win 512, options [nop,nop,TS val 3215550272 ecr 3215532681], length 220
12:28:10.223665 IP6 ip6-localhost.42652 > ip6-localhost.9191: Flags [F.], seq 668, ack 413, win 512, options [nop,nop,TS val 3215551094 ecr 3215550272], length 0
12:28:12.405290 IP6 ip6-localhost.42652 > ip6-localhost.9191: Flags [R], seq 3650415546, win 0, length 0

Sent with P flag indicating data push, seq 448-668, ack 413, win 512, length 220.
Sent with F flag to close connection, seq 668, ack 413, win 512, length 0.
Sent with R flag for abnormal termination, seq 3650415546, win 0, length 0.
The sequence number is 3650415546, but since the R flag is set, this sequence number doesn't have the usual meaning. 
The window size is 0, indicating that the sender can't accept any more data. 


In summary, the communication starts with data being sent (Flags [P.]), followed by a request to close 
the connection (Flags [F.]), and finally, an abnormal termination of the connection (Flags [R]). 





Capture Packets: sudo tcpdump -i <interface> -s 0 -w capture.pcap port 80

=>sudo tcpdump -i wlo1 -s 0 -w capture.pcap port 9191

-i wlo1: This option specifies the interface on which tcpdump should capture packets. 
In this case, wlo1 is the name of the network interface. The -i option stands for "interface".

-s 0: This option sets the snapshot length for the captured packets. 
A snapshot length of 0 means capturing the entire packet. By setting this to 0 (-s 0), tcpdump captures the full packet.

port 80: This is a filter expression that specifies which packets tcpdump should capture.
in this case captures packets that are either destined for or originating from port 80. 

-w capture.pcap: This option specifies the name of the file to which tcpdump should write the captured packets.


FlagDetails:
  S	SYN	Connection Start
  F	FIN	Connection Finish
  P	PUSH	Data push
  R	RST	Connection reset
  .	ACK	Acknowledgment







Other Communication Method
----------------------------------------------------
Java and JDBC communicates:
  The Java application communicates with the MySQL database using JDBC.
  JDBC internally uses the MySQL Connector/J driver.
  The communication between the Java application and the MySQL database server occurs over TCP/IP using the MySQL protocol.



TCP/IP:
  TCP/IP is the foundational protocol suite for internet communication, including TCP and UDP. HTTP operates over TCP and is used for web communication. UDP provides faster but less reliable communication compared to TCP and is used in scenarios where speed is prioritized over reliability. TCP ensures reliable, ordered communication between applications but incurs more overhead compared to UDP.


TCP/IP (Transmission Control Protocol/Internet Protocol):
  TCP/IP is the fundamental protocol suite used for communication on the internet and most computer networks.
  It provides a set of rules for data transmission between devices.
  TCP/IP includes several protocols, including IP (Internet Protocol) for routing packets and TCP (Transmission Control Protocol) for reliable, connection-oriented communication.

HTTP (Hypertext Transfer Protocol):
  HTTP is a protocol used for transmitting hypermedia documents, such as HTML, over the internet.
  It operates over TCP (Transmission Control Protocol), providing a reliable, connection-oriented communication channel.
  HTTP is primarily used for web browsing, where clients (such as web browsers) request resources from web servers.

UDP (User Datagram Protocol):
  UDP is a connectionless protocol that operates on top of the IP (Internet Protocol).
  It provides a way for applications to send datagrams to one another without establishing a connection first.
  UDP is faster and more lightweight than TCP but does not guarantee delivery or order of packets.

TCP (Transmission Control Protocol):
  TCP is a connection-oriented protocol that operates on top of the IP (Internet Protocol).
  It provides reliable, ordered, and error-checked delivery of data between applications.
  TCP establishes a connection between the sender and receiver before data exchange and ensures data integrity through mechanisms like acknowledgment and retransmission.





=================================================
#         Jar add on Class Path                                          
================================================= 
#For Windows
-------------------------------------------------
install:install-file -Dfile=E:\jasperFont\Arial-Narrow-Italic.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow-Italic -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=E:\jasperFont\Arial-Narrow.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true

#For Linux
-------------------------------------------------
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/Arial.jar   -DgroupId=com.mysoft.report-font -DartifactId=Arial -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/lockman/snap/skype/common/Nikosh.jar   -DgroupId=com.mysoft.report-font -DartifactId=Nikosh -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/imran/LIBRARY_AND_JAR/ReportFont/Arial-Narrow.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/Arial-Narrow-Italic.jar   -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow-Italic -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/imran/LIBRARY_AND_JAR/ReportFont/segoeui.jar -DgroupId=com.mysoft.report-font -DartifactId=segoeui -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/Desktop/odbcjar/ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/segoeui.jar   -DgroupId=com.mysoft.report-font -DartifactId=segoeui -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true



=>java -jar -DMYSQL_HOST=127.0.0.1 arif-travel-agency-0.0.1-SNAPSHOT.jar






=================================================
#Maven   | MAVEN                                        
================================================= 
mvn -v
mvn clean
mvn package
mvn spring-boot:run

=>mvn dependency:tree



StartProject:
------------------------------------------------
=>mvn archetype:generate -DgroupId=com.imranmadbar -DartifactId=simple-mavenapp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false


=>mvn archetype:generate -DgroupId=com.bharath -DartifactId=hellomaven -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
=>mvn archetype:generate -DgroupId=com.bharath -DartifactId=java-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
=>mvn archetype:generate -DgroupId=com.bharath -DartifactId=java-web-project -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
initProject in command line



JarOparation
------------------------------------------------
=>jar -tf myJar.jar
Show contain of the jar








=>java -XX:+PrintFlagsFinal -version | grep ThreadStackSize
In Linux:

=>java -XX:+PrintFlagsFinal -version | findstr ThreadStackSize
In Windows:

=>java -XX:+PrintFlagsFinal -version | grep HeapSize
Linux Hepsze
=>java -XX:+PrintFlagsFinal -version | findstr HeapSize
Windows heap size

In case your physical memory size is more than 192 megabytes then default maximum heap size is one fourth of the physical memory.



exclusions
-----------------------------------------------------------
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </exclusion>
    </exclusions>
</dependency>




=================================================
#                  GRADLE                                          
================================================= 

=>./gradlew dependencies
=>./gradlew clean build --refresh-dependencies
refresh the dependencies and download any missing dependencies

=>gradlew dependencies --configuration runtimeClasspath -q
Check class path dependencies 

=>gradle -version
=>gradle task
=>gradle task --all 



=>gradlew dependencies
=>gradlew dependencyInsight --dependency log4j-core
=>gradlew dependencyInsight --dependency log4j
=>./gradlew dependencyInsight --dependency log4j-core

=>gradlew dependencyInsight --dependency jaxb-core
Check Gradle dependencies jar version

# /etc/profile.d/gradle.sh
# export PATH=$PATH:/opt/gradle/gradle-7.4.1/bin


Remove local downloaded library:
-------------------------------------------------------
$ pwd
/home/bs960/.gradle/caches/modules-2/files-2.1/net.somedir.apihub
bs960@BS-960:~/.gradle/caches/modules-2/files-2.1/net.somedir.apihub$ sudo rm -R apihub-debugger-lib



Installed on Linux
---------------------------------------------------------------------------------------
=>sudo unzip -d /opt/gradle
=>ls /opt/gradle/gradle-7.0.2


=>sudo nano /etc/profile.d/gradle.sh
Add the following lines in the file:

export GRADLE_HOME=export PATH=$PATH:/opt/gradle/gradle-7.4.1
export PATH=${GRADLE_HOME}/bin:${PATH}

=>sudo chmod +x /etc/profile.d/gradle.sh
 Then give the /etc/profile.d/gradle.sh file execute permission using the command below:
 
 =>sudo chmod +x /etc/profile.d/gradle.sh
Now load the environment variables as follows:

=>source /etc/profile.d/gradle.sh
=>gradle -v



Wapper
--------------------------------------------------
Create a wapper using gradle:
=>gradle wrapper


GradleWapper allow you to run gradle task in your system without install gradle.
=>./gradlew -v
=>gradlew --version
=>gradlew init
=>gradlew.bat clean


Create a gradle project with out install Gradle, only using wapper:
 - Create a empty folder as project-name
 - Create  setting file inside the folder: settings.gradle.kts












=================================================
#jenkins |  JENKING  | jenkins                                        
================================================= 
By default, Jenkins' home directory is located at /var/lib/jenkins on Ubuntu systems.
Jenkins stores its data in its home directory.

=>systemctl status jenkins.service
=>systemctl stop jenkins
=>systemctl start jenkins
=>service jenkins restart

=>sudo nano /lib/systemd/system/jenkins.service
=>sudo systemctl daemon-reload
=>sudo systemctl restart jenkins.service
# check status by:
=>sudo systemctl status jenkins.service

For Change default port number








Build Maven Project
------------------------------------------------
Way1:
	echo "Test job jenkins"
	cd /home/imran/Downloads/dsd/simple-spring-mvnapp
	mvn clean
	mvn install



Run jer file
----------------------------------------------------
id
cd /opt/jenkins_WORKSHOP
echo "Application running............"
BUILD_ID=dontKillMe nohup java -jar spring-boot-simple-web.jar  >> nohup.out 2>&1&
echo "########################## RUN COMPLETED #############################"



Copy file to remote host: run jar
----------------------------------------------------
REMOTE_USER=admin
REMOTE_HOST=192.168.1.1
REMOTE_PATH=/app/archive/testApp
SOURCE_FILE=/opt/jenkins_WORKSHOP/spring-boot-simple-web.jar
scp -i /home/imran/.ssh/id_rsa $SOURCE_FILE $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH
ssh -i /home/imran/.ssh/id_rsa admin@192.168.2.2 "nohup java -jar /app/archive/testApp/spring-boot-simple-web.jar >> /app/archive/testApp/nohup.out 2>&1 &"


Parameterize buil Run
---------------------------------------------------
# Define variables
REMOTE_USER=admin
REMOTE_PATH=/app/archive/testApp
SOURCE_FILE=/opt/jenkins_WORKSHOP/$ARTIFACT.jar

scp -i /home/imran/.ssh/id_rsa $SOURCE_FILE $REMOTE_USER@$HOST_NAME:$REMOTE_PATH
ssh -i /home/imran/.ssh/id_rsa admin@$HOST_NAME "nohup java -jar /app/archive/testApp/$ARTIFACT.jar >> /app/archive/testApp/nohup.out 2>&1 &"



=>ngrok http 8080
NgRock Make any localhost available online for 5 MM



JenkinsPipeline
------------------------------------------------
TypeOfPipeline:
- Delivery TypeOfPipeline
- Build TypeOfPipeline
- Jenkins TypeOfPipeline
    - Script Jenkins Pipelione
	- Declarative Jenkins Pipelione




PipLineOne:
--------------------------------------------------
Run jar in background in hostmachine:
pipeline {
    agent any
    stages {
        stage("Start Building") {
            steps {
                echo "File copy......"
                sh 'scp -i /home/admin/.ssh/id_rsa /opt/jenkins_WORKSHOP/spring-boot-simple-web.jar admin@192.268.1.1:/app/archive/testApp/'
            }
        }
        
        stage("Build") {
            steps {
                script {
                    def remoteCommand = '''
                        cd /app/archive/testApp/
                        nohup java -jar spring-boot-simple-web.jar >> nohup.out 2>&1 &
                    '''
                        sh "ssh -i /home/admin/.ssh/id_rsa admin@192.268.1.1 '${remoteCommand}'"
                }
            }
        }
        
        stage("Deploy") {
            steps {
                echo "Deploy done!"
            }
        }
    }
}








uTutJenking
--------------------------------------------------

wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
yum install jenkins

service jenkins start
cat /var/lib/jenkins/secrets/initialAdminPassword
service jenkins start

yum remove jenkins
rm -rf /var/lib/jenkins
All jenking plugins and library in this folder, if you uninstall jening remove this or it will keep jening old info



Java Path:
/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.amzn2.0.1.x86_64

Maven Path:

/usr/share/maven

Git Path:

/usr/bin/git

Assign Root User and Permissions:

vi /etc/sysconfig/jenkins

chown -R root:root /var/lib/jenkins
chown -R root:root /var/cache/jenkins
chown -R root:root /var/log/jenkins

service jenkins restart


Tomcat Installation and Integration:

yum install tomcat

yum install tomcat-webapps tomcat-admin-webapps 

vi /usr/share/tomcat/conf/tomcat-users.xml

Uncomment Admin roles and user and Add:

<user username="deployer" password="deployer" roles="manager-script" />

Deploy war/ear to a container:

**/java-web-project.war





================================================= 
#Grafana| promtail | loki | prometheus
================================================= 

Grafana:
  Download: https://grafana.com/grafana/download

      Standalone Linux Binaries(64 Bit)SHA256:
      wget https://dl.grafana.com/enterprise/release/grafana-enterprise-10.3.1.linux-amd64.tar.gz
      tar -zxvf grafana-enterprise-10.3.1.linux-amd64.tar.gz

Loki-Promtail (Unzip this agenet):
  Download: https://github.com/grafana/loki/releases/
  Scroll down to the Assets section under the version that you want to install.

      loki-linux-amd64.zip
      promtail-linux-amd64.zip

Download configfile:
  https://github.com/grafana/loki/blob/main/clients/cmd/promtail/promtail-local-config.yaml
  https://raw.githubusercontent.com/grafana/loki/master/cmd/loki/loki-local-config.yaml

Download Prometheus:
wget https://github.com/prometheus/prometheus/releases/download/v2.47.0/prometheus-2.47.0.linux-amd64.tar.gz

Download Node Exporter:
wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz



Starting
-----------------------------------------
Start Grafana:
  ->cd /bin
      ./grafana-server
  http://localhost:3000/

=>ps aux | grep grafana-server


Start loki and Promtal with config:
  =>./loki-linux-amd64 -config.file=loki-local-config.yaml
  =>./promtail-linux-amd64 -config.file=promtail-local-config.yaml


Start Node Exporter:
./node_exporter &
http://localhost:9100/

=>ps aux | grep node_exporter


Start Prometheus:
./prometheus --config.file=prometheus.yml &
http://localhost:9090

=>ps aux | grep prometheus
=>pgrep prometheus
Check the Running Status



$ cat loki-local-config.yaml 
auth_enabled: false
server:
  http_listen_port: 3100
  grpc_listen_port: 9096

common:
  instance_addr: 127.0.0.1
  path_prefix: /tmp/loki
  storage:
    filesystem:
      chunks_directory: /tmp/loki/chunks
      rules_directory: /tmp/loki/rules
  replication_factor: 1
  ring:
    kvstore:
      store: inmemory

query_range:
  results_cache:
    cache:
      embedded_cache:
        enabled: true
        max_size_mb: 100

schema_config:
  configs:
    - from: 2020-10-24
      store: tsdb
      object_store: filesystem
      schema: v13
      index:
        prefix: index_
        period: 24h

ruler:
  alertmanager_url: http://localhost:909




$ cat promtail-local-config.yaml 
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://localhost:3100/loki/api/v1/push

scrape_configs:
- job_name: business-svc
  static_configs:
  - targets:
      - localhost
    labels:
      job: my-app-varlogs
      app: business-svc
      __path__: /var/log/nginx/*log
      stream: stdout
      
- job_name: nginx-error-log
  static_configs:
  - targets:
      - localhost
    labels:
      job: nginx-err-log
      slb: nginx-err-log
      __path__: /var/log/nginx/error.log



cat prometheus.yml
global:
  scrape_interval: 15s # How often to scrape targets

scrape_configs:
  - job_name: 'node_exporter' # Name of the job
    static_configs:
      - targets: ['localhost:9100'] # Target to scrape (Node Exporter)




Grafana-Dashboard
==========================================

Dashboard01: Pre-built Dashboards
------------------------------------------
CPU Usage:
Query: rate(node_cpu_seconds_total{mode!="idle"}[1m]) * 100

RAM Usage:
Query: node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes

Storage Usage:
Query: node_filesystem_size_bytes{fstype!~"tmpfs|fuse.lxcfs"} - node_filesystem_free_bytes{fstype!~"tmpfs|fuse.lxcfs"}



Dashboard02: Pre-built Dashboards
------------------------------------------
Pre-built Dashboards:
Grafana has a library of pre-built dashboards. You can import a Node Exporter dashboard by going to 
  Create > Import and using dashboard ID 1860.





Other Commands used firewall:
---------------------------------

sudo firewall-cmd --permanent --zone=public --add-port=3000/tcp
sudo firewall-cmd --permanent --zone=public --add-port=3100/tcp
sudo firewall-cmd --permanent --zone=public --add-port=9080/tcp

sudo firewall-cmd --reload







Doc:
==========================================

How it Works:
  Log Generation: An application generates log entries.
  Log Collection: Promtail running on the same machine beside application, collects these logs.
  Labeling: Promtail attaches labels (metadata) to the log entries. 
            Labels can include information like application name, environment, server, etc.
  Log Shipping: Promtail sends the labeled logs to Loki.
  Log Storage: Loki stores the logs and the labels.
  Log Querying: Grafana is used to query and visualize the logs stored in Loki. Users can filter and search logs using the labels.





Prometheus:
-----------------------------------------------
Prometheus Working for Metrics Operation and Loki working for logg aggregation.
Prometheus uses a text-based format for metrics, which is a simple key-value pair system with optional labels.


scrape_interval: 15s # How often to scrape targets
This interval determines how often Prometheus scrapes data from your application or any other targets.


cat prometheus.yml
global:
  scrape_interval: 15s # How often to scrape targets

scrape_configs:
  - job_name: 'node_exporter' # Name of the job
    static_configs:
      - targets: ['localhost:9100'] # Target to scrape (Node Exporter)
  - job_name: 'my_spring_boot_application'
    static_configs:
      - targets: ['localhost:8282']  # Adjust to your actual address and port

OR
scrape_configs:
  - job_name: 'my_application'
    static_configs:
      - targets: ['localhost:8282']
    metrics_path: '/app-metrics-v1'





A custom metrics using spring-app for Prometheus/Grafana:

    @GetMapping(value = "/metrics", produces = "text/plain")
    public void metrics(HttpServletResponse response) throws IOException {
      // Replace these with actual values from your application's logic
      boolean appReady = true; // Or whatever logic determines readiness
      int appHealth = 80; // Your app's health metric

      // Format the metrics in Prometheus text format
      String metricsData = String
          .format("# HELP app_ready Indicates if the application is ready (1 for true, 0 for false)\n"
              + "# TYPE app_ready gauge\n" + "app_ready %d\n\n"
              + "# HELP app_health Current health status of the application\n" + "# TYPE app_health gauge\n"
              + "app_health %d\n", appReady ? 1 : 0, appHealth);

      // Write the response
      response.getWriter().write(metricsData);
    }



Prometheus:
  if your primary goal is to monitor and alert based on system and application performance metrics. 
  It is ideal for real-time performance monitoring and alerting.

Loki:
   if you need to aggregate, store, and query logs from multiple sources, especially if you want to correlate 
   logs with metrics for troubleshooting and analysis.






=================================================
#  PYTHON                                          
================================================= 
=>python --version

FlaskServer:

import os
from flask import Flask
app = Flask(__name__)

@app.route('/home')
def hello():
		return 'I am good, how about you'
		
if __name__=="__main__":
	app.run()


Dockerfile:
FROM ubuntu:20.04
RUN apt-get update && apt-get install -y python-pip
RUN pip install flask
COPY myapp.py /app/
ENTRYPOINT FLASK_APP=/app/myapp.py flask run --host=0.0.0.0


#DownloadUdamy
-------------------------------------------------

=>pip install -r requirements.txt

=>python udemy-dl.py CourseUrl --sub-lang en

=>python udemy-dl.py https://www.udemy.com/course/aws-certified-solutions-architect-associate-saa-c02/learn --sub-lang en





=================================================
#Physical Maching |  Linux  | OS                                      
================================================= 

PhysicalMachine
	OS=>
		Kernal=>
			Namespaces=>
				USER - Multiple
				NET  - 1
				NMT	 - 1
				PMAP - 1
			
			Cgroup
				Manageing CPU and RAM to each process
				
		Capability
				Access of User
		
				
				
				
=================================================
#GitLab | git | gitlab                                       
================================================= 

StartGitLab server using docker:

#cat docker-compose.yml 
version: '3.8'

services:
  web:
    image: 'gitlab/gitlab-ce:latest'
    restart: always
    hostname: 'gitlab.banglalink.net'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.banglalink.net'
    ports:
      - '80:80'
    volumes:
      - '/app/gitlab/config:/etc/gitlab'
      - '/app/gitlab/logs:/var/log/gitlab'
      - '/app/gitlab/data:/var/opt/gitlab'
    networks:
      - gitlab

networks:
  gitlab:
    name: gitlab-network




=================================================
#CCNA | ccna| Cisco | Basic Networking                                         
================================================= 


Class A: The first bit always has to be 0.
Class B: The first 2 bits always have to be 10.
Class C: The first 3 bits always have to be 110.


Class A:        0.0.0.0   – 126.255.255.255
Class B:        128.0.0.0 – 191.255.255.255
Class C:        192.0.0.0 – 223.255.255.255


Private IP Ranges:
==================
Class A:        10.0.0.0/8      – 10.255.255.255
Class B:        172.16.0.0/12   – 172.31.255.255
Class C:        192.168.0.0/16  – 192.168.255.255



Class D, 224-239
For multicast addresses.
Class E, 240-255
Experimental.



DEFAULT SUBNET MASKS

Default Class A (N.H.H.H) mask: 255.0.0.0
Default Class B (N.N.H.H) mask: 255.255.0.0
Default Class C (N.N.N.H) mask: 255.255.255.0



#IPV4 ADDRESS CLASSES | ip | ipv4 | ip Address
-------------------------------------------------

No of subnets = 2^Subnetted bits.
No of Hosts per subnet = 2^no of non-subnetted bits.
Block Size = 256 - 





#CIDR | VariableLengthSubnetMask (VLSM) | vlsm  
-------------------------------------------------

ClassC:
=======
IP:         192.168.0.0/28
SubnetMask: 255.255.255.240

Subnet:     2^4 = 16
ValidHost: (2^4 - 2) = 14
BlockSize:  256 - 240 = 16


Subneting as below:
--------------------------------------------------
Subnet1=>   NetworkId	- 192.168.0.0
            FirstHost	- 192.168.0.1
			LastHost	- 192.168.0.14
			BroadCust	- 192.168.0.15

Subnet2=>   NetworkId	- 192.168.0.16
            FirstHost	- 192.168.0.17
			LastHost	- 192.168.0.30
			BroadCust	- 192.168.0.31 And so on...


Class C Subnetting chart:
----------------------------------------------------------------------------------------------------------------------------
CIDR                SubnetMask          NetworkBits     HostBits        Networks        BlockSizeORTotalHosts         ValidHosts
/24	                255.255.255.0	    0	            8	            1	                256	                        254
/25	                255.255.255.128	    1	            7	            2	                128	                        126
/26	                255.255.255.192	    2	            6	            4	                64	                        62
/27	                255.255.255.224	    3	            5	            8	                32	                        30
/28	                255.255.255.240	    4	            4	            16	                16	                        14
/29	                255.255.255.248	    5	            3	            32	                8	                        6
/30	                255.255.255.252	    6	            2	            64	                4	                        2


Class C Subnet Masks
---------------------------------------------------------------------------------------------
DecimalMask	       SubnetBits(s)	 HostBits(h)  NumberifSubnets=2s	NumberofHosts=2h-2
255.255.255.0	         0	            8	        0	                    254
255.255.255.128	         1	            7	        2	                    126
255.255.255.192	         2	            6	        4	                    62
255.255.255.224	         3	            5	        8	                    30
255.255.255.240	         4	            4	        16	                    14
255.255.255.248	         5	            3	        32	                    6
255.255.255.252	         6	            2	        64	                    2





ClassB:
=======
IP:         172.35.0.0/19
SubnetMask: 255.255.224.0

Subnet:     2^3 = 8
ValidHost: (2^13 - 2) = 8190


Subneting as below:
--------------------------------------------------
Subnet1=>   NetworkId	- 172.35.0.0 
            FirstHost	- 172.35.0.1 
			LastHost	- 172.35.30.255 
			BroadCust	- 172.35.31.255

Subnet2=>   NetworkId	- 172.35.32.0 
            FirstHost	- 172.35.32.1 
			LastHost	- 172.35.32.255 
			BroadCust	- 172.35.63.255

Class B Subnetting chart:
----------------------------------------------------------------------------------------------------------------------------
CIDR                SubnetMask          NetworkBits     HostBits        Networks        BlockSizeORTotalHosts         ValidHosts
/16	                255.255.0.0         0	            16	            1	                65536	                   65534
/17	                255.255.128.0	    1	            15	            2	                32768	                   32766
/18	                255.255.192.0	    2	            14	            4	                16384	                   16382
/19	                255.255.224.0	    3	            13	            8	                8192	                   8190
/20	                255.255.240.0	    4	            12	            16	                4096	                   4094
/21	                255.255.248.0	    5	            11	            32	                2048	                   2046
/22	                255.255.252.0	    6	            10	            64	                1024	                   1022
/23	                255.255.254.0	    7	            9	            128	                512	                       510
/24	                255.255.255.0	    8	            8	            256	                256	                       254
/25	                255.255.255.128	    9	            7	            512	                128	                       126
/26	                255.255.255.192	    10	            6	            1024	            64	                       62
/27	                255.255.255.224	    11	            5	            2048	            32	                       30
/28	                255.255.255.240	    12	            4	            4096	            16	                       14
/29	                255.255.255.248	    13	            3	            8192	            8	                       6
/30	                255.255.255.252	    14	            2	            16384	            4	                       2


Class B Subnet Masks
---------------------------------------------------------------------------------------------
DecimalMask	        SubnetBits(s)	HostBits(h)	   NumberifSubnets=2s	NumberofHosts=2h-2
255.255.0.0	            0	            16	            0	                    65,534
255.255.128.0	        1	            15	            2	                    32,766
255.255.192.0	        2	            14	            4	                    16,382
255.255.255.0	        8	            8	            256	                    254
255.255.255.128	        9	            7	            512	                    126
255.255.255.240	        12	            4	            4,096	                14
255.255.255.252	        14	            2	            16,384	                2





ClassA:
=======
IP:         10.128.240.48/30
SubnetMask: 255.255.255.252

Subnet:     2^2 = 4
ValidHost: (2^2 - 2) = 2


Subneting as below:
--------------------------------------------------
Subnet1=>   NetworkId	- 10.128.240.48 
            FirstHost	- 10.128.240.49  
			LastHost	- 10.128.240.50 
			BroadCust	- 10.128.240.51

Subnet2=>   NetworkId	- 10.128.240.52 
            FirstHost	- 10.128.240.53 
			LastHost	- 10.128.240.54 
			BroadCust	- 10.128.240.55
			
			
Class A Subnetting chart:
----------------------------------------------------------------------------------------------------------------------------
CIDR                SubnetMask          NetworkBits     HostBits        Networks        BlockSizeORTotalHosts         ValidHosts
/8	                255.0.0.0	        0	            24	            1	                16777216	            16777214
/9	                255.128.0.0	        1	            23	            2	                8388608	                8388606
/10	                255.192.0.0	        2	            22	            4	                4194304	                4194302
/11	                255.224.0.0	        3	            21	            8	                2097152	                2097150
/12	                255.240.0.0	        4	            20	            16	                1048576	                1048574
/13	                255.248.0.0	        5	            19	            32	                524288	                524286
/14	                255.252.0.0	        6	            18	            64	                262144	                262142
/15	                255.254.0.0	        7	            17	            128	                131072	                131070
/16	                255.255.0.0		    8	            16	            256                 65536	                65534
/17	                255.255.128.0	    9	            15	            512	                32768	                32766
/18	                255.255.192.0	    10	            14	            1024	            16384	                16382
/19	                255.255.224.0	    11	            13	            2048	            8192	                8190
/20	                255.255.240.0	    12	            12	            4096	            4096	                4094
/21	                255.255.248.0	    13	            11	            8192	            2048	                2046
/22	                255.255.252.0	    14	            10	            16384	            1024	                1022
/23	                255.255.254.0	    15	            9	            32768	            512	                    510
/24	                255.255.255.0	    16	            8	            65536	            256	                    254
/25	                255.255.255.128	    17	            7	            131072	            128	                    126 
/26	                255.255.255.192	    18	            6	            262144	            64	                    62
/27	                255.255.255.224	    19	            5	            524288	            32	                    30
/28	                255.255.255.240	    20	            4	            1048576	            16	                    14
/29	                255.255.255.248	    21	            3	            2097152	            8	                    6
/30	                255.255.255.252	    22	            2	            4194304	            4	                    2


Class A Subnet Masks
---------------------------------------------------------------------------------------------
DecimalMask	        SubnetBits(s)	HostBits(h)	   NumberifSubnets=2s	NumberofHosts=2h-2
255.0.0.0	            0	            24	                0	             16,777,214
255.128.0.0		        2	            23	                2                8,388,606
255.192.0.0		        4	            22	                4                4,194,302
255.255.255.0	        6553            8	                65,536	         254
255.255.255.192	        262144          7	                262,144          62
255.255.255.240	        104857          5	                1,048,576	     14
255.255.255.252	        4194304 	    3	                4,194,304	     2









#BitCounting
-------------------------------------------------
128	64	32	16	8	4	2	1
0	0	0	0	0	0	0	0



10000000 equates to 128 = 128

11000000 equates to 128 + 64 = 192

11100000 equates to 128 + 64 + 32 = 224

11110000 equates to 128 + 64 + 32 + 16 = 240

11111000 equates to 128 + 64 + 32 + 16 + 8 = 248

11111100 equates to 128 + 64 + 32 + 16 + 8 + 4 = 252

11111110 equates to 128 + 64 + 32 + 16 + 8 + 4 + 2 = 254

11111111 equates to 128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = 255