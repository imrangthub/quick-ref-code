#################################################
#                 DEVOPS                        #
#################################################
Fake Mail:
imranyop1@yopmail.com
imranyop2@yopmail.com
imranyop3@yopmail.com
imranyop4@yopmail.com
imranyop5@yopmail.com

=================================================
#                  Basic                                          
================================================= 

=>Set-ExecutionPolicy Unrestricted


-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false


=================================================
#                  Window | batch | .bat                                          
=================================================

=>services.msc 

#CMD
================================================= 
=>cd C:\Z_MY_COMPUTER\PROJECT\BS23_BANGLALINK
=>date
=>cd\
=>d:
=>dir
=>mkdir

=>copy README.txt d:\http\temp
=>ren README.txt READLATER.txt
=>del READLATER.txt
=>del *.*
=>rmdir myNewFolder
=>color 0a


=>systeminfo
=>driverquery
Lists Installed Drivers and Hardware

=>ipconfig
Networking Information
=>tasklist

>echo %JAVA_HOME%
=>echo %CATALINA_HOME%
=>netstat
=>tracert google.com

=>wmic MEMORYCHIP get BankLabel, DeviceLocator, MemoryType, TypeDetail, Capacity, Speed
=>wmic memorychip list full
RAM details

=>wmic cpu get loadpercentage



#Batch
================================================= 
test.bat
Show sample Msg:
------------------------------------------------

@echo off
title This is your first batch script!
echo Welcome to batch scripting!
pause


Create folder:
------------------------------------------------
WAY1
====

@echo off

if not exist "MyFolder" (
	echo File creating ....!
	mkdir "MyFolder"
) else (
    echo Folder already exists!
)
pause

WAY2
====
@echo off
for /f "tokens=2 delims==" %%a in ('wmic OS Get localdatetime /value') do set "dt=%%a"
set "YY=%dt:~2,2%" & set "YYYY=%dt:~0,4%" & set "MM=%dt:~4,2%" & set "DD=%dt:~6,2%"
set "HH=%dt:~8,2%" & set "Min=%dt:~10,2%" & set "Sec=%dt:~12,2%"
set "fullstamp=%YYYY%_%MM%_%DD%_H%HH%M%Min%S%Sec%"

echo fullstamp: "%fullstamp%"
mkdir "%fullstamp%"
pause


@echo off 
cd target
java -jar spring-boot-simple-web-0.0.1-SNAPSHOT.jar
echo "Done,  application run successfully !"
exit

=================================================
#  JAVA                                          
================================================= 

echo %JAVA_HOME%

Extract the Jar
Jar -xvf webapp-1.0.0.SNAPSHOT.jar

=================================================
#  GIT                                          
================================================= 


Git Clone 
---------
=>git clone link..
=>git clone -b internDev --single-branch [clone link]


You can fetch all branches from all remotes like this:
git fetch --all

git branch -a - All branches.

git branch -r - Remote branches only.

git branch -l or git branch - Local branches only.

Check out, review, and merge locally
Step 1. Fetch and check out the branch for this merge request

git fetch origin
git checkout -b "main" "origin/main"
Step 2. Review the changes locally

Step 3. Merge the branch and fix any conflicts that come up

git fetch origin
git checkout "internDev"
git merge --no-ff "main"
Step 4. Push the result of the merge to GitLab

git push origin "internDev"


 =>git add pom.xml src


=================================================
#  Tomcat                                          
================================================= 

#Killing Port:
-------------------------------------------------
netstat -ano | findstr 9410
netstat -ano | findstr 3306
taskkill /F /PID 2368





#Config
-------------------------------------------------

In server.xml set server port
<Connector port="8585" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" />

In tomcat-users.xml set user
<role rolename="manager"/>
<role rolename="manager-gui"/>        
<role rolename="admin"/>
<role rolename="manager-script"/>
<user username="admin" password="admin" roles="admin,manager,manager-gui,manager-script" /> 


#Restart Tomcate Server
-------------------------------------------------
[root@cmhdbserver ~]# systemctl restart tomcat



#Tomcate Status
-------------------------------------------------
[root@cmhdbserver ~]# systemctl status tomcat



#Tomcat Log Out
-------------------------------------------------

[root@cmhdbserver ~]# tail -f /opt/tomcat/logs/catalina.out
OR
[root@rushmonodbserver logs]# cd /opt/tomcat9092/logs/
[root@rushmonodbserver logs]# tail -f catalina.out


#Tomcat Log Show in loca host
-------------------------------------------------

catalina.bat run




=================================================
#         Jar add on Class Path                                          
================================================= 
#For Windows
-------------------------------------------------
install:install-file -Dfile=E:\jasperFont\Arial-Narrow-Italic.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow-Italic -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=E:\jasperFont\Arial-Narrow.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true

#For Linux
-------------------------------------------------
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/Arial.jar   -DgroupId=com.mysoft.report-font -DartifactId=Arial -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/lockman/snap/skype/common/Nikosh.jar   -DgroupId=com.mysoft.report-font -DartifactId=Nikosh -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/imran/LIBRARY_AND_JAR/ReportFont/Arial-Narrow.jar -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/Arial-Narrow-Italic.jar   -DgroupId=com.mysoft.report-font -DartifactId=Arial-Narrow-Italic -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true
install:install-file -Dfile=/home/imran/LIBRARY_AND_JAR/ReportFont/segoeui.jar -DgroupId=com.mysoft.report-font -DartifactId=segoeui -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/Desktop/odbcjar/ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0 -Dpackaging=jar -DgeneratePom=true
install:install-file -Dfile=/home/imran/JAR_LIBRARY/ReportFont/segoeui.jar   -DgroupId=com.mysoft.report-font -DartifactId=segoeui -Dversion=1.0.1 -Dpackaging=jar    -DgeneratePom=true




=================================================
#  Maven                                          
================================================= 
mvn -v
mvn clean
mvn package
mvn spring-boot:run

=>mvn dependency:tree



=================================================
#                  GRADLE                                          
================================================= 

=>gradle -version
=>gradle task
=>gradle task --all 



=>gradlew dependencyInsight --dependency log4j-core
=>gradlew dependencyInsight --dependency log4j
=>./gradlew dependencyInsight --dependency log4j-core

Check Gradle dependencies jar version


plugins {
    id "java"
    id "maven-publish"
    id "org.springframework.boot" version "2.1.7.RELEASE"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.5"
    id "com.diffplug.gradle.spotless" version "3.24.2"
    id "org.sonarqube" version "2.7.1" apply false
}

group = PROJECT_GROUP
version = PROJECT_VERSION
description = PROJECT_DESCRIPTION

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.encoding = "UTF-8"
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.encoding = "UTF-8"
    options.compilerArgs += "-parameters"
}

ext {
    googleJavaFormatVersion = '1.7'
}

repositories {
    maven {
        url REPOSITORY
        credentials {
            username = REPOSITORY_USERNAME
            password = REPOSITORY_PASSWORD
        }
    }
}



dependencies {

    compile('org.springframework.boot:spring-boot-starter-logging') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }

    implementation(
            "org.springframework.cloud:spring-cloud-starter-config",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.cloud:spring-cloud-starter-openfeign",
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client",
            "org.springframework.cloud:spring-cloud-starter-sleuth",
            "org.springframework.cloud:spring-cloud-starter-zipkin",
            "org.springframework.boot:spring-boot-starter-log4j2"
    )

    implementation(
            "io.springfox:springfox-swagger2",
            "io.springfox:springfox-swagger-ui",
            "org.projectlombok:lombok",
    )

    implementation('io.github.openfeign:feign-httpclient')

    runtimeOnly "mysql:mysql-connector-java"

    annotationProcessor("org.projectlombok:lombok")

    testImplementation("org.springframework.boot:spring-boot-starter-test")

    testAnnotationProcessor("org.projectlombok:lombok")
/*
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.6.1'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6.1'*/

// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j2
   /* compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '1.2.0.RELEASE'*/

   /* runtime('org.springframework.boot') { exclude module: 'slf4j-log4j12' }*/
}

spotless.java {
    googleJavaFormat(googleJavaFormatVersion)
}

tasks.withType(JavaCompile).configureEach { javaCompile ->
    dependsOn 'spotlessApply'
}

wrapper {
    gradleVersion = GRADLE_VERSION
    distributionUrl = WRAPPER_ROOT + "/${gradleVersion}/gradle-wrapper-${gradleVersion}-bin.zip"
}

idea.project.settings.delegateActions.delegateBuildRunToGradle = true

springBoot {
    buildInfo {
        properties {
            name = PROJECT_NAME
            additional = [
                    'x'      : 'xomidar',
                    'swagger': true
            ]
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}




=================================================
#  JENKING                                          
================================================= 
2fab04a40b4146beba38a3da5b9c9415

java -jar jenkins.war --httpPort=9999



@echo off
cd target 
java -jar spring-boot-simple-web-0.0.1-SNAPSHOT.jar
exit


=================================================
#  PYTHON                                          
================================================= 
=>python --version


