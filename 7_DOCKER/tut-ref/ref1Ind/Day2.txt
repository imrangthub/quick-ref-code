
Yest - Run a container.
Today - 
	We would consume
	We would troubleshoot
	We would do some ops.
======================================
Tomcat in Laptop ---
Tomcat in VMs ------
	Access Tomcat	-> http://5.5.6.7:8080
   22  clear
   23  clear
   24  docker run -d jenkins
   25  docker ps -a
   26  docker run -d -p 8080:8080 jenkins
   27  docker ps
   28  docker run -d -p 8080:8080 jenkins
   29  clear

	
	

run
====================================
pull --> create --> start --> become

run jenkins --> Become /bin/tini
run mysql ---> Become docker-entrypoint.sh


run -d
====================================
pull --> create --> start --> DO NOT become


Access Server where tomcat is running
		- SHELL.
================================================================================================
PHYSICAL SERVER IS RUNNING	VIRTUAL SERVER IS RUNNING	Container is RUNNING
ONLY 				ONLY				Only 
IF PID1 is running		IF PID1 is running		IF PID1 is running

PID1=SYSTEMD			PID1=SYSTEMD			PID1=ANYTHING	
	
Thus							
if "ANYTHING" is running - your container is running.


How to get inside a container?
- exec
	it would execute an executable INSIDE a container.
	BUT - with -it &&& shell - you can interact with a container

docker run -itd ubuntu

docker run ubuntu
docker run -d ubuntu
docker run -it ubuntu
docker run -itd ubuntu

- attach 
	it would attached to exec which is with PID1


How to come to container Safetly if SHELL IS there...
=================================================
Contrl + P+ Q


Lets play 
- jenkins	rootfs_userfs_appfs
- ubuntu	rootfs
==========================================================================
==========================================================================
https://www.devopsschool.com/tutorial/docker/commands/


  22  docker ps
   23  vi devopsschool.txt
   24  docker cp devopsschool.txt f20a6013e9a8:/opt
   25  docker exec f20a6013e9a8 ls /opt
   26  clear
   27  ls
   28  rm devopsschool.txt
   29  rm devopsschool.txt
   30  rm devopsschool.txt
   31  docker ps
   32  clear
   33  ls
   34  docker cp f20a6013e9a8:/opt/devopsschool.txt .
   35  ls
   36  more devopsschool.txt


diff
---------
added
changed
deleted
	since you created a container.

  36  more devopsschool.txt
   37  history
   38  clear
   39  docker ps -a
   40  clear
   41  docker ps
   42  docker attach f20a6013e9a8
   43  docker ps
   44  docker diff f20a6013e9a8
   45  history


 41  docker ps
   42  docker attach f20a6013e9a8
   43  docker ps
   44  docker diff f20a6013e9a8
   45  history
   46  clear
   47  docker ps
   48  docker port f20a6013e9a8
   49  docker run -d -p 8080:8080 jenkins
   50  docker ps
   51  docker port 6e1bd212b5a9
   52  history



Assignemnt
===============
update	Update configuration of one or more containers
wait	Block until one or more containers stop, then print their exit codes

https://www.devopsschool.com/tutorial/docker/commands/




 73  docker ps
   74  docker logs f697d28c5d62
   75  docker exec f697d28c5d62 ls
   76  docker logs f697d28c5d62
   77  clear
   78  docker logs f697d28c5d62
   79  clear
   80  docker ps
   81  docker logs 6e1bd212b5a9
   82  clear
   83  ls
   84  docker ps
   85  docker logs 29d9364f82e5
   86  clear
   87  clear
   88  docker stats
   89  docker stats f697d28c5d62
   90  docker ps
   91  ps -eaf | grep docker
   92  clear
   93  docker ps
   94  docker top f697d28c5d62
   95  clear
   96  docker events


===========================================

What is Image?
================================
image is collection of file system.

rootfs + userfs + appfs + appfs + appfs + appfs	== IMAGE
----------------------------------------------
ubuntu	ubuntu   java	  tomcat  appv1	appv1.1 == IMAGE
centos	centos	 java	  tomcat  appv1	appv1.1  == IMAGE

====================================================
Union mOunts
--------------

rootfs + appfs + appfs + appfs + appfs
======================================
basefs
		IMAGE
			Represent Last layer commited.


All layers of the image merged and create Writeable LAYER.
This writable layer is YOUR Container.
		Writeable LAYER
				Diff   === Would have only those files DELTA.
				Merged ======> You can see in the container.



 3  ls
    4  docker ps -a
    5  docker stop $(docker ps -a -q)
    6  docker rm $(docker ps -a -q)
    7  docker images
    8  docker rmi $(docker images -q)
    9  clear
   10  docker ps -a
   11  docker images
   12  cd /var/lib/docker/
   13  ls
   14  docker info
   15  clear
   16  ls
   17  cd overlay2
   18  s
   19  clear
   20  clear
   21  ls
   22  du -sh .
   23  docker pull ubuntu
   24  ls
   25  docker history ubuntu
   26  clear
   27  du -sh --max-depth=1
   28  du -s --max-depth=1
   29  du -h --max-depth=1
   30  cd ./d830c20d4baf7465e99a83214765c3504abb24b16fa5a03a32111021cef33f4c
   31  ls
   32  cd diff/
   33  clear
   34  ls
   35  cd ../..
   36  ls
   37  cd ebafc537f306230a4877692c00b638033694fbef0980466d3c40356b9f33ff8f
   38  ls
   39  cd diff/
   40  clar
   41  clear
   42  ls
   43  cd ..
   44  ls
   45  cd ..
   46  ls
   47  docker history
   48  docker history ubuntu
   49  docker inspect ubuntu
   50  clear
   51  ls
   52  clear
   53  ls
   54  docker run -itd ubuntu
   55  ls
   56  du -sh a81aa3a8dec7c0ecad815abe3572f6201bc0b9b739e7407d7efffb90d181a13b-init
   57  du -sh a81aa3a8dec7c0ecad815abe3572f6201bc0b9b739e7407d7efffb90d181a13b
   58  docker ps
   59  docker inspect f0b6cddf2b43
   60  clear
   61  ls
   62  cd a81aa3a8dec7c0ecad815abe3572f6201bc0b9b739e7407d7efffb90d181a13b
   63  ls
   64  df -kh
   65  docker
   66  clear
   67  docker ps
   68  docker stop f0b6cddf2b43
   69  df -kh
   70  ls
   71  docker start f0b6cddf2b43
   72  ls
   73  df -kh
   74  cler
   75  clear
   76  s
   77  ls
   78  cd diff/
   79  ls
   80  docker ps
   81  docker exec f0b6cddf2b43 touch /opt/rajesh1.txt
   82  cd ..
   83  ls
   84  cd ..
   85  lear
   86  clear
   87  pwd
   88  find . -name rajesh1.txt
   89  docker exec f0b6cddf2b43 touch /opt/rajesh2.txt
   90  find . -name rajesh*
   91  history
================================================================

How to create image?
============================
	i.e commit a top layer[container]
	or commit all layer from scratch
==============================================
Manual - using existing container

Automation - Using Dockerfile.


============================================
ubuntu -> java -> apache - git
	 -----------------------
		ONE LAYER
centos


 118  docker commit -m"up-git-ap-up" -a "rajesh" 73499b939778 up-git-ap-up
  119  docker ps
  120  clear
  121  dcoker images
  122  docker images
  123  docker history ubuntu
  124  docker history up-git-ap-up
  125  docker run -itd up-git-ap-up
  126  docker ps
  127  clear
  128  docker exec a227b040c1d5 git
  129  clear
  130  docker exec a227b040c1d5 java
  131  clear
  132  histry


Assignment - 
Download centos
install tomcat
install java
install git
copy some jar file to /opt/myapp
-----create a image.
=========================================================
How can i share a Images?
==================================
Using Tar ball
	- tar
  142  docker images
  143  docker save -o up-git-ap-up.tar up-git-ap-up
  144  ls
  145  docker ps
  146  docker stop a227b040c1d5 73499b939778 f0b6cddf2b43
  147  docker rma227b040c1d5 73499b939778 f0b6cddf2b43
  148  docker rm a227b040c1d5 73499b939778 f0b6cddf2b43
  149  clear
  150  docker images
  151  docker rmi up-git-ap-up
  152  docker images
  153  ls
  154  docker load -i up-git-ap-up.tar
  155  docker imates
  156  docker images

Using public repo
	- hub.docker.com
1. register a account at hub.docker.com
2. Login to hub.docker.com
3. create a public hub.docker.com
4. Match a repo name Local and Remote....[required]
5. docker login
6. docker push imagename

 157  history
  158  clear
  159  docker images
  160  docker tag up-git-ap-up devopsschools/onmobxyz
  161  docker images
  162  docker login
  163  clear
  164  docker push devopsschools/onmobxyz
  165  docker tag up-git-ap-up devopsschools/onmobxyz:v1
  166  docker push devopsschools/onmobxyz:v1
  167  history


Using pvt repo
	- artifactory
===================================================


Using dockerfile
=======================


FROM ubuntu
MAINTAINER Rajesh Kumar DevOps@Rajeshkumar.xyz
RUN apt-get update
RUN apt-get install git -y


docker build -t up-ub-git .

Rules of Dockerfile
===========================
layer - 
	data  - overlay2
	meta  - containers

Each line of Dockerfile would create one layer.
eACH LAYER WOULD BE USING base AS A layer0


FROM ubuntu
MAINTAINER Rajesh Kumar DevOps@Rajeshkumar.xyz
RUN touch /opt/rajesh1.txt
RUN touch /opt/rajesh2.txt
RUN touch /opt/rajesh3.txt

======================================================
Jenkins container 
	Which env?	
	Which port is exposed?
	which user a container is running with?
	dO WE HAVE ANY volume attached to container?


jenkins
==================
	openjdk:8-jdk
		buildpack-deps:buster-scm
			buildpack-deps:buster-curl
				debian:buster
					scratch

https://github.com/jenkinsci/docker/blob/587b2856cd225bb152c4abeeaaa24934c75aa460/Dockerfile


Assignment - Write a dokerfile.
====================
Create an image 
	Base - centos7
	Install nginx
	SET ENV = myname=yoruname
	volme - /opt/vol
	run as user - deploy

How can i make PID1?
	CMD
	ENTRYPOINT














