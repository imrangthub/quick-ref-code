#################################################
#                 DOCKER                        #
#################################################

=>docker --version
=>docker info
=>docker logs 96
=>docker login
=>docker logout

=>systemctl start docker
=>sudo systemctl stop docker
=>sudo systemctl stop docker.socket

=>sudo systemctl status docker

=>docker run imranmadbar/hello-world-java
=>docker run --name containerName -p 8080:8080 -d imageName:tagName
=>docker run --name SpringBootWebApp -p 8080:8080 -d imranmadbar/hello-world-java-maven-web-spring-boot
=>docker stop containerId


=>docker cp e029d15afdfc:/etc/cassandra/cassandra.yaml C:/Z_MY_COMPUTER
=>docker cp C:/Z_MY_COMPUTER/1MD_IMRAN_HOSSAIN/JAVA/SimpleJavaApplicatio.java 7a35bd9a6eb4:/home


=================================================
#                  Basic                                          
================================================= 

=>printenv
=>cat /etc/os-release

=>docker images
=>docker container ls

=> docker container ls -aq
List of container id

=>docker ps
Lists all the docker containers are running with container details.

=>docker ps -a
List all the docker containers running/exited/stopped with container details.


=>docker search hadoop
Search for a docker image on dockerhub with the name mentioned in the command.

=>docker system prune --all
Delete all image


=>docker inspect containerId




=================================================
#Docker Image 
=================================================


# Build Images
-------------------------------------------------
=>docker image build -t imranmadbar/docker-spring-boot-restcall-consumer .
=>docker image build -t imranmadbar/docker-spring-boot-restcall-producer .
List all the docker images pulled on the system with image details such as TAG/IMAGE ID/SIZE etc.

Retag the image with a version number:
=>docker image build -t imranmadbar/docker-spring-security-mysql-mvc-prod:1.0.1.RELEASE .
=>docker image build -t imranmadbar/docker-spring-security-mysql-mvc-prod:2.0.0.RELEASE .
=>docker image build -t imranmadbar/docker-spring-security-mysql-mvc-prod:3.0.0.RELEASE .


=>docker image build -t imranmadbar/oauth2-resource-server-api:1.0.0.RELEASE .
=>docker image build -t imranmadbar/oauth2-authorization-server-api:1.0.0.RELEASE .





# Pull Images | download Images
-------------------------------------------------
=>docker pull imranmadbar/docker-spring-boot-mysql

Pull image with a version number:
=>docker pull imranmadbar/docker-spring-security-mysql-mvc-prod:1.0.1.RELEASE
=>docker pull imranmadbar/docker-spring-security-mysql-mvc-prod:2.0.0.RELEASE


# Run Images as container
-------------------------------------------------
=>cqlsh localhost -u imran -p 123456
=>docker run imranmadbar/hello-world-java
=>docker run --name containerName -p 8080:8080 -d imageName:tagName
=>docker run --name cassandradb -d -p 9042:9042 cassandra:3.11

=>docker run --name oauth2-authorization-server-api -p 8081:8081 imranmadbar/oauth2-authorization-server-api:1.0.0.RELEASE
=>docker run --name docker-spring-security-mysql-mvc-prod -p 8181:8181 imranmadbar/docker-spring-security-mysql-mvc-prod:2.0.0.RELEASE

=>docker container run --name producer -p 8080:8080 -d employee-producer
=>docker run --name docker-spring-boot-mysql -t --link mysql-dkr-contr-db:mysql-dkr-contr-db -d -p 8080:8181 imranmadbar/docker-spring-boot-mysql
=>docker run --name docker-spring-security-mysql-mvc-prod -t --link mysql-dkr-contr-db:mysql-dkr-contr-db -d -p 8080:8181 imranmadbar/docker-spring-security-mysql-mvc-prod:3.0.0.RELEASE
=>docker container run --network consumer-producer-net --name docker-spring-boot-restcall-producer -p 8080:8080 -d imranmadbar/docker-spring-boot-restcall-producer
=>docker container run --network consumer-producer-net --name docker-spring-boot-restcall-consumer -p 8282:8282 -d imranmadbar/docker-spring-boot-restcall-consumer



# Run Images as container
-------------------------------------------------
=>docker run -d -p 9042:9042 cassandra:3.11
=>docker run -d -p 3306:3306 --name=spring-boot-mysql-oauth2-db --env="MYSQL_ROOT_PASSWORD=root" --env="MYSQL_DATABASE=mysqloauth2db" -it mysql:5.7

=>docker run --name oauth2-authorization-server-api -t --link spring-boot-mysql-oauth2-db:spring-boot-mysql-oauth2-db -p 8181:8081 imranmadbar/oauth2-authorization-server-api:1.0.0.RELEASE
=>docker run --name oauth2-resource-server-api -t --link spring-boot-mysql-oauth2-db:spring-boot-mysql-oauth2-db -p 8282:8082 imranmadbar/oauth2-resource-server-api:1.0.0.RELEASE




#Removing Images
-------------------------------------------------
=>docker rmi fce289e99eb9
Remove the docker image with the docker image id mentioned in the command



#Upload a docker Images 
-------------------------------------------------
=>docker push imranmadbar/docker-swarm-spring-boot-consumer-api
Upload a docker Images with the image name mentioned in the command on the dockerhub.

With Version
=>docker push abiodunjames/example-node-app:v1
=>docker push imranmadbar/docker-spring-security-mysql-mvc-prod:1.0.1.RELEASE
=>docker push imranmadbar/docker-spring-security-mysql-mvc-prod:2.0.0.RELEASE


#Update a docker Images 
-------------------------------------------------
=>docker push geekflare/httpd_image
Just make change, re-build image and push !






=================================================
#Docker Container   
=================================================

=>docker start 09ca6feb6efc
=>docker rm 9b6343d3b5a0
=>docker restart 09ca6feb6efc
=>docker stop 09ca6feb6efc


=>docker cp e029d15afdfc:/etc/cassandra/cassandra.yaml C:/Z_MY_COMPUTER
=>docker cp C:/Z_MY_COMPUTER/MD_IMRAN_HOSSAIN/DB/CASSANDRA/cassandra.yaml e029d15afdfc:/etc/cassandra
Copy File From/To Container/Desktop



#Open Bash | CMD of Containers
-------------------------------------------------
=>docker exec -it 583c72a9b5e5 sh



#Kill Container
-------------------------------------------------
=> docker kill 09ca6feb6efc
Stop the docker container immediately. Docker stop command stops the container gracefully, that’s the difference between a kill and stop commands.




 
=================================================
#Mounting  | Volumes |  Bind mounts                                       
=================================================

=>docker volume create MyDataVol
=>docker volume ls
=>docker volume ls -f name=data
=>docker volume inspect MyDataVol

=>docker volume rm MyDataVol
=>docker volume prune


=>docker run --name SpringBootWebApp1 -dp 8080:8080 -v MyDataVol:/projectData containerId
=>echo "Simple Msg Written on volume" > /projectData/simple-msg.txt
Add data to volumn file inside from a container


=>docker run -it --rm -v MyDataVol:/vol busybox ls -l /vol
Check volume data with a temp container

=>docker run --name SpringBootWebApp1 -dp 8080:8080 -v C:\Z_MY_COMPUTER\1MD_IMRAN_HOSSAIN\DOCKER\MyBindMount:/MyBindMount d86b72bd0247
=>docker run --name SpringBootWebApp1 -dp 8080:8080 --mount type=bind,source=C:\Z_MY_COMPUTER\1MD_IMRAN_HOSSAIN\DOCKER\MyBindMount,target=/MyBindMount d86b72bd0247


To avoid losing data, Docker provides volumes and bind mounts, two mechanisms for persisting data in your Docker container.

#DockerVolumes
------------------------------------------------
Volumes are a great mechanism for adding a data persisting layer in your Docker containers.Docker volumes are completely handled by Docker itself and therefore independent of both your directory structure and the OS of the host machine.


#BindMounts
------------------------------------------------
Bind mounts will mount a file or directory on to your container from your host machine, which you can then reference via its absolute path.


=================================================
#Docker Network 
=================================================


=>docker exec 484bc9a71fea  ifconfig
=>docker network inspect netName

=> docker network ls
=>docker inspect bridge



#Create network (type Bridge)
-------------------------------------------------
=>docker network create consumer-producer-net
=>docker network create spring-security-mvc-net


#Run Container in a Network
--------------------------------------------------
=>docker container run --network employee-mysql --name employee-jdbc-container -p 8080:8080 -d employee-jdbc

#Run Container with a database
--------------------------------------------------
=>docker run --name docker-spring-security-mysql-mvc-prod3 -t --link mysql-dkr-contr-db:mysql-dkr-contr-db -d -p 8181:8181 imranmadbar/docker-spring-security-mysql-mvc-prod:3.0.0.RELEASE




#Create network (type Overlay)
-------------------------------------------------
=>docker network create --driver overlay producer-consumer-net


#Show IP add ress of Container
-------------------------------------------------
=>docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container_name_or_id

#Delete docker network
-------------------------------------------------
=>docker network rm networkId





=================================================
#Docker Compose  
=================================================


#Run Compose |  Up Compose
-------------------------------------------------
=>docker-compose up
=>docker-compose down
In this case, the application will be up and running until you hit Ctrl-C to cancel the foreground process.
In this case, when you press Ctrl-C, it is equivalent to executing the “docker-compose stop”. So, it will stop all the containers gracefully.

=>docker-compose up -d 
The -d options runs the docker application in the background as a daemon. 
This will leave the application running until you decide to stop it.



#Additional docker-compose Startup Options
-------------------------------------------------
When you use docker-compose up, if there are any changes in the docker-compose.yml file that affects the containers, they will stopped and recreated.
But, you can force docker-compose not to stop and recreate the containers, you can use –no-recreate option as shown below during the docker-compose up. In other words, if the container already exits, this will not recreate it.

=>docker-compose up -d --no-recreate
You also can do the opposite. The following will forcefully recreate the containers even if nothing in the docker-compose.yml is changed.




#You can also specify the timeout value
-------------------------------------------------
=>docker-compose up -d -t 30
Default value is 10 seconds, but the following command will use the time-out value of 30 seconds.



#The following are few additional options you can use along with “docker-compose up”
-------------------------------------------------
–no-deps This will not start any linked depended services.
–no-build This will not build the image, even when the image is missing
–abort-on-container-exit This will stop all the containers if any container was stopped. You cannot use this option with -d, you have to use this option by itself.
–no-color In the output, this will not show any color. This will display the monochrome output on screen.


#Set Container Name
---------------------------------------------------
mysql:
    image: mysql
    container_name: sf4_mysql







=================================================
#Docker Swarm  
=================================================



#Initialized docker swarm
-------------------------------------------------
=>docker swarm init

#Check Docker node-service
-------------------------------------------------
=>docker node ls

#Create a network of type overlay
-------------------------------------------------
=>docker network create --driver overlay producer-consumer-net

When using services in a swarm,need a network so that multiple docker instances can interact with each other. 
this time the network will be of type Overlay.


#Create docker service
-------------------------------------------------
=>docker service create --network producer-consumer-net --name docker-swarm-spring-boot-consumer-api -p 8282:8282 imranmadbar/docker-swarm-spring-boot-consumer-api
=>docker service create --network producer-consumer-net --name docker-swarm-spring-boot-producer-api -p 8181:8181 imranmadbar/docker-swarm-spring-boot-producer-api

#Stop a docker service
-------------------------------------------------
=>docker service scale [serviceName]=0
=>docker service scale docker-swarm-consumer-service=0
Will remove all running instances but still keep the service object alive.


#Remove service
-------------------------------------------------
=>docker service rm serviceName
=>docker service rm docker-swarm-consumer-service
To delete the service, which stops all deployed containers, you run:

#Run docker service
-------------------------------------------------
docker service scale myservice=10







=================================================
#Docker Daemons 
=================================================

#Version
-------------------------------------------------
=>docker --version
One of the first things you want to know is how to find the installed docker version.


The error is related to that part:

In the default daemon configuration on Windows, the docker client must be run elevated to connect

You can do this in order to switch Docker daemon, as elevated user:

With Powershell:

Open Powershell as administrator
Launch command: & 'C:\Program Files\Docker\Docker\DockerCli.exe' -SwitchDaemon
OR, with cmd:

Open cmd as administrator
Launch command: "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchDaemon

#Commit
-------------------------------------------------
=>docker commit 09ca6feb6efc geekflare/httpd_image
Save a new docker image with container id mentioned in the command on the local system. In the example below, geekflare is the username, and httpd_image is the image name.



#Copying file
-------------------------------------------------
=>docker cp e029d15afdfc:/etc/cassandra/cassandra.yaml C:/Z_MY_COMPUTER

=>sudo docker cp 09ca6feb6efc:/usr/local/apache2/logs/httpd.pid /home/geekflare/
Copy a file from a docker container to the local system.
In this example, I am copying httpd.pid file inside a docker container with id 09ca6feb6efc to /home/geekflare/

=>ls
Run the command below to check if the file got copied or not.



#Checking history
-------------------------------------------------
=> docker history httpd
Shows the history of a docker image with the image name mentioned in the command.



#Checking logs
-------------------------------------------------
=>docker logs 09ca6feb6efc
Show the logs of the docker container with contained id mentioned in the command.



#Searching image
-------------------------------------------------
=> docker search hadoop
Search for a docker image on dockerhub with the name mentioned in the command.



#Updating configuration
-------------------------------------------------
=>docker update --help
Usage:  docker update [OPTIONS] CONTAINER [CONTAINER...]

Update container configurations. This shows all the update options.
Run the below command to update the CPU configuration of docker container with container id mentioned in the command.
=>docker update -c 1 2f6fb3381078



#Creating volume
-------------------------------------------------
=>docker volume create
Create a volume which docker container will use to store data.
Run the below command if the volume got created or not
=>docker volume ls



#Installing plugin
-------------------------------------------------
=> docker plugin install vieux/sshfs D
Install a docker plugin vieux/sshfs with debug environment set to 1.




$ docker container run -d ubuntu:16.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"







=================================================
#MySQL | Sql 
=================================================

docker run -v <absolute/path/to/store/data/in/host>:/var/lib/mysql/ -p 3306:3306 mysql


=>docker run --name SpringBootWebApp1 -dp 8080:8080 -v C:\Z_MY_COMPUTER\1MD_IMRAN_HOSSAIN\DOCKER\MyBindMount:/MyBindMount d86b72bd0247
=>docker run --name SpringBootWebApp1 -dp 8080:8080 --mount type=bind,source=C:\Z_MY_COMPUTER\1MD_IMRAN_HOSSAIN\DOCKER\MyBindMount,target=/MyBindMount d86b72bd0247


=>docker run --name arif-travel-agency-app -t --link arif_travel_agencydb:arif_travel_agencydb -p 8080:8080 imranmadbar/arif-travel-agency-app

=>docker run -d -p 3333:3306 --name=arif_travel_agencydb --env="MYSQL_ROOT_PASSWORD=root" --env="MYSQL_DATABASE=arif_travel_agencydb" -it mysql:5.7.18