#################################################
#                  SQL                         #
#################################################


=>mysql -uroot -p
=>mysql --host=127.0.0.1 --port=3307 -u root
=>mysql --host=172.16.8.132 --port=6680 -u root -p


#Current User
----------------
select user();

Check user
=>SELECT host, user FROM mysql.user;

UserLogin
-----------
=>mysql -uroot -p 

show databases;
use databaseName;
show tables;
describe tableName;
select * from tableName;


SHOW VARIABLES LIKE 'HOSTNAME';     -- Returns: MyHostName
SHOW VARIABLES LIKE 'BIND_ADDRESS'; -- Returns: 127.0.0.1





=================================================
#  CMD | MySQL |  Environment | Windows setup                                          
================================================= 

TO_DATE.*\),

#Set env verible
-------------------------------------------------
C:\Program Files\MySQL\MySQL Server 8.0\bin

#Check Version
-------------------- 
=>mysql -h localhost -V
=>mysql -V
=SELECT VERSION();
=>SHOW VARIABLES LIKE "%version%"


#what character set a MySQL database / table / column is?
----------------------------------------------------------------
=>SHOW VARIABLES LIKE 'character_set%';
=>SELECT SCHEMA_NAME 'database', default_character_set_name 'charset', DEFAULT_COLLATION_NAME 'collation' FROM information_schema.SCHEMATA;

Alter Charecter SET
=>ALTER DATABASE dbname CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
=>ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
=>ALTER TABLE tablename CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

=>ALTER DATABASE databasename CHARACTER SET utf8 COLLATE utf8_unicode_ci;
=>ALTER TABLE tablename CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci;

#Ensure that your databse engine is InnoDB
-----------------------------------------------
Should output: default_storage_engine InnoDB
=>SHOW GLOBAL variables like "default_storage%"

If storage engine is not InnoDB, use this to set it
=>SET GLOBAL default_storage_engine = 'InnoDB';


#Import SQL
-------------------------------------------------
source  D:/DOCKER_OAUTH2_WORKSHOP/GRANT_TYPE_PASSWORD/authorization-server-api/src/main/resources/spring_boot_oauth2_db.sql

#Check Mysql
-------------------------------------------------
shell> mysqladmin version
shell> mysqladmin variables
shell> mysqladmin -h `hostname` version variables
shell> mysqladmin -h `hostname` --port=3306 version
shell> mysqladmin -h host_ip version
shell> mysqladmin --protocol=SOCKET --socket=/tmp/mysql.sock version


#MySQL Server Start
--------------------------------------------------

=>service mysql start
=>systemctl status mysql
=>service mysql stop


Run the command prompt as admin and cd to bin directory of MySQL

Generally it is (C:\Program Files\MySQL\mysql-5.6.36-winx64\bin)
Run command : mysqld --install. (This command will install MySQL services and if services already installed it will prompt.)

Run below commands to start and stop server

To start : net start mysql

To stop : net stop mysql

netstat -ano | findstr 3306
taskkill /F /PID 2368


#Change Root Password
--------------------------------------------------
Create a File in C drive as with below line :C:\mysql-init.txt

ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';

Then Do:

C:\> cd "C:\Program Files\MySQL\MySQL Server 5.7\bin"
C:\> mysqld --init-file=C:\\mysql-init.txt


Set max conn in Mysql
=>SET GLOBAL max_connections = 750;
=>show variables like 'max_connections';



Exporting/Importing MySQL Dump | dump
-------------------------------------------------

=>mysqldump -u my_username -p database_name > output_file_path
=>mysqldump -h localhost -P 3306 -u root -p simple_db  > mytestdbsump.sql



=================================================
#  MySQL | Connection check | Info check                                         
================================================= 

=>SHOW PROCESSLIST;
=>SHOW FULL PROCESSLIST;
=>SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST WHERE COMMAND != 'Sleep';
Current Active Connection


=>show status where `variable_name` = 'Threads_connected';
=>SHOW STATUS WHERE variable_name LIKE "Threads_%" OR variable_name = "Connections"


=>SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;
Show User with activeconnection



=>SHOW VARIABLES LIKE "max_connections";
Max conn

=>SET GLOBAL max_connections = 5;
Set Max conn


#ORDER BY 
-------------------------------------------------
SELECT * FROM student
ORDER BY create_date desc 



Check time zone:
SELECT @@global.time_zone;
or
=>mysql -u root -p -e "SELECT @@global.time_zone;"

=cat /etc/timezone
=>timedatectl
TimeZone check in Linux


=================================================
#              DOCKER                                          
================================================= 
SET SQL_SAFE_UPDATES = 0;
delete  FROM mcvmysqldb.sa_lookupdtl;
SET SQL_SAFE_UPDATES = 1;


#Docker Image for MySQL
-------------------------------------------------
=>docker run -d -p 3333:3306 --name=mysql-dkr-contr-db --env="MYSQL_ROOT_PASSWORD=root" --env="MYSQL_DATABASE=docker_spring_boot_mysql_db" -it mysql:5.7.18



#Buid Application Image
-------------------------------------------------
=>docker build -t imranmadbar/docker-spring-boot-mysql .



#Run Application with link of MySQL container
-------------------------------------------------
=>docker run --name docker-spring-boot-mysql -t --link mysql-dkr-contr-db:mysql-dkr-contr-db -d -p 8080:8181 imranmadbar/docker-spring-boot-mysql




# Date Convater                                          
-------------------------------------------------

  
Oracle:

Date to String
  -- Convert the current date to YYYY-MM-DD format
  SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM dual;
==  
  Convert to string with the default format
  SELECT TO_CHAR(SYSDATE) FROM dual;
 
 String to Date
 SELECT TO_DATE( '5 Jan 2017', 'DD MON YYYY' ) FROM dual; 
 SELECT TO_DATE('2015/05/15 8:30:25', 'YYYY/MM/DD HH:MI:SS') FROM dual;
  
SQL Server:
Date to Stirng
  -- Convert the current date to YYYY-MM-DD format
  SELECT CONVERT(VARCHAR(10), GETDATE(), 120);
  
String to Date
 -- Specify a datetime string and style 102 (ANSI format), raises an error if conversion fails
  SELECT CONVERT(DATETIME, '2012-06-05', 102);
 
  -- TRY_CONVERT available since SQL Server 2012 (returns NULL if conversion fails)
  SELECT TRY_CONVERT(DATETIME, '2012-06-05', 102);


# Group By | having | duplicated value                                       
-------------------------------------------------

SELECT 
    INVOICE_NO,
    COUNT(*)
FROM 
    bill_invoicedtl
    group by 
     INVOICE_NO
    having count(*)>40;


# Date equal                                          
-------------------------------------------------	
select *
from bill_invoicedtl
where REPORT_DELIVERY_DATE = to_date('01/01/2016', 'dd/mm/yyyy')

	
# Date between                                          
-------------------------------------------------

public static String transectionListStmt(String reqObj) {
JSONObject json = new JSONObject(reqObj);
StringBuilder sqlQuery = new StringBuilder();
sqlQuery.append("SELECT A.PUR_REQ_NO AS PUR_REQ_NO, A.PUR_REQ_ID AS PUR_REQ_ID, ");
sqlQuery.append("A.PUR_REQ_DATE AS PUR_REQ_DATE , S.SUPPLIER_NAME AS SUPPLIER_NAME, S.SUPPLIER_NO AS SUPPLIER_NO ");
sqlQuery.append("FROM IN_PUR_REQ_PHR A,IN_SUPPLIER S ");
sqlQuery.append("WHERE A.SUPPLIER_NO = S.SUPPLIER_NO ");
sqlQuery.append("AND TRUNC(A.PUR_REQ_DATE) BETWEEN ");
sqlQuery.append("TO_DATE('"+Def.getString(json, "fromDate")+"','MM/DD/YYYY') ");
sqlQuery.append("AND TO_DATE('"+Def.getString(json, "fromDate")+"','MM/DD/YYYY') ");
// sqlQuery.append("AND A.PUR_REQ_FROM = ");
// sqlQuery.append("NVL('"+Def.getLong(json, "currBuNo")+"', A.PUR_REQ_FROM) ");
// sqlQuery.append("AND A.PUR_REQ_ID LIKE '%'||'"+Def.getString(json, "purReqId")+"'||'%' ");
// sqlQuery.append("AND UPPER(S.SUPPLIER_NAME) LIKE '%'||'"+Def.getString(json, "supplierName")+"'||'%' ");
// sqlQuery.append("AND NVL(A.APPROVE_FLAG,0) = DECODE('"+null+"', 'A', NVL(A.APPROVE_FLAG,0), 'P', 1, 'U', 0) ");
// sqlQuery.append("ORDER BY PUR_REQ_NO DESC ");
return sqlQuery.toString();
}
-------------------------------------------------

DROP VIEW MEDICARE_WEB.HL_FRESH_ITEM_STOCK_V;
/* Formatted on 2020/01/19 10:54 (Formatter Plus v4.8.8) */
CREATE OR REPLACE FORCE VIEW medicare_web.hl_fresh_item_stock_v (ID,
store_no,
store_name,
itemtype_no,
item_type_name,
item_no,
item_id,
item_name,
uom_no,
uom_name,
receive,
issue,
stock
)
AS
SELECT ROWNUM ID, s.store_no, s.store_name, i.itemtype_no,
t.item_type_name, i.item_no, i.item_id, i.item_name, u.uom_no,
u.uom_name, receive, issue, NVL (receive, 0) - NVL (issue, 0) stock
FROM in_store s,
in_item i,
in_itemtype t,
in_uom u,
(SELECT from_store_no, item_no,
SUM (DECODE (trntype_no,
1, item_qty,
14, item_qty,
3, item_qty,
0
)
) receive,
SUM (DECODE (trntype_no, 2, item_qty, 0)) issue
FROM in_trnlgr_hl
WHERE trntype_no IN (1, 2, 3)
GROUP BY from_store_no, item_no) d
WHERE s.store_no = d.from_store_no
AND i.item_no = d.item_no
AND i.itemtype_no = t.itemtype_no
AND i.uom_no = u.uom_no(+);

User Access Code:
select u.SUBMENU_NO, u.SUBMENU_ID, u.SUBMENU_NAME, null user_no, 0 status
from sa_submenu u
where u.SUBMENU_TYPE = 'A'
and not exists (select 1
from sa_grantobject g
where g.submenu_no = u.submenu_no
and user_no = 1190000001917)
union
select u.SUBMENU_NO, u.SUBMENU_ID, u.SUBMENU_NAME, o.USER_NO, 1 status
from sa_submenu u, sa_grantobject o
where u.SUBMENU_NO = o.SUBMENU_NO
and u.SUBMENU_TYPE = 'A'
and o.USER_NO =1190000001917;





Update table | alter table add column
---------------------------------------------------------
ALTER TABLE `notification_content` 
ADD COLUMN `lang_code` VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'en';




=================================================
#              POSTGRE_SQL                                          
================================================= 



=>NET STOP MySQL80
=>NET START MySQL80
WIN+R and type services.msc find the mysql serice name

=>create database databaseName
Create new database

=>\l
Show db list
=>\c newDB
(Switch db)Connecti  to new db
=>drop database databaseName;
Delete Database

=>\q
Quite from db 

=>\d
Show table;

=>\d show tableName
Show table details


Export/Import
-----------------------
=>pg_dump -U postgres -p 5432 -d arif_travel_agencydb -W -f c:\arif_travel_agencydb.sql
=>psql -U postgres -d testdb < C:\arif_travel_agencydb.sql



=================================================
#           ORACLE | USER| SESSION
=================================================

#Create SEQUENCE
=================
DROP SEQUENCE MEDICARE.SEQ_REG_NO;
CREATE SEQUENCE MEDICARE.SEQ_REG_NO
  START WITH 394320
  MAXVALUE 9999999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
------------
DROP SEQUENCE MEDICARE.SEQ_REG_ID;
CREATE SEQUENCE MEDICARE.SEQ_REG_ID
  START WITH 1
  MAXVALUE 999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;  
-------------
DROP SEQUENCE MEDICARE.SEQ_IN_ITEM_NO;
CREATE SEQUENCE MEDICARE.SEQ_IN_ITEM_NO
  START WITH 2
  MAXVALUE 999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;  
-------------
DROP SEQUENCE MEDICARE.SEQ_IN_ITEM_ID;
CREATE SEQUENCE MEDICARE.SEQ_IN_ITEM_ID
  START WITH 6
  MAXVALUE 9999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
--------------
DROP SEQUENCE MEDICARE.SEQ_INVOICE_NO;
CREATE SEQUENCE MEDICARE.SEQ_INVOICE_NO
  START WITH 512708
  MAXVALUE 9999999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;  
 -------------
DROP SEQUENCE MEDICARE.SEQ_INVOICE_ID;
CREATE SEQUENCE MEDICARE.SEQ_INVOICE_ID
  START WITH 1
  MAXVALUE 999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
--------------
DROP SEQUENCE MEDICARE.SEQ_IN_INVOICEDTL_NO;
CREATE SEQUENCE MEDICARE.SEQ_IN_INVOICEDTL_NO
  START WITH 1
  MAXVALUE 9999999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
-----------
DROP SEQUENCE MEDICARE.SEQ_IN_INVOICEDTL_ID;

CREATE SEQUENCE MEDICARE.SEQ_IN_INVOICEDTL_ID
  START WITH 1
  MAXVALUE 999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
  
#Create Function
==================
CREATE OR REPLACE function fd_dob (p_year number default 0, p_month number default 0, p_day number default 0)
return date
as  
begin
    return trunc(sysdate) - (nvl(p_day,0) + (nvl(p_month,0) * 30) + (nvl(p_year,0) * 365));
exception when others then 
    return sysdate;  
end;
/


#Function2
==========
CREATE OR REPLACE function fd_session_no (p_og_no number, p_company_no number) 
return number
    is
    v_val   number;  
begin
        
    select seq_session.nextval into v_val from dual;

    return to_number (p_og_no||p_company_no || to_char (sysdate, 'RRMMDD') || v_val);
        
exception
    when others then return 1;
end;
/

#Funcation3
=============
CREATE OR REPLACE function F_PASSWORD(p_username in varchar2, p_password in varchar2)
return varchar2
is
begin
  return dbms_obfuscation_toolkit.md5
     (input =>
         utl_raw.cast_to_raw(upper(p_username)||'/'||p_password)
     );
end f_Password;
/

#Funcation4
==============
CREATE OR REPLACE function fd_age_calculator (p_date_of_birth   date)
return varchar2
is
    vYears   number :=  0;
    vMonths  number :=  0;
    vDays    number :=  0;
    bd       number := 0;
    cd       number := 0;
    v_last_md   varchar2(30);
    v_last_md_chk   date;
    vReturn  varchar2(500) := null;
begin

    begin
        vYears    :=  trunc (months_between(sysdate,p_date_of_birth)/12);
        vMonths   :=  trunc (mod (months_between(sysdate,p_date_of_birth),12));
        
        bd        :=  to_number (to_char (p_date_of_birth,'dd'));
        cd        :=  to_number (to_char (sysdate,'dd'));
        
        if bd < cd then
            vDays := cd - bd;
        elsif bd > cd then
            begin
                v_last_md := to_char (p_date_of_birth,'dd')||to_char (add_months (sysdate,-1),'mmrrrr');
                v_last_md_chk := to_date (v_last_md,'ddmmrrrr');
            exception
                when others then
                v_last_md := to_char (last_day(add_months (sysdate,-1)),'ddmmrrrr');
            end;
            vDays     := trunc (sysdate) - to_date (v_last_md,'ddmmrrrr');
        end if;
        
        vReturn :=  (case when abs(vYears) >= 1 then abs(vYears) ||'Y ' end)||
                    (case when abs(vMonths) >= 1 then abs(vMonths) ||'M ' end)||
                    (case when vDays >= 1 then vDays ||'D ' end);
    exception
        when others then null;
    end;
    
    return vReturn;

end fd_age_calculator;
/



#Create Package
===============

CREATE OR REPLACE PACKAGE K_PARAMETER   // Declared Package
IS
V_OG_NO             NUMBER;
V_COMPANY_NO        NUMBER;
V_INVOICE_NO        NUMBER;
V_INVOICE_ID        VARCHAR2(50);
V_LAB_NO            NUMBER;
V_LAB_ID            VARCHAR2(50);
V_INVOICE_STDT      DATE;
V_INVOICE_ENDT      DATE;
V_STATUS            VARCHAR2(4000);
V_COUNTRY           VARCHAR2(4000);
V_BU_NO             NUMBER;
V_STAMP_NO          NUMBER;
V_ADMISSION_NO      NUMBER;
V_ADMISSION_ID      VARCHAR2(50);
V_CONSULTATION_NO   NUMBER;
V_STORE_NO          NUMBER;
V_PHR_REQ_NO        NUMBER;
V_STORE_REQ_NO      NUMBER;
V_DK_REQ_NO         NUMBER;
V_NS_REQ_NO         NUMBER;
V_NS_TRN_NO         NUMBER;
V_PUR_ORD_NO        NUMBER;
V_ITEM_NO           NUMBER;
V_NS_NO             NUMBER;
V_HL_TRN_NO         NUMBER;
V_CSD_TRN_NO        NUMBER;

FUNCTION FD_GET_OG_NO RETURN NUMBER;
PROCEDURE PD_SET_OG_NO (P_OG_NO NUMBER);

END K_PARAMETER;
/
-------------------------------

CREATE OR REPLACE PACKAGE BODY educare.K_PARAMETER // Defined Package Body
IS
FUNCTION FD_GET_OG_NO
RETURN NUMBER
IS
BEGIN
    RETURN(V_OG_NO);
END;
PROCEDURE PD_SET_OG_NO (P_OG_NO NUMBER)
IS
BEGIN
    V_OG_NO := P_OG_NO;
END;

END K_PARAMETER;
/


#Create VIEW
=============
CREATE OR REPLACE FORCE VIEW HPMS_PATIENT_TYPE_V
AS
    SELECT p.pat_type_no,
           p.pat_type_name,
           p.reg_no,
           p.ss_creator,
           p.ss_created_on,
           p.ss_created_session,
           p.ss_modifier,
           p.ss_modified_on,
           p.ss_modified_session,
           p.og_no,
           o.og_name,
           p.company_no,
           c.company_name,
           p.active_stat,
           p.TYPE
      FROM hpms_patient_type p, sa_org o, sa_company c
     WHERE p.og_no = o.og_no AND p.company_no = c.company_no;
	 
View2
======
CREATE OR REPLACE FORCE VIEW SA_LOOKUPDTL_V

AS
    SELECT l.lookup_no,
           l.lookup_name,
           d.lookupdtl_no,
           d.lookdtl_name,
           d.description,
           d.active_stat,
           d.sl_no,
           d.ss_creator,
           d.ss_created_on,
           d.ss_created_session,
           d.ss_modifier,
           d.ss_modified_on,
           d.ss_modified_session,
           d.company_no,
           c.company_name,
           d.og_no,
           o.og_name,
           d.lookdtl_name_map
      FROM sa_lookup     l,
           sa_lookupdtl  d,
           sa_org        o,
           sa_company    c
     WHERE     l.lookup_no = d.lookup_no
           AND d.og_no = o.og_no
           AND d.company_no = c.company_no
           AND d.company_no =
               NVL (k_parameter.fd_get_company_no, d.company_no);
			   
			   
			   
			   
//--------------------------------------------


  
Sessions can be killed from within WinSQL using the ALTER SYSTEM KILL SESSION syntax.
First identify the offending session as follows:
SELECT s.sid,
s.serial#,
s.osuser,
s.program
FROM v$session s;
This query will result in a similar result.
SID SERIAL# OSUSER PROGRAM
1 1 SYSTEM ORACLE.EXE
2 1 SYSTEM ORACLE.EXE
3 1 SYSTEM ORACLE.EXE
4 1 SYSTEM ORACLE.EXE
32 45 SCOTT WINSQL.EXE
37 501 SYSTEM WINSQL.EXE

The SID and SERIAL# values of the relevant session can then be substituted into the following statement:
ALTER SYSTEM KILL SESSION 'sid,serial#'

In some situations the Oracle.exe is not able to kill the session immediately. In these cases the session will be "marked for kill". It will then be killed as soon as possible.
Issuing the ALTER SYSTEM KILL SESSION command is the only safe way to kill an Oracle session. If the marked session persists for some time you may consider killing the process at the operating system level. However, this is not recommended as it is dangerous and can lead to instance failures.
It is possible to force the kill by adding the IMMEDIATE keyword:

ALTER SYSTEM KILL SESSION 'sid,serial#' IMMEDIATE
-------------------------------------------------
SELECT s.inst_id,
s.sid,
s.serial#,
--s.sql_id,
p.spid,
s.username,
s.program
FROM gv$session s
JOIN gv$process p ON p.addr = s.paddr AND p.inst_id = s.inst_id
WHERE s.type != 'BACKGROUND';





##Doc-SQL
================================================= 
What is a Relational Database?
  A Relational Database stores data in a structured format using tables, where each table consists of 
  rows (records) and columns (fields).
  Data is organized based on relationships between tables, often connected using primary and foreign keys.
  SQL (Structured Query Language) is the standard language used to interact with relational databases.
Examples: MySQL, PostgreSQL, Oracle, Microsoft SQL Server, and SQLite.


What is a Database Engine?
  A Database Engine is the core software component of a database that handles the storage, processing, and querying of data. 
  It manages how data is stored on disk, performs transactions, ensures concurrency, and maintains data integrity.
  It is responsible for CRUD operations (Create, Read, Update, Delete).
  Some databases allow you to switch between multiple engines to optimize for different use cases.



Types of Database Engines:Storage Engines
-------------------------------------------------
Storage Engines (Specific to RDBMS like MySQL):
  InnoDB: Supports transactions, foreign keys, and row-level locking.
  MyISAM: Faster reads but lacks transactions and foreign key support.

RDBMS Engines: These engines manage relational data.
  MySQL: Lightweight and popular for web apps.
  PostgreSQL: Advanced SQL compliance, supports complex queries.
  Oracle Database: High-performance, often used for enterprise applications.
  Microsoft SQL Server: Strong integration with Microsoft tools.

NoSQL Engines (Non-relational but worth noting for comparison):
  MongoDB: Document-based.
  Redis: Key-value storage.
  Cassandra: Wide-column storage.



Database Engines are the software that runs the database, handling storage, transactions, and queries.
Engines differ in terms of transactions, performance, scalability, and use cases.
Each engine offers unique features, and the choice depends on your project’s requirements for speed, reliability, and complexity.




How Does One Database Work with Multiple Engines? like MySQL:
------------------------------------------------
Storage Engines at the Table Level
In a single MySQL database, each table can use a different storage engine.

For example:
  customers table → InnoDB (for transactions and foreign key constraints).
  logs table → MyISAM (for fast reads without transactions).


Declaration of Engine per Table
When creating or altering a table, you can specify the storage engine:

  CREATE TABLE customers (
      id INT PRIMARY KEY,
      name VARCHAR(50)
  ) ENGINE=InnoDB;

  CREATE TABLE logs (
      id INT PRIMARY KEY,
      message TEXT
  ) ENGINE=MyISAM;


Execution at the Database Layer:
  The database server directs operations to the correct engine based on the table definition.
  Each engine manages the tables it is responsible for independently—handling how data is stored, indexed, and queried.
  Query Execution Plan: The database server combines results from tables, regardless of which engine manages them.


Transaction Handling Across Engines:
  Transactions involving only InnoDB tables can be committed or rolled back together.
  If a query spans multiple engines (e.g., InnoDB and MyISAM), only the InnoDB part is transactional, 
  while the MyISAM part won't support rollback.


Other Examples of Multi-Engine Databases
  MariaDB: Similar to MySQL, it supports multiple engines, including Aria (for temporary tables) and InnoDB.
  PostgreSQL: While it primarily uses a single engine, extensions like TimescaleDB add specialized functionality 
  for time-series data.



Default Storage Engine for MySQL: (InnoDB, MySQL 5.5 and later. Before MySQL 5.5:MyISAM)
How to Check the Default Storage Engine:
  SHOW VARIABLES LIKE 'default_storage_engine';

Storage engines are applied at the table level, giving you flexibility to choose different engines for different tables within the same database.





MariaDB vs MySQL:
MariaDB and MySQL are both relational database management systems (RDBMS) that share a common origin, but they have evolved 
differently over time. MariaDB was created as a fork of MySQL in 2009, after Oracle acquired MySQL. 
While they remain similar in many ways, there are notable differences in terms of features, licensing, performance, and ecosystem.



=================================================
##Oracle
=================================================

Storage Engines:
  Oracle Database does not use multiple storage engines like MySQL or MariaDB but provides a unified, 
  flexible storage layer with specialized options such as tablespaces, partitioning, in-memory tables, and ASM. 
  This approach ensures performance, scalability, and manageability for a wide range of applications without 
  requiring users to switch between engines.

  So while Oracle doesn’t allow per-table storage engine selection, it offers more powerful storage management 
  options than MySQL/MariaDB in a seamless, integrated manner.




Oracle SQL VS MySQL SQL
--------------------------------
Oracle Database and MySQL use SQL (Structured Query Language) to interact with databases. 
However, there are some differences between the SQL syntax, features, and implementations used by Oracle and MySQL 
due to their design goals and database engines.

  Basic CRUD Operations (Create, Read, Update, Delete): Both databases support standard SQL commands for manipulating data.
  Joins: Both support SQL joins (e.g., INNER JOIN, LEFT JOIN, RIGHT JOIN).
  Indexes: Both databases use indexes to speed up queries.
  Transactions: Both Oracle and MySQL’s InnoDB engine support ACID transactions (though MySQL needs to explicitly use InnoDB for this).
  Views and Stored Procedures: Both allow creating views, functions, and stored procedures.


Both Oracle SQL and MySQL SQL are based on ANSI SQL, but they differ in syntax, features, and capabilities.
  Oracle provides more advanced features like PL/SQL, advanced transaction handling, and clustering, making it ideal for l
  arge-scale enterprise systems.
  MySQL offers a simpler, more lightweight SQL implementation that’s better suited for web applications and smaller projects. 
  However, MySQL is catching up with features like JSON support and transactional storage using InnoDB.



PL/SQL 
================================================
PL/SQL (Procedural Language/Structured Query Language) is a procedural extension of SQL, 
developed by Oracle Corporation for its database systems. 

Key Features of PL/SQL:
  Block Structure:Code is organized into logical blocks consisting of three parts:
    Declaration Block: Define variables, constants, and cursors.
    Executable Block: Contains SQL queries and procedural code.
    Exception Block: Handles runtime errors.

  Control Structures:
    Supports loops (FOR, WHILE), conditional statements (IF-THEN-ELSE), and CASE statements.

  Error Handling:
    Provides exception handling to catch and handle errors gracefully.

  Modularity:
    Allows the creation of procedures, functions, and packages to structure and reuse code.

  SQL Integration:
    Fully integrates with SQL for querying and manipulating data within procedural code.

  Triggers:
    Supports database triggers, which automatically execute when a specific database event occurs (like INSERT, UPDATE, or DELETE).

  High Performance:
    Code is executed inside the Oracle database, reducing network overhead and improving performance for complex logic.



PL/SQL and Other Databases(procedural extensions)
--------------------------------------------------
PL/SQL is specific to Oracle Database and was developed by Oracle Corporation. 
Other relational databases, like MySQL, PostgreSQL, or Microsoft SQL Server, do not use PL/SQL. 
However, many databases offer their own procedural extensions for SQL to provide similar functionality. 

----------------------------------------------------------------------------------------------------------------------------------------
Database             | Procedural Language                | Key Differences
---------------------| -----------------------------------| ----------------------------------------------------------------------------
Oracle               | PL/SQL                             | Natively integrated with SQL, providing a powerful and versatile procedural language.
MySQL                | MySQL Stored Procedures (SQL/PSM)  | Supports stored procedures, but with a less robust feature set compared to PL/SQL.
PostgreSQL           | PL/pgSQL                           | Offers a robust and flexible procedural language similar to PL/SQL, with additional features and capabilities.
Microsoft SQL Server | T-SQL (Transact-SQL)               | Extends SQL with procedural features, tightly integrated with SQL Server, and provides a wide range of database management capabilities.
MariaDB              | Stored Procedures                  | Similar to MySQL, offering stored procedures with additional features and functionality.
-------------------------------------------------------------------------------------------------------------------------------------------




2. Key Differences between Oracle SQL and MySQL SQL
---------------------------------------------------------------------------------------------------------------------------------------------------
Feature                         | Oracle SQL                                    | MySQL SQL
------------------------------- |-----------------------------------------------|------------------------------------------------------------------
SQL syntax for AUTO_INCREMENT   | Uses SEQUENCES to generate unique IDs.        | Uses AUTO_INCREMENT directly in table definition.
Example                         | CREATE SEQUENCE seq_customer_id START WITH 1; | id INT AUTO_INCREMENT PRIMARY KEY;
PL/SQL vs. MySQL SQL            | Oracle uses PL/SQL for stored procedures.     | MySQL uses stored procedures with standard SQL syntax, but lacks the full PL/SQL capabilities.
Stored Procedure Example        | BEGIN ... END; syntax in PL/SQL.              | More basic SQL syntax for procedures.
Transaction Handling            | More advanced features with savepoints and    | Limited, but InnoDB supports standard transactions.
                                | finer-grained locks.                          | 
Triggers                        | Oracle supports more complex triggers with    | MySQL supports triggers, but with some limitations (e.g., no multiple triggers on the same event).
                                | PL/SQL logic.                                 | 
Data Types                      | Oracle uses specific types like NUMBER,       | MySQL uses types like INT, VARCHAR, TEXT, etc.
                                | VARCHAR2.                                     | 
Limit Query Results             | Uses ROWNUM or FETCH FIRST N ROWS.            | Uses LIMIT keyword.
Example                         | SELECT * FROM customers WHERE ROWNUM <= 10;   | SELECT * FROM customers LIMIT 10;
Case Sensitivity                | Table and column names are case-sensitive.    | Case sensitivity depends on the OS and storage engine (e.g., MySQL on Windows is case-insensitive).
NULL Handling                   | Oracle treats empty strings ('') as NULL.     | MySQL treats empty strings as empty (not NULL).
Foreign Key Constraints         | Oracle enforces deferred constraints.         | MySQL's constraint checking is immediate (only in InnoDB).
Recursive Queries               | Uses CONNECT BY for hierarchical queries.     | Uses WITH RECURSIVE syntax.
JSON Support                    | Oracle offers advanced JSON features.         | MySQL has native JSON types, but features are evolving.
User Management and Roles       | Advanced roles and privileges management.     | More basic privilege management system.
---------------------------------------------------------------------------------------------------------------------------------------------------




MySQL vs MariaDB vs PostgreSQL vs Oracle vs NoSQL:
---------------------------------------------------------------------------------------------------------------------------------------------
Database                    | Type                                | Best Use Cases                         | Strengths                                                              | Limitations
----------------------------|-------------------------------------|----------------------------------------|------------------------------------------------------------------------|----------------
MySQL                       | Relational (SQL)                    | Web apps, CMS (WordPress, Magento)     | Fast reads, easy to use, widely supported                              | Limited complex queries and transactions
MariaDB                     | Relational (SQL)                    | Replacement for MySQL, web apps        | Open-source, faster improvements, MySQL-compatible                     | Newer features may lack maturity
PostgreSQL                  | Relational (SQL)                    | Data analytics, complex queries, GIS   | Advanced SQL features, extensible (supports JSON, XML), ACID-compliant | Slightly slower than MySQL in some cases
Oracle                      | Relational (SQL)                    | Enterprise apps, ERP, finance systems  | High performance, robust security, advanced features (PL/SQL, RAC)     | Expensive, proprietary
NoSQL (MongoDB, Cassandra)  | Non-relational (document, key-value)| Big data, real-time apps, IoT          | Scalable, flexible schema, fast writes                                 | Not ideal for complex transactions or joins
---------------------------------------------------------------------------------------------------------------------------------------------
Summary:
  MySQL: Great for simple, fast web applications.
  MariaDB: Open-source fork of MySQL with added features and improvements.
  PostgreSQL: Best for complex queries and data-heavy applications.
  Oracle: Ideal for large enterprises needing robust, secure, and highly available systems.
  NoSQL: Excellent for applications with dynamic data structures or high scalability needs.

Licensing Models:
  MySQL: Free for community use, but advanced features and official support require a license.
  MariaDB: Free community version, with a paid enterprise version offering extra tools and support.
  PostgreSQL: Completely free and open-source, but paid support is available through third parties.
  Oracle: Limited free version (Oracle XE) and costly enterprise versions with premium features.
  NoSQL: Free community versions available, but advanced tools and cloud services come with a cost.



Key Differences in Data Types Across Databases:
  Integer Handling:
    MySQL/MariaDB: Use TINYINT for very small integers.
    Oracle: Uses NUMBER for all numeric types, making it more flexible but heavier.
    PostgreSQL: Supports native BIGINT and handles large integers efficiently.

  String Types:
    Oracle: Uses VARCHAR2 instead of VARCHAR to avoid potential ambiguity.
    PostgreSQL: Handles large text efficiently with TEXT.

  Boolean Values:
    PostgreSQL: Has a native BOOLEAN type.
    MySQL/MariaDB: Simulate boolean with TINYINT(1).
    Oracle: Doesn’t have native boolean; uses NUMBER(1).

  JSON Handling:
    MongoDB: Stores native JSON-like documents.
    PostgreSQL: Offers JSONB for faster operations.
    MySQL/MariaDB: Have basic JSON support but less efficient than PostgreSQL.

  Binary Data:
    Oracle: Provides multiple types like RAW and BLOB.
    PostgreSQL: Uses BYTEA.
    MongoDB/Cassandra: Use Binary or blob for storing raw data.












=================================================
#      No-SQL  | CASSANDRA                                          
================================================= 
https://www.gushiciku.cn/pl/gCkH/zh-tw
https://cassandra.apache.org/doc/3.11/cassandra/getting_started/configuring.html
https://cassandra.apache.org/doc/3.11/cassandra/getting_started/querying.html

=>drop keyspace zipkin3_udts;

=>show version
=>SELECT cql_version FROM system.local;
=>SELECT cluster_name, listen_address FROM system.local;

=>Set-ExecutionPolicy Unrestricted

LOGIN
--------------------------------------------

=>cqlsh -u cassandra -p cassandra
=>CREATE ROLE zipkinUser with SUPERUSER = true AND LOGIN = true and PASSWORD = 'zipkin';


=>cassandra
Runing DB server

=>cqlsh
Runing cassandra tarminal
=>cqlsh localhost -u cassandra -p cassandra
=>cqlsh localhost -u imran -p 123456
Login with user

=>create user apihub with password '12345' superuser;
Create User:


=>describe keyspaces;
check keyspaces

=>CREATE KEYSPACE spring_boot_keyspc WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
=>CREATE KEYSPACE spring_boot_keyspc WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
Create keyspaces

=>DROP KEYSPACE neir_zipkin_server_kespc;

=>use spring_boot_kespc;
 
=>CREATE TABLE user_tbl(
   id int PRIMARY KEY,
   name text,
   address text,
   age int
);

=>describe tables;
Check Table

=>INSERT INTO user_tbl (id, name, address, age) VALUES(1001,'MD IMRAN HOSSAIN', 'Dhaka', 30);
=> select * from user_tbl;


=>LIST ROLES;
=>LIST USERS;

=>DROP ROLE IF EXISTS apihub;
java -jar zipkin-server-2.12.9-exec.jar --server.port=9410 --zipkin.storage.type=cassandra3 --zipkin.storage.cassandra3.ensure-schema=true --zipkin.storage.cassandra3.contact-points=localhost:9042 --zipkin.storage.cassandra3.username=imran --zipkin.storage.cassandra3.password=123456 --zipkin.storage.cassandra3.keyspace=spring_boot_keyspc
Authentication
---------------------------------------------

=>ALTER ROLE apihub WITH PASSWORD='apihub1';
=>LIST ROLES OF apihub;

=>CREATE USER alice WITH PASSWORD 'password_a' SUPERUSER;

=>CREATE ROLE apihubdevbs WITH PASSWORD = '12345' AND LOGIN = true AND SUPERUSER = true;

=>LIST ALL PERMISSIONS OF apihub;
=>LIST SELECT PERMISSIONS OF apihub;

=>GRANT apihub TO apihub4;

=>UPDATE system.local SET cluster_name = 'dev-bs' where key='local';


=>COPY user_tbl (id, address, age, name) TO 'userTbl.csv';
=>COPY user_tbl (id, address, age, name) FROM 'userTbl.csv';

Docker:
=================================================
=>docker pull cassandra:3.11
=>docker run --name cassandradb -d -p 9042:9042 cassandra:3.11
=>docker run -v /path/to/config:/etc/cassandra



Zipkin With MySQL
=================================================

=>ALTER USER 'root'@'localhost'   IDENTIFIED WITH mysql_native_password   BY 'root';
=>java -jar zipkin-server-2.12.9-exec.jar --zipkin.storage.type=mysql --zipkin.storage.mysql.host=localhost --zipkin.storage.mysql.port=3306 --   zipkin.storage.mysql.username=root --zipkin.storage.mysql.password=root --zipkin.storage.mysql.db=zipkin_service_mysql




Zipkin With CASSANDRA
=================================================

=>java -jar zipkin-server-2.12.9-exec.jar --zipkin.storage.type=cassandra3
    
=>cqlsh
=>describe keyspaces;
=>use zipkin2;
=>describe tables;





#HIBERNET | SEQUE
=================================================

CREATE TABLE `hibernate_sequence` (
  `next_val` bigint DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SELECT * FROM apihub.hibernate_sequence;


