#################################################
#                 SQL                         #
#################################################

postgres
postgres

=================================================
#    CMD |  Environment | Windows setup                                          
================================================= 

TO_DATE.*\),

#Set env verible
-------------------------------------------------
C:\Program Files\MySQL\MySQL Server 8.0\bin

#Check Version
-------------------- 
=>mysql -h localhost -V
=>mysql -V
=SELECT VERSION();
=>SHOW VARIABLES LIKE "%version%"


#what character set a MySQL database / table / column is?
----------------------------------------------------------------
=>SHOW VARIABLES LIKE 'character_set%';
=>SELECT SCHEMA_NAME 'database', default_character_set_name 'charset', DEFAULT_COLLATION_NAME 'collation' FROM information_schema.SCHEMATA;

Alter Charecter SET
=>ALTER DATABASE dbname CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
=>ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
=>ALTER TABLE tablename CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

=>ALTER DATABASE databasename CHARACTER SET utf8 COLLATE utf8_unicode_ci;
=>ALTER TABLE tablename CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci;

#Ensure that your databse engine is InnoDB
-----------------------------------------------
Should output: default_storage_engine InnoDB
=>SHOW GLOBAL variables like "default_storage%"

If storage engine is not InnoDB, use this to set it
=>SET GLOBAL default_storage_engine = 'InnoDB';



#Current User
----------------
select user();

Check user
=>SELECT host, user FROM mysql.user;

UserLogin
-----------
=>mysql -uroot -p 

show databases;
use databaseName;
show tables;
describe tableName;
select * from tableName;


SHOW VARIABLES LIKE 'HOSTNAME';     -- Returns: MyHostName
SHOW VARIABLES LIKE 'BIND_ADDRESS'; -- Returns: 127.0.0.1


#Import SQL
-------------------------------------------------
source  D:/DOCKER_OAUTH2_WORKSHOP/GRANT_TYPE_PASSWORD/authorization-server-api/src/main/resources/spring_boot_oauth2_db.sql

#Check Mysql
-------------------------------------------------
shell> mysqladmin version
shell> mysqladmin variables
shell> mysqladmin -h `hostname` version variables
shell> mysqladmin -h `hostname` --port=3306 version
shell> mysqladmin -h host_ip version
shell> mysqladmin --protocol=SOCKET --socket=/tmp/mysql.sock version


#MySQL Server Start
--------------------------------------------------
Run the command prompt as admin and cd to bin directory of MySQL

Generally it is (C:\Program Files\MySQL\mysql-5.6.36-winx64\bin)
Run command : mysqld --install. (This command will install MySQL services and if services already installed it will prompt.)

Run below commands to start and stop server

To start : net start mysql

To stop : net stop mysql

netstat -ano | findstr 3306
taskkill /F /PID 2368


#Change Root Password
--------------------------------------------------
Create a File in C drive as with below line :C:\mysql-init.txt

ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';

Then Do:

C:\> cd "C:\Program Files\MySQL\MySQL Server 5.7\bin"
C:\> mysqld --init-file=C:\\mysql-init.txt


=================================================
#              DELETE                                          
================================================= 

SET SQL_SAFE_UPDATES = 0;
delete  FROM mcvmysqldb.sa_lookupdtl;
SET SQL_SAFE_UPDATES = 1;



=================================================
#              POSTGRE_SQL                                          
================================================= 

=>create database databaseName
Create new database

=>\l
Show db list
=>\c newDB
(Switch db)Connecti  to new db
=>drop database databaseName;
Delete Database

=>\q
Quite from db 

=>\d
Show table;

=>\d show tableName
Show table details




=================================================
#              POSTGRE_SQL                                          
================================================= 

=>create database databaseName
Create new database

=>\l
Show db list
=>\c newDB
(Switch db)Connecti  to new db
=>drop database databaseName;
Delete Database

=>\q
Quite from db 

=>\d
Show table;

=>\d show tableName
Show table details


Export/Import
-----------------------
=>pg_dump -U postgres -p 5432 -d arif_travel_agencydb -W -f c:\arif_travel_agencydb.sql
=>psql -U postgres -d testdb < C:\arif_travel_agencydb.sql


=================================================
#              DOCKER                                          
================================================= 

#Docker Image for MySQL
-------------------------------------------------
=>docker run -d -p 3333:3306 --name=mysql-dkr-contr-db --env="MYSQL_ROOT_PASSWORD=root" --env="MYSQL_DATABASE=docker_spring_boot_mysql_db" -it mysql:5.7.18



#Buid Application Image
-------------------------------------------------
=>docker build -t imranmadbar/docker-spring-boot-mysql .



#Run Application with link of MySQL container
-------------------------------------------------
=>docker run --name docker-spring-boot-mysql -t --link mysql-dkr-contr-db:mysql-dkr-contr-db -d -p 8080:8181 imranmadbar/docker-spring-boot-mysql




# Date Convater                                          
-------------------------------------------------

  
Oracle:

Date to String
  -- Convert the current date to YYYY-MM-DD format
  SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM dual;
==  
  Convert to string with the default format
  SELECT TO_CHAR(SYSDATE) FROM dual;
 
 String to Date
 SELECT TO_DATE( '5 Jan 2017', 'DD MON YYYY' ) FROM dual; 
 SELECT TO_DATE('2015/05/15 8:30:25', 'YYYY/MM/DD HH:MI:SS') FROM dual;
  
SQL Server:
Date to Stirng
  -- Convert the current date to YYYY-MM-DD format
  SELECT CONVERT(VARCHAR(10), GETDATE(), 120);
  
String to Date
 -- Specify a datetime string and style 102 (ANSI format), raises an error if conversion fails
  SELECT CONVERT(DATETIME, '2012-06-05', 102);
 
  -- TRY_CONVERT available since SQL Server 2012 (returns NULL if conversion fails)
  SELECT TRY_CONVERT(DATETIME, '2012-06-05', 102);


# Group By | having | duplicated value                                       
-------------------------------------------------

SELECT 
    INVOICE_NO,
    COUNT(*)
FROM 
    bill_invoicedtl
    group by 
     INVOICE_NO
    having count(*)>40;


# Date equal                                          
-------------------------------------------------	
select *
from bill_invoicedtl
where REPORT_DELIVERY_DATE = to_date('01/01/2016', 'dd/mm/yyyy')

	
# Date between                                          
-------------------------------------------------

public static String transectionListStmt(String reqObj) {
JSONObject json = new JSONObject(reqObj);
StringBuilder sqlQuery = new StringBuilder();
sqlQuery.append("SELECT A.PUR_REQ_NO AS PUR_REQ_NO, A.PUR_REQ_ID AS PUR_REQ_ID, ");
sqlQuery.append("A.PUR_REQ_DATE AS PUR_REQ_DATE , S.SUPPLIER_NAME AS SUPPLIER_NAME, S.SUPPLIER_NO AS SUPPLIER_NO ");
sqlQuery.append("FROM IN_PUR_REQ_PHR A,IN_SUPPLIER S ");
sqlQuery.append("WHERE A.SUPPLIER_NO = S.SUPPLIER_NO ");
sqlQuery.append("AND TRUNC(A.PUR_REQ_DATE) BETWEEN ");
sqlQuery.append("TO_DATE('"+Def.getString(json, "fromDate")+"','MM/DD/YYYY') ");
sqlQuery.append("AND TO_DATE('"+Def.getString(json, "fromDate")+"','MM/DD/YYYY') ");
// sqlQuery.append("AND A.PUR_REQ_FROM = ");
// sqlQuery.append("NVL('"+Def.getLong(json, "currBuNo")+"', A.PUR_REQ_FROM) ");
// sqlQuery.append("AND A.PUR_REQ_ID LIKE '%'||'"+Def.getString(json, "purReqId")+"'||'%' ");
// sqlQuery.append("AND UPPER(S.SUPPLIER_NAME) LIKE '%'||'"+Def.getString(json, "supplierName")+"'||'%' ");
// sqlQuery.append("AND NVL(A.APPROVE_FLAG,0) = DECODE('"+null+"', 'A', NVL(A.APPROVE_FLAG,0), 'P', 1, 'U', 0) ");
// sqlQuery.append("ORDER BY PUR_REQ_NO DESC ");
return sqlQuery.toString();
}
-------------------------------------------------

DROP VIEW MEDICARE_WEB.HL_FRESH_ITEM_STOCK_V;
/* Formatted on 2020/01/19 10:54 (Formatter Plus v4.8.8) */
CREATE OR REPLACE FORCE VIEW medicare_web.hl_fresh_item_stock_v (ID,
store_no,
store_name,
itemtype_no,
item_type_name,
item_no,
item_id,
item_name,
uom_no,
uom_name,
receive,
issue,
stock
)
AS
SELECT ROWNUM ID, s.store_no, s.store_name, i.itemtype_no,
t.item_type_name, i.item_no, i.item_id, i.item_name, u.uom_no,
u.uom_name, receive, issue, NVL (receive, 0) - NVL (issue, 0) stock
FROM in_store s,
in_item i,
in_itemtype t,
in_uom u,
(SELECT from_store_no, item_no,
SUM (DECODE (trntype_no,
1, item_qty,
14, item_qty,
3, item_qty,
0
)
) receive,
SUM (DECODE (trntype_no, 2, item_qty, 0)) issue
FROM in_trnlgr_hl
WHERE trntype_no IN (1, 2, 3)
GROUP BY from_store_no, item_no) d
WHERE s.store_no = d.from_store_no
AND i.item_no = d.item_no
AND i.itemtype_no = t.itemtype_no
AND i.uom_no = u.uom_no(+);

User Access Code:
select u.SUBMENU_NO, u.SUBMENU_ID, u.SUBMENU_NAME, null user_no, 0 status
from sa_submenu u
where u.SUBMENU_TYPE = 'A'
and not exists (select 1
from sa_grantobject g
where g.submenu_no = u.submenu_no
and user_no = 1190000001917)
union
select u.SUBMENU_NO, u.SUBMENU_ID, u.SUBMENU_NAME, o.USER_NO, 1 status
from sa_submenu u, sa_grantobject o
where u.SUBMENU_NO = o.SUBMENU_NO
and u.SUBMENU_TYPE = 'A'
and o.USER_NO =1190000001917;


=================================================
#           ORACLE | USER| SESSION
=================================================

#Create SEQUENCE
=================
DROP SEQUENCE MEDICARE.SEQ_REG_NO;
CREATE SEQUENCE MEDICARE.SEQ_REG_NO
  START WITH 394320
  MAXVALUE 9999999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
------------
DROP SEQUENCE MEDICARE.SEQ_REG_ID;
CREATE SEQUENCE MEDICARE.SEQ_REG_ID
  START WITH 1
  MAXVALUE 999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;  
-------------
DROP SEQUENCE MEDICARE.SEQ_IN_ITEM_NO;
CREATE SEQUENCE MEDICARE.SEQ_IN_ITEM_NO
  START WITH 2
  MAXVALUE 999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;  
-------------
DROP SEQUENCE MEDICARE.SEQ_IN_ITEM_ID;
CREATE SEQUENCE MEDICARE.SEQ_IN_ITEM_ID
  START WITH 6
  MAXVALUE 9999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
--------------
DROP SEQUENCE MEDICARE.SEQ_INVOICE_NO;
CREATE SEQUENCE MEDICARE.SEQ_INVOICE_NO
  START WITH 512708
  MAXVALUE 9999999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;  
 -------------
DROP SEQUENCE MEDICARE.SEQ_INVOICE_ID;
CREATE SEQUENCE MEDICARE.SEQ_INVOICE_ID
  START WITH 1
  MAXVALUE 999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
--------------
DROP SEQUENCE MEDICARE.SEQ_IN_INVOICEDTL_NO;
CREATE SEQUENCE MEDICARE.SEQ_IN_INVOICEDTL_NO
  START WITH 1
  MAXVALUE 9999999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
-----------
DROP SEQUENCE MEDICARE.SEQ_IN_INVOICEDTL_ID;

CREATE SEQUENCE MEDICARE.SEQ_IN_INVOICEDTL_ID
  START WITH 1
  MAXVALUE 999999
  MINVALUE 1
  CYCLE
  NOCACHE
  NOORDER;
  
#Create Function
==================
CREATE OR REPLACE function fd_dob (p_year number default 0, p_month number default 0, p_day number default 0)
return date
as  
begin
    return trunc(sysdate) - (nvl(p_day,0) + (nvl(p_month,0) * 30) + (nvl(p_year,0) * 365));
exception when others then 
    return sysdate;  
end;
/


#Function2
==========
CREATE OR REPLACE function fd_session_no (p_og_no number, p_company_no number) 
return number
    is
    v_val   number;  
begin
        
    select seq_session.nextval into v_val from dual;

    return to_number (p_og_no||p_company_no || to_char (sysdate, 'RRMMDD') || v_val);
        
exception
    when others then return 1;
end;
/

#Funcation3
=============
CREATE OR REPLACE function F_PASSWORD(p_username in varchar2, p_password in varchar2)
return varchar2
is
begin
  return dbms_obfuscation_toolkit.md5
     (input =>
         utl_raw.cast_to_raw(upper(p_username)||'/'||p_password)
     );
end f_Password;
/

#Funcation4
==============
CREATE OR REPLACE function fd_age_calculator (p_date_of_birth   date)
return varchar2
is
    vYears   number :=  0;
    vMonths  number :=  0;
    vDays    number :=  0;
    bd       number := 0;
    cd       number := 0;
    v_last_md   varchar2(30);
    v_last_md_chk   date;
    vReturn  varchar2(500) := null;
begin

    begin
        vYears    :=  trunc (months_between(sysdate,p_date_of_birth)/12);
        vMonths   :=  trunc (mod (months_between(sysdate,p_date_of_birth),12));
        
        bd        :=  to_number (to_char (p_date_of_birth,'dd'));
        cd        :=  to_number (to_char (sysdate,'dd'));
        
        if bd < cd then
            vDays := cd - bd;
        elsif bd > cd then
            begin
                v_last_md := to_char (p_date_of_birth,'dd')||to_char (add_months (sysdate,-1),'mmrrrr');
                v_last_md_chk := to_date (v_last_md,'ddmmrrrr');
            exception
                when others then
                v_last_md := to_char (last_day(add_months (sysdate,-1)),'ddmmrrrr');
            end;
            vDays     := trunc (sysdate) - to_date (v_last_md,'ddmmrrrr');
        end if;
        
        vReturn :=  (case when abs(vYears) >= 1 then abs(vYears) ||'Y ' end)||
                    (case when abs(vMonths) >= 1 then abs(vMonths) ||'M ' end)||
                    (case when vDays >= 1 then vDays ||'D ' end);
    exception
        when others then null;
    end;
    
    return vReturn;

end fd_age_calculator;
/



#Create Package
===============

CREATE OR REPLACE PACKAGE K_PARAMETER   // Declared Package
IS
V_OG_NO             NUMBER;
V_COMPANY_NO        NUMBER;
V_INVOICE_NO        NUMBER;
V_INVOICE_ID        VARCHAR2(50);
V_LAB_NO            NUMBER;
V_LAB_ID            VARCHAR2(50);
V_INVOICE_STDT      DATE;
V_INVOICE_ENDT      DATE;
V_STATUS            VARCHAR2(4000);
V_COUNTRY           VARCHAR2(4000);
V_BU_NO             NUMBER;
V_STAMP_NO          NUMBER;
V_ADMISSION_NO      NUMBER;
V_ADMISSION_ID      VARCHAR2(50);
V_CONSULTATION_NO   NUMBER;
V_STORE_NO          NUMBER;
V_PHR_REQ_NO        NUMBER;
V_STORE_REQ_NO      NUMBER;
V_DK_REQ_NO         NUMBER;
V_NS_REQ_NO         NUMBER;
V_NS_TRN_NO         NUMBER;
V_PUR_ORD_NO        NUMBER;
V_ITEM_NO           NUMBER;
V_NS_NO             NUMBER;
V_HL_TRN_NO         NUMBER;
V_CSD_TRN_NO        NUMBER;

FUNCTION FD_GET_OG_NO RETURN NUMBER;
PROCEDURE PD_SET_OG_NO (P_OG_NO NUMBER);

END K_PARAMETER;
/
-------------------------------

CREATE OR REPLACE PACKAGE BODY educare.K_PARAMETER // Defined Package Body
IS
FUNCTION FD_GET_OG_NO
RETURN NUMBER
IS
BEGIN
    RETURN(V_OG_NO);
END;
PROCEDURE PD_SET_OG_NO (P_OG_NO NUMBER)
IS
BEGIN
    V_OG_NO := P_OG_NO;
END;

END K_PARAMETER;
/


#Create VIEW
=============
CREATE OR REPLACE FORCE VIEW HPMS_PATIENT_TYPE_V
AS
    SELECT p.pat_type_no,
           p.pat_type_name,
           p.reg_no,
           p.ss_creator,
           p.ss_created_on,
           p.ss_created_session,
           p.ss_modifier,
           p.ss_modified_on,
           p.ss_modified_session,
           p.og_no,
           o.og_name,
           p.company_no,
           c.company_name,
           p.active_stat,
           p.TYPE
      FROM hpms_patient_type p, sa_org o, sa_company c
     WHERE p.og_no = o.og_no AND p.company_no = c.company_no;
	 
View2
======
CREATE OR REPLACE FORCE VIEW SA_LOOKUPDTL_V

AS
    SELECT l.lookup_no,
           l.lookup_name,
           d.lookupdtl_no,
           d.lookdtl_name,
           d.description,
           d.active_stat,
           d.sl_no,
           d.ss_creator,
           d.ss_created_on,
           d.ss_created_session,
           d.ss_modifier,
           d.ss_modified_on,
           d.ss_modified_session,
           d.company_no,
           c.company_name,
           d.og_no,
           o.og_name,
           d.lookdtl_name_map
      FROM sa_lookup     l,
           sa_lookupdtl  d,
           sa_org        o,
           sa_company    c
     WHERE     l.lookup_no = d.lookup_no
           AND d.og_no = o.og_no
           AND d.company_no = c.company_no
           AND d.company_no =
               NVL (k_parameter.fd_get_company_no, d.company_no);
			   
			   
			   
			   
//--------------------------------------------


  
Sessions can be killed from within WinSQL using the ALTER SYSTEM KILL SESSION syntax.
First identify the offending session as follows:
SELECT s.sid,
s.serial#,
s.osuser,
s.program
FROM v$session s;
This query will result in a similar result.
SID SERIAL# OSUSER PROGRAM
1 1 SYSTEM ORACLE.EXE
2 1 SYSTEM ORACLE.EXE
3 1 SYSTEM ORACLE.EXE
4 1 SYSTEM ORACLE.EXE
32 45 SCOTT WINSQL.EXE
37 501 SYSTEM WINSQL.EXE

The SID and SERIAL# values of the relevant session can then be substituted into the following statement:
ALTER SYSTEM KILL SESSION 'sid,serial#'

In some situations the Oracle.exe is not able to kill the session immediately. In these cases the session will be "marked for kill". It will then be killed as soon as possible.
Issuing the ALTER SYSTEM KILL SESSION command is the only safe way to kill an Oracle session. If the marked session persists for some time you may consider killing the process at the operating system level. However, this is not recommended as it is dangerous and can lead to instance failures.
It is possible to force the kill by adding the IMMEDIATE keyword:

ALTER SYSTEM KILL SESSION 'sid,serial#' IMMEDIATE
-------------------------------------------------
SELECT s.inst_id,
s.sid,
s.serial#,
--s.sql_id,
p.spid,
s.username,
s.program
FROM gv$session s
JOIN gv$process p ON p.addr = s.paddr AND p.inst_id = s.inst_id
WHERE s.type != 'BACKGROUND';




=================================================
#      No-SQL  | CASSANDRA                                          
================================================= 

=>Set-ExecutionPolicy Unrestricted


=>cassandra
Runing DB server

=>cqlsh
Runing cassandra tarminal

=>describe keyspaces;
check keyspaces

=>CREATE KEYSPACE spring_boot_kespc WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
=>CREATE KEYSPACE zipkin_server_kespc WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
Create keyspaces

=>use spring_boot_kespc;
 
=>CREATE TABLE user_tbl(
   id int PRIMARY KEY,
   name text,
   address text,
   age int
);

=>describe tables;
Check Table

=>INSERT INTO user_tbl (id, name, address, age) VALUES(1001,'MD IMRAN HOSSAIN', 'Dhaka', 30);
=> select * from user_tbl;




Docker:
=================================================
=>docker pull cassandra:3.11
=>docker run --name cassandradb -d -p 9042:9042 cassandra:3.11




Zipkin With MySQL
=================================================

=>ALTER USER 'root'@'localhost'   IDENTIFIED WITH mysql_native_password   BY 'root';
=>java -jar zipkin-server-2.12.9-exec.jar --zipkin.storage.type=mysql --zipkin.storage.mysql.host=localhost --zipkin.storage.mysql.port=3306 --   zipkin.storage.mysql.username=root --zipkin.storage.mysql.password=root --zipkin.storage.mysql.db=zipkin_service_mysql




Zipkin With CASSANDRA
=================================================

=>java -jar zipkin-server-2.12.9-exec.jar --zipkin.storage.type=cassandra3
    
=>cqlsh
=>describe keyspaces;
=>use zipkin2;
=>describe tables;