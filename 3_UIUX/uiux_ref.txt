#################################################
#             UI-UX                            #
#################################################




##row-javaSctpt project with npm,Node.js Webpack
=================================================
Inatall Node and npm, then add this dependencies as:
mkdir simple-row-javascript-app
cd simple-row-javascript-app
code .
npm init
npm init -y
npm i http-server
npm i admin-lte
npm start
npm i html-webpack-plugin --save
npm install html-webpack-plugin --save-dev\n
npm i
npm install html-webpack-plugin --save-dev\n
npm install copy-webpack-plugin --save-dev\n
npm i webpack webpack-cli webpack-dev-server --save-dev
npm run build
npm i html-loader --save-dev
npm run build
npm install --save-dev html-webpack-plugin


Files and structure your projec:
  simple-row-javascript-app/
  │
  ├── node_modules/      # Installed npm modules (created by npm install)
  ├── package.json       # npm package descriptor (created by npm init)
  ├── index.html         # HTML file
  ├── app.js             # JavaScript for handling API calls
  └── style.css          # Optional: Custom CSS (if you want to add any)


Deployto Nginx:
--------------------------
server {
    listen 7172;
    server_name localhost;

    location / {
        root /home/bs960/imranMadbar/myPROJECT/uiux-technology-workshop/javaScriptProjects/withNpmNodeWebpack/simple-row-javascript-app;  # Directory containing static files
        index index.html;
        try_files $uri $uri/ =404;  # Serve 404 if file not found
    }
}





=================================================
##doc | uiux doucment 
=================================================
UI/UX stands for User Interface (UI) and User Experience (UX):
    UI focuses on the visual elements of a product, such as layout, colors, buttons, and typography. 
    It’s about how the product looks and feels to interact with.
    UX is about the overall experience of using the product, ensuring it’s intuitive, efficient, and enjoyable. 
    It considers the user’s journey, ease of navigation, and satisfaction with the product’s functionality.



Common Type UI/UX:
    Web Applications:
        Frameworks & Libraries: Common tools include React and Vue.js for building responsive, interactive UI elements, 
        as well as Angular for more complex, large-scale applications. 

    Mobile Applications:
        Native & Cross-Platform Development: For native apps, Swift (iOS) and Kotlin (Android) are popular, 
        while cross-platform tools like Flutter and React Native allow developers to write a single codebase for both platforms.

    Desktop Applications:
        Cross-Platform Frameworks: Frameworks like Electron and Qt allow developers to create desktop apps with 
        web technologies that run on multiple operating systems (Windows, macOS, and Linux). 



http-server :
=================================================
http-server is a simple, lightweight command-line tool for quickly serving static files over HTTP.
It’s commonly installed globally via Node.js and NPM.


=>npm install -g http-server
Install

=>http-server
=>http-server -p 3000
Navigate to the directory containing the files you want to serve.


=>http-server -a localhost -p 8181 -c-1
Disables caching by setting the cache-control headers to no-cache.(-c-1)



JavaScript, jQuery, npm, Node.js, Angular, and React:
============================================================
1.JavaScript
  What it is: A programming language.
  Purpose: Enables dynamic and interactive web content.
  Where it works:
    In browsers (client-side).
    In servers using platforms like Node.js.
  Examples:
    Adding animations to a webpage.
    Validating form inputs in a browser.
    Making HTTP requests to APIs using fetch or axios.

2.jQuery
  What it is: A JavaScript library.
  Purpose: Simplifies DOM manipulation, event handling, and AJAX.
  Where it works: Client-side, in browsers.
  Why it exists: To make it easier to write cross-browser JavaScript.
  Examples:
    $("#id").hide(); hides an element.
    $.ajax({url: "api.com", success: function(result){...}}); makes an API call.
  Difference from JavaScript:
    jQuery is written in JavaScript.
    It's less commonly used today due to modern JavaScript features and frameworks like React and Angular.

3.npm (Node Package Manager)
  What it is: A package manager for JavaScript.
  Purpose: Manages libraries, tools, and dependencies for JavaScript projects.
  Where it works: Installed as part of Node.js; works in development environments.
  Why it exists: To help developers reuse existing code and manage project dependencies easily.
  Examples:
    Installing a library: npm install axios.
    Running a script: npm start.

npm can manage libraries for all types of JavaScript applications, including plain JavaScript 
(raw/vanilla JS), React, Angular, and any other JavaScript-based frameworks or libraries.
It’s a universal package manager for the entire JavaScript ecosystem.



4. Node.js
  What it is: A runtime environment for executing JavaScript on servers.
  Purpose: Enables server-side programming with JavaScript.
  Where it works: On the server.
  Why it exists: To allow developers to use JavaScript for backend development, providing a unified language 
  for both client and server.
  Examples:
    Building REST APIs.
    Creating server-side rendered web pages.


Purpose of Node.js?
Node.js is a JavaScript runtime environment that allows JavaScript to run on the server side, outside of the browser. 
  1. For Running Development Tools
    Node.js is required for tools like Angular CLI, Webpack, Babel, and npm.
    These tools help:
    Compile TypeScript to JavaScript.
    Bundle JavaScript and CSS files.
    Start development servers (e.g., ng serve).
  2. To Build Server-Side Applications
    Traditionally, JavaScript was only used for client-side programming (in browsers).
    Node.js allows JavaScript to run on the server, enabling full-stack development with a single language.
    Example use cases:
    Building REST APIs.
    Real-time applications (e.g., chat apps with WebSockets).
    Serving static files (e.g., with Express.js).
    Running server-side logic for dynamic content generation.
  3. As a Package Manager Host
    Node.js includes npm (Node Package Manager), which manages JavaScript libraries and dependencies for all 
    kinds of JavaScript applications (e.g., Angular, React, Vue, Node.js-based backends).




5. Angular(For Enterprise apps)
  What it is: A front-end web framework developed by Google.
  Purpose: Helps build large-scale, single-page applications (SPAs).
  Where it works: In the browser (client-side).
  Why it exists: To provide a structured way to build complex front-end applications.
  Examples:
    Data binding between UI and code using {{ }} syntax.
    Routing and navigation between views.
    Difference from JavaScript:
    Angular uses JavaScript/TypeScript but adds structure, features, and tools for developing SPAs.

Can render HTML on the server using Angular Universal.
  Default Behavior: Runs in the browser (client-side).
  Optional Behavior:Can render HTML on the server using Angular Universal.

Simplified Workflow:
  Developer writes code in TypeScript (Angular components, services, etc.).
  Angular CLI (with Webpack) compiles and bundles the code into plain JavaScript, HTML, and CSS.
  Browser receives and executes the bundled JavaScript and renders the HTML.


BuildAngularApp:
  ng serve is for development: It uses Webpack to bundle and serve the app in memory with live reload.
  When you run ng serve, Webpack Dev Server bundles your code and serves it directly from memory (RAM) instead of writing it to disk.

  ng build --prod is for production: It creates fully optimized static files in the dist folder for deployment. 
  Both use Webpack under the hood but have different configurations to suit development or production needs.


Environment for Angular:
  Development Environment (e.g., ng serve)
    Webpack Dev Server:
    When you run ng serve, the Angular CLI uses Webpack Dev Server to create a temporary, in-memory server for 
    serving your Angular app during development.
    This server is only meant for local development, providing features like live reload and hot module replacement (HMR).
    Node.js is required to run Angular CLI and Webpack Dev Server because these tools are written in JavaScript and 
    depend on Node.js as their runtime environment.
  Production Environment:
    When your Angular app is built for production using ng build, it outputs static files (index.html, main.js, etc.) into the dist folder.
    To serve these static files:
      You can use any web server, such as:
      Apache or Nginx.
      Node.js-based servers (e.g., using the Express framework).
      Cloud platforms like AWS S3, Firebase Hosting, or Vercel.
    The web server simply serves the static files to users; no special server environment is created by Angular itself in production.

Webpack itself does not create a server; its primary function is bundling assets (JavaScript, CSS, HTML, etc.). 
However, the confusion arises because the Angular CLI uses Webpack Dev Server (which is a separate tool built on top of Webpack) 
to provide a development server.

Angular not use http-server library:
  Webpack: Bundles your code; does not create a server.
  Webpack Dev Server: A Node.js-based development server that serves files from memory, used in ng serve.
  http-server: A simple server for serving static files, often used with dist files after ng build.


Node.js  in Angular:
  Node.js is not part of the Angular app itself.
  It does not run in the browser.
  It does not directly affect how the Angular app works in production.
  Instead, it powers the tools (CLI, Webpack, TypeScript) that developers use to build the Angular app.

Node.js acts as the runtime environment to execute JavaScript-based tools required during Angular app development. These include:
  Angular CLI (ng commands)
  The Angular CLI (ng serve, ng build, etc.) is built with Node.js.
  Starting the Webpack Dev Server for local development (ng serve).
  npm (which comes bundled with Node.js) manages the dependencies of your Angular application, such as:
  npm (Node Package Manager) runs on top of Node.js. 



6. React (Widely used)
  What it is: A JavaScript library developed by Facebook.
  Purpose: Builds user interfaces, especially for SPAs.
  Where it works: In the browser (client-side) or on the server (with server-side rendering).
  Why it exists: To create reusable UI components and manage state efficiently.
  Examples:
    Creating components: function App() { return <h1>Hello, World!</h1>; }.
    Handling state: useState and useEffect.
    Difference from Angular:
    React is a library focusing only on UI, while Angular is a full-fledged framework.

React was designed to handle client-side rendering (CSR) by default.
It can also handle server-side rendering (SSR) using libraries like Next.js or React's built-in methods like renderToString().


Angular:
  Default: Runs in the browser.
  Can render on the server with Angular Universal.
React:
  Default: Runs in the browser.
  Can render on the server with tools like Next.js.




=================================================
##JavaScript | java-script | js | ECMAScript
=================================================

The latest version of JavaScript is ECMAScript 2023 (ES14).

JavaScript:
    Initially developed for browsers, JavaScript now also runs on servers with the help of environments 
    like Node.js, making it a versatile language for both client-side and server-side development.



Example of JavaScript in Action:
index.html:
<!DOCTYPE html>
<html>
<head>
    <title>JavaScript Example</title>
</head>
<body>
    <button id="myButton">Click me</button>
    <p id="displayText">Hello, World!</p>
    <script src="script.js"></script>
</body>
</html>


JavaScript (script.js):
document.getElementById("myButton").addEventListener("click", function() {
    document.getElementById("displayText").textContent = "Button Clicked!";
});






=================================================
##npm (Node Package Manager) | npm
=================================================
NPM (Node Package Manager) is the default package manager for Node.js, a JavaScript runtime. 
It’s used for installing, sharing, and managing dependencies in JavaScript and Node.js applications.


Install Bootstrap and jQuery using npm:
-------------------------------------------------
=>npm init -y
=>npm install bootstrap
=>npm install jquery
Insert the project, This will add Bootstrap and jQuery as dependencies in your package.json file.



Import Bootstrap and jQuery in Your Project index.html:
--------------------------------------------------
For index.js or app.js:
    import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS
    import 'bootstrap/dist/js/bootstrap.bundle.min.js'; // Import Bootstrap JS (includes Popper.js)
    import $ from 'jquery'; // Import jQuery


ForHtml:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hello World</title>
  <!-- Link Bootstrap CSS -->
  <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
</head>
<body>
  <div class="container">
    <h1 class="text-center">Hello, World!</h1>
    <button class="btn btn-primary" onclick="$('#myModal').modal('show')">Open Modal</button>
    
    <!-- Modal -->
    <div class="modal" id="myModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Example Modal</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <p>This is a Bootstrap modal using jQuery.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Link jQuery -->
  <script src="node_modules/jquery/dist/jquery.min.js"></script>
  <!-- Link Bootstrap JS (includes Popper.js) -->
  <script src="node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




Run a Simple HTTP Server:
=>npm install -g http-server
=>http-server -p 8080


Build the Project for Production Deployment:
=>npm run build
This command will create a dist (or similar output) folder with optimized files (HTML, CSS, JavaScript) that are ready for deployment. 



Configure Nginx to Serve the Application:
server {
    listen 80;
    server_name localhost;

    root /path/to/your/project/dist; # Change this path to your build folder

    index index.html;

    location / {
        try_files $uri /index.html; # This ensures all routes fall back to index.html (for single-page apps)
    }

    # Optional: Enable gzip compression for faster loading
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
}

=>sudo nginx -t
=>sudo systemctl reload nginx
GoTo: http://localhost:80





=================================================
##node  | node.js | Node
=================================================
Node project:
    A Node project is a software project that is built with Node.js, which typically includes JavaScript code, 
    dependencies, and configurations managed through NPM (Node Package Manager). 
    These projects can range from web applications and APIs to server-side tools and utilities.


What is Node.js?
Node.js is an open-source, cross-platform runtime environment that allows you to run JavaScript code outside of a web browser. 
Built on Google Chrome’s V8 JavaScript engine, Node.js is primarily used for building fast, scalable server-side 
and network applications.
It is known for being asynchronous and event-driven, which allows it to handle multiple requests at once, 
making it highly efficient for scalable network applications.

Key Features of Node.js:
    Non-Blocking I/O: Node.js uses an asynchronous, non-blocking I/O model, which allows it to handle many 
    connections simultaneously, ideal for data-intensive applications.

    Single-Threaded Event Loop: Although Node.js is single-threaded, it uses an event-driven architecture 
    to manage concurrent tasks efficiently.

    Package Management with NPM: NPM comes bundled with Node.js and helps manage libraries and tools that developers 
    need, making it easy to share and reuse code.

    Cross-Platform: Node.js runs on various operating systems (Windows, Linux, macOS), making it versatile 
    for different environments.



Express:
    Express is a lightweight, flexible web application framework for Node.js. 
    It simplifies the process of building server-side applications by adding higher-level tools 
    and abstractions on top of Node's core HTTP module, making it easier to handle routing, middleware, and other 
    web functionalities.

Install Express: Express is a popular framework for building APIs with Node.js.
    npm install express





Run a Node.js app:
------------------------------------
=>mkdir my-node-project
=>cd my-node-project
=>npm init -y

=>touch app.js

=>node app.js
Run Your Node.js Application
Open a web browser and go to http://127.0.0.1:3000/.


Node.js without Express:(app.js)
    const http = require('http');
    const server = http.createServer((req, res) => {
    if (req.url === '/' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('Hello, World!');
    } else if (req.url === '/about' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('About page');
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('Not Found');
    }
    });

    server.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
    });

OR
Node.js with Express:(app.js)
    const express = require('express');
    const app = express();

    app.get('/', (req, res) => {
    res.send('Hello, World!');
    });

    app.get('/about', (req, res) => {
    res.send('About page');
    });

    app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
    });





=================================================
##angular | Angular
=================================================
NPM manages packages, Node.js provides a runtime for development tools, and TypeScript is the language used for Angular code.

Angular main components of Angular are:
    Modules (@NgModule): Organize the application into cohesive blocks of functionality.
    Components: Define views and the logic behind the UI, consisting of TypeScript, HTML, and CSS.
    Services: Contain business logic and provide reusable data across components.
    Directives: Modify the behavior or appearance of DOM elements.

How Angular work:
    Webpack builds the code.
    Node.js runs the development server.
    NPM manages dependencies and libraries.
    Angular CLI provides commands to interact with the development environment.





Example HelloWorld:
----------------------------------
Step 1: Install Node.js and NPM
Angular requires Node.js and npm (Node Package Manager). npm comes bundled with Node.js.

=>node -v
=>npm -v

=>npm install -g @angular/cli
=>ng version

=>ng new hello-world-app
Create project

=>cd hello-world-app
=>ng serve
Run the project: http://localhost:4200



Update:the main app component file: src/app/app.component.ts.
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Hello World';
}


Update: src/app/app.component.html
<h1>{{ title }}</h1>





=================================================
##react | React
=================================================

React follows a similar setup to Angular in terms of development tools, but it has its own set of tools and concepts.
React relies heavily on Webpack (through Create React App or custom configurations) to bundle the application, 
Node.js for the development server, and NPM for managing libraries and tools.



How react work:
    React Components: Define the UI and logic.
    JSX: Allows HTML-like syntax inside JavaScript.
    Node.js: Runs the development server and handles backend tasks.
    Webpack: Bundles and optimizes code (via Create React App or custom setup).
    NPM: Manages dependencies (libraries and tools).
    React CLI (Create React App): Sets up the project with default configurations for building and running the app.




Example-Hello-World:
----------------------------------
Just like Angular, React also requires Node.js and npm (Node Package Manager) to run
Step 1: Install Node.js and NPM
=>node -v
=>npm -v

=>npx create-react-app hello-world-app
Set Up a New React Project



=>cd hello-world-app
=>npm start
Start the Development Server: http://localhost:3000


Open and Mofify:  App.js file in the src folder for Hello-World

=>vi src/App.js

import React from 'react';

function App() {
  return (
    <div className="App">
      <h1>Hello, World!</h1>
    </div>
  );
}
export default App;


goto: http://localhost:3000






React vs Angular
=====================================
Type:
  React: Library for building UIs.
  Angular: Full framework for web applications.

Language:
  React: JavaScript or TypeScript.
  Angular: TypeScript.


Rendering:
  React: Virtual DOM for fast updates.
  Angular: Real DOM, slightly slower.
  
Data Binding:
  React: One-way data binding (manual state management).
  Angular: Two-way data binding (automatic syncing).

Dependency Injection:
  React: No built-in DI, relies on external libraries.
  Angular: Built-in DI system.

State Management:
  React: Hooks (useState) or libraries like Redux.
  Angular: Built-in with RxJS.

Templating:
  React: JSX (HTML in JavaScript).
  Angular: HTML templates with directives.

Routing:
  React: Needs libraries like react-router.
  Angular: Built-in router.

Choose React if you prefer flexibility and are comfortable with assembling tools for specific needs.
Choose Angular if you prefer an all-in-one solution with a defined structure and built-in tools.