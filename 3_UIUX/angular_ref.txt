#################################################
#                 ANGULAR                       #
#################################################

=>npm i @angular/cli
=>npm i @angular/cli@11.0.3
=>npm install -g @angular/cli@latest

=>npm uninstall -g @angular/cli
=>npm cache clean --force


=>ng --version

Building:
=>ng serve 
=>node --max_old_space_size=9048 ./node_modules/@angular/cli/bin/ng serve


Manually intall in Ubuntu
----------------------------------
wget https://nodejs.org/dist/v20.11.0/node-v20.11.0-linux-x64.tar.xz  
tar -xf node-v20.11.0-linux-x64.tar.xz

sudo mv nodeV20_11_0 /usr/local/

sudo ln -s /usr/local/nodeV20_11_0/bin/node /usr/local/bin/node
sudo ln -s /usr/local/nodeV20_11_0/bin/npm /usr/local/bin/npm

node -v
npm -v

sudo npm install -g @angular/cli@17.1.1



npm install bootstrap jquery popper.js
Install Bootstrap, jQuery, and Popper.js


"styles": [
  "node_modules/bootstrap/dist/css/bootstrap.min.css",
  "src/styles.css"
],
"scripts": [
  "node_modules/jquery/dist/jquery.min.js",
  "node_modules/popper.js/dist/umd/popper.min.js",
  "node_modules/bootstrap/dist/js/bootstrap.min.js"
]
Include Bootstrap, jQuery, and Popper in angular.json file



ng generate component home
ng generate component about
Generate Home and About Components




Modular app
-------------------------------------
ng new modular-angular-app
ng generate module home --route home --module app.module
ng generate module about --route about --module app.module



Standalone vs NgModule:
  Option 1: Use standalone components for a modern approach with fewer dependencies.
  Option 2: Stick to the traditional NgModule-based structure for better compatibility with existing codebases.


Microservice
==================================

=>npm i single-spa-angular

Install all service or Project
=>npm install

Build all library
=>ng build auth-library

Create Lisnk for Library
=>npm link dist/auth-library
=>npm link .\dist\auth-library\


=>npm link auth-library

Start the service
=>npm start


=================================================
#                  Basic                                          
================================================= 

autocomplete="off"
#alterReportSerManMachBody
@ViewChild('alterReportSerManMachBody') alterReportSerManMachBody: ElementRef;


<tr *ngFor="let val of paymentHistoryList;let i = index">


[ngClass]="{'match-metch-item':val.isCollectable === 1 && val.isCollectFlg === 1}"

let selectableTag = document.getElementById(this.selectTestResultID );

private toastr: ToastrService,
this.toastr.warning("", "Please save this report first.");
if (!this.currentItemTrnHl.currBu || this.currentItemTrnHl.currBu == 0) {
this.toastr.warning('', "Please select a store !");
return;
}


<input type="checkbox" [(ngModel)]="pathTestResult.showInRep"
(ngModelChange)="pathTestResult.showInRep = $event ? 1 : 0"
name="pathTestResult.showInRep" class="selectCheck">



addLoader(): void {
if (!this.alterReportSerManMachBody.nativeElement.classList.contains('loader')) {
this.alterReportSerManMachBody.nativeElement.classList.add('loader');
}
}

removeLoader(): void {
if (this.alterReportSerManMachBody.nativeElement.classList.contains('loader')) {
this.alterReportSerManMachBody.nativeElement.classList.remove('loader');
}
}


#selectedOpetion
-------------------------------------------------
<select class="form-control br-0110"
[(ngModel)]="selectedSalesPerson"
(ngModelChange)="onCnageMarketingPerson()"
>
<option [ngValue]="null">-- Selecte Person --</option>
<option *ngFor="let obj of marketingPersonList;" [ngValue]="obj">
{{obj.salesrepName}}
</option>
</select>


<select class="form-control" 
[(ngModel)]="selectedPriorityDeliveryStatusNo" 
(ngModelChange)="onChangePriority()"
  name="selectedPriorityDeliveryStatusNo">
  <option [ngValue]="0" selected>All</option>
  <option [ngValue]="priority.deliveryStatusNo"
   *ngFor="let priority of priorityList">
	{{priority.deliveryStatusName}}
  </option>
</select>


<select class="form-control" 
        [(ngModel)]="selectedDepartmentNo" 
        (ngModelChange)="onChangeDepartment()"
          name="selectedDepartmentNo">
          <option [ngValue]="0" selected>All</option>
          <option [ngValue]="department.buNo" 
          *ngFor="let department of departmentList">
            {{department.buName}}
          </option>
        </select>

#bsDatepicker
-------------------------------------------------
// Filter fields
fromDate: Date;
toDate : Date;
// max & min date for from date to date
minDate: Date;
maxDate: Date;
private DATE_FMT = 'dd/MM/yyyy';
sendFilterParam: any = {};

initData(): void{
this.toDate = new Date();
this.fromDate = new Date();
this.minDate = this.fromDate;
this.maxDate = this.toDate;
this.fromDate.setDate(this.toDate.getDate() - 0);
this.sendFilterParam.toDate = this.util.getDateStringFromDateAndFormat(this.toDate,this.DATE_FMT);
this.sendFilterParam.fromDate = this.util.getDateStringFromDateAndFormat(this.fromDate,this.DATE_FMT);
}

<input type="text"
class="form-control datePicker"
#fromDatedp="bsDatepicker"
bsDatepicker
[(ngModel)]="fromDate"
(onHidden)="onChangeFromDate()"
[bsConfig]="{ dateInputFormat: 'DD/MM/YYYY' }"
[maxDate]="maxDate"
placeholder="From Date">
<input type="text"
class="form-control datePicker"
#toDatedp="bsDatepicker"
bsDatepicker
[(ngModel)]="toDate"
(onHidden)="onChangeToDate()"
[bsConfig]="{ dateInputFormat: 'DD/MM/YYYY' }"
[minDate]="minDate"
placeholder="To Date">


#Calculation
-------------------------------------------------
decimalFormat( ,2);



#Conditionally css class
-------------------------------------------------
type one
[class.my-class]="step === 'step1'"
type two
[ngClass]="{'my-class': step === 'step1'}"
and multiple option:
[ngClass]="{'my-class': step === 'step1', 'my-class2':step === 'step2' }"
type three
[ngClass]="{1:'my-class1',2:'my-class2',3:'my-class4'}[step]"
type four
[ngClass]="(step=='step1')?'my-class1':'my-class2'"



#Count down time
-------------------------------------------------
if(this.isStartOTDurationAutoCalculate){
setInterval(() => {
this.anaestheticNote.opEndDateTime = new Date();
},500);
}



#Alert Modal
-------------------------------------------------
confirmAlertBsModalRef: BsModalRef;

private modalService: BsModalService,


const initialState = { title: "Are you sure to captur image ?" };
this.confirmAlertBsModalRef = this.modalService.show(ConfirmationDialogComponent, { initialState, class: 'modal-sm' });
this.confirmAlertBsModalRef.content.onClose.subscribe(
  result => {
	if (result == true) {
	  this.onImageCapture();
  }});





#General Modal
-------------------------------------------------
const initialState = {
title: 'Add Store User Info',
strUserDefModelObj: this.strUserDefModelObj,
}
this.addStoreUserDeModalRef = this.modalService.show(AddUserDefaultComponent, { class: 'modal-md', initialState, backdrop: 'static' });
this.addStoreUserDeModalRef.content.onClose.subscribe(result => {
if (result) {
this.storeUserdefaultObj.draw();
this.strUserDefModelObj = {}//new StoreUserModel();
}
});



#API Call
-------------------------------------------------
Service
-------
getPosMedItemDtll(param: any): Observable<any> {
return this.http.post<any>(this.POS_MED_ITEM_DTL, param).pipe(
map((data: any) => data
));
}

getTypeaheadPatientByMRN(obj: any): Observable<any> {
return this.http.post<any>(this.FIND_PATIENT_BY_MRN, obj).pipe(
map((data: any) => data.items)
)
}
searchItemList(param: any): Observable<any> {
return this.http.post<any>(this.ITEM_SEARCH_URL, param).pipe(
map((data: any) => new SearchItemSerializer().toArray(data.model.itemList)
));
}



#Client | Normal Call
-------------------------------------------------
onScreeningUpdate(): any {
let reqObj = {
'prescriptionNo': this.currentPresId
}
console.log("onScreeningUpdateReqObj:", reqObj);
this.presMedScreeningService.screeningUpdate(reqObj).subscribe(
res => {
if (res.success) {
console.log("screeningUpdate:", res);
this.toastr.success('', 'Screening update done.');
} else {
console.log("screeningUpdate Failed:", res);
this.toastr.warning('', 'Screening failed !');
}
},
err => {
console.log("screeningUpdate error: ", err);
})
}


#API | PromiseCall
-------------------------------------------------

getRequiredData() {
let that = this;
this.getDataForScreening()
.then(function (result) {
return that.getPresMedicationByPresId();
}).then(function (result) {
console.log("Finished init API calling.");
});
}

getDataForScreening(): any {
return new Promise<any>((resolve, reject) => {
this.sreeningWorkListService.dataForScreening(this.presScreenParam).subscribe(
res => {
if (res.success) {
console.log("getDataForScreeningRes:", res);
} else {
console.log("getDataForScreening Failed:", res);
}
resolve(res);
},
err => {
reject(null);
console.log("getDataForScreening error: ", err);
})
});
}

getPresMedicationByPresId(): any {
let reqObj = { 'prescriptionNo': this.currentPresId }
return new Promise<any>((resolve, reject) => {
this.presMedScreeningService.findByPrescriptionNo(reqObj).subscribe(
res => {
if (res.success) {
console.log("getPresMedicationByPresId:", res);
} else {
console.log("getPresMedicationByPresId Failed:", res);
}
resolve(res);
},
err => {
reject(null);
console.log("getPresMedicationByPresId error: ", err);
});
});
}


=================================================
#              Custom  | Directive                                          
================================================= 


import { Directive, ElementRef, HostListener } from '@angular/core';

@Directive( {
    selector: '[appTwoDigitDecimaNumber]'
} )
export class TwoDigitDecimaNumberDirective {

    private regex: RegExp = new RegExp( /^\d*\.?\d{0,2}$/g );
    private specialKeys: Array<string> = ['Backspace', 'Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight', 'Del', 'Delete'];
    constructor( private el: ElementRef ) {
    }
    @HostListener( 'keydown', ['$event'] )
    onKeyDown( event: KeyboardEvent ) {
        console.log( this.el.nativeElement.value );
        // Allow Backspace, tab, end, and home keys
        if ( this.specialKeys.indexOf( event.key ) !== -1 ) {
            return;
        }
        let current: string = this.el.nativeElement.value;
        let next: string = current.concat( event.key );
        if ( next && !String( next ).match( this.regex ) ) {
            event.preventDefault();
        }
    }

}

=================================================
#              Custom  | Pipe                                          
================================================= 
PIPE
====
import { Pipe, PipeTransform } from '@angular/core';
import { Injectable } from "@angular/core";

@Pipe({
  name: 'filter'
})
@Injectable({
  providedIn: 'root'
})

export class FilterPipe implements PipeTransform {

  transform(items: any[], field: string, value: string): any[] {
    if (!items) {
      return [];
    }
    if (!field || !value) {
      return items;
    }

    return items.filter(singleItem => {
      if (singleItem[field]) {
        return singleItem[field].toString().toLowerCase().includes(value.toString().toLowerCase());
      }
    });
  }

}

PIPE2
=====
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'multiFilter'
})
export class MultiFilterPipe implements PipeTransform {

  transform(items: any[], value: string, ...fields: string[]): any[] {
    if (!items) {
      return [];
    }
    if (!fields || !value) {
      return items;
    }

    let itemResult = [];
    items.forEach(item => {
      fields.forEach(col => {
        if (item[col] && item[col].toLowerCase().includes(value.toLowerCase())) {
          let dupItem = itemResult.find(obj => { if(obj == item) return item});
          if(!dupItem){
            itemResult.push(item);
          }
        }
      });
    });
    return itemResult;
  }

}

PIPE3
======

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'groupBy'
})
export class GroupByPipe implements PipeTransform {

  transform(collection: any[], property: string): any[] {
    // prevents the application from breaking if the array of objects doesn't exist yet
    if (!collection) {
      return null;
    }

    const groupedCollection = collection.reduce((previous, current) => {
      if (!previous[current[property]]) {
        previous[current[property]] = [current];
      } else {
        previous[current[property]].push(current);
      }

      return previous;
    }, {});

    // this will return an array of objects, each object containing a group of objects
    return Object.keys(groupedCollection).map(key => ({ key, value: groupedCollection[key] }));
  }

}


=================================================
#                  Typeahead                                       
=================================================
Typeahead1: 
===========

Java
=====

@PostMapping("/drListByIdName")
public Response patientListByIdName(@RequestBody String reqObj) {
return doctorScheduleService.drListByIdName(reqObj);
}


public Response drListByIdName(String reqObj) {		
return consultingDocRepository.findDrListByNameOrId(reqObj);
}


public Response findDrListByNameOrId(String reqObj) {
	
	if (null == reqObj) {
		return getErrorResponse("Please enter  Doctor Name Or ID");
	}
	JSONObject json = new JSONObject(reqObj);
	String doctorId = Def.getString(json, "doctorId");
	String doctorName = Def.getString(json, "doctorName");
	
	
	ViewConsultingDocEntity consultingDocEntity = new ViewConsultingDocEntity();
	consultingDocEntity.setCompanyNo(userDetails().getCompanyNo());
	
	if (null == doctorId && doctorName == null) {
		return getErrorResponse("please enter  personalnumber");
	}

	Map<String, Object> searchfields = new HashMap<String, Object>();
	searchfields.put("doctorName", doctorName);
	searchfields.put("doctorId", doctorId);

	return baseList(typedQuery(consultingDocEntity, searchfields));

}

Html::
====
<input [(ngModel)]="selectedDoctor" name="selectedDoctor" [typeaheadAsync]="true"
[typeahead]="drDatasource" [typeaheadScrollable]="true" [typeaheadOptionsInScrollableView]="10"
(typeaheadLoading)="changeTypeaheadLoading($event)" (typeaheadOnSelect)="selectDoctor($event)"
(typeaheadNoResults)="typeaheadNoResults($event)" [typeaheadOptionsLimit]="10"
[typeaheadWaitMs]="300" typeaheadOptionField="doctorName"
[typeaheadItemTemplate]="customTemplate" #patientName placeholder="Search by ID or Name"
class="form-control" autocomplete="off" typeaheadMinLength="3">
<button type="button" *ngIf="selectedDoctor" class="btn remove-doctor-icon" title=""
(click)="onCLickRemoveDr()"><i class="fas fa-times"></i></button>
<ng-template #customTemplate let-model="item" let-index="index">
<table>
  <tr>
	<th>ID:</th>
	<td>{{model.doctorId}}</td>
  </tr>
  <tr>
	<th>Name</th>
	<td>{{model.doctorName}}</td>
  </tr>
</table>
</ng-template>

TS:
=====
  //for typeahead
  drDatasource: Observable<any>
  selectedDoctor: string;
  typeaheadLoading: boolean;
  noResult = false;
  searchObject: any = {};
  selectedDoctorNo: number;
 
    
// == method for typeahed
 changeTypeaheadLoading(e: boolean): void {
  if (this.selectedDoctor.length == 0) {
    this.selectedDoctor = null;
  }
  this.typeaheadLoading = e;
}
selectDoctor(result: any): void {
  console.log(result.item);
  this.selectedDoctorNo = result.item.doctorNo;
  this.searchObject.doctorId = result.item.doctorId;
}
typeaheadNoResults(e: boolean): void {
  this.noResult = e;
}
initiateDoctorData(): any {
  return this.drDatasource = Observable.create((observer: any) => {
    observer.next(this.selectedDoctor);

  }).pipe(mergeMap((token: string) => this.searchDoctor(token)));
}
searchDoctor(token: string): any {
  let searchObj = { "doctorId": token, "doctorName": token };
  return this.pacsIpPortService.getTypeaheadDoctorIDName(searchObj);
}

onCLickRemoveDr() {
  let result = {
    "item": {
      "doctorNo": 0,
      "doctorId": ""
    }
  }
  this.selectedDoctor = "";
  this.selectDoctor(result);
}

//== method for typeahed

 
					  
In Service:
------------
  getTypeaheadDoctorIDName(obj: any): Observable<any> {
    return this.http.post<any>(this.TYPEAHEAD_DOCTOR_ID, obj).pipe(
      map((data: any) => this.sortByregType(data.items))
    )
  }
  
  sortByregType(data){
    if(data == null){
      return data;
    }else{
      return data.sort(sortBy('regType'));
    }
  }  
  
  
//===============================================

=================================================
#                  Component                                          
================================================= 
import { Component, OnInit } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap';
import { ToastrService } from 'ngx-toastr';
import { Subject } from 'rxjs';
import { CleaningReqReceivedDtl } from '../../_coreLinenLaundry/models/cleaning-req-received-dtl.model';
import { CleaningProcessService } from '../../_coreLinenLaundry/services/cleaning-process.service';
import { ClnProcReceivedDetails } from '../../_coreLinenLaundry/models/cln-proc-received-details.model';
@Component({
selector: 'app-received-detail-show-modal',
templateUrl: './received-detail-show-modal.component.html',
styleUrls: ['./received-detail-show-modal.component.css']
})
export class ReceivedDetailShowModalComponent implements OnInit {

onClose: Subject<any>;
hlTrnNo: any;
clnProcReceivedDetails: ClnProcReceivedDetails[];

constructor(
private toastr: ToastrService,
public showReceivedDtlBsModalRef: BsModalRef,
private cleaningProcessService: CleaningProcessService
) { }

ngOnInit() {
this.onClose = new Subject();
console.log('hlTrnNo: ', this.hlTrnNo);
this.getCleaningProcessReceivedDtlList();
}


getCleaningProcessReceivedDtlList(): void {
let reqObj = { "hlTrnNo": this.hlTrnNo }
console.log('getCleaningProcessReceivedDtlList obj:', reqObj);
this.cleaningProcessService.cleaningProcessReceivedDtlList(reqObj).subscribe(
res => {
console.log('getCleaningProcessReceivedDtlList Items res: ', res);
if (res.success) {
this.clnProcReceivedDetails = res.items;
console.log("Landry clean Item :", this.clnProcReceivedDetails);
} else {
this.clnProcReceivedDetails = [];
this.toastr.warning('', res.message);
}
}, err => {
console.error('Error Occur when getCleaningProcessReceivedDtlList item ', err);
});
}

onClickCloseBtn(): void {
console.log('onClickCloseBtn');
this.onClose.next(true);
this.showReceivedDtlBsModalRef.hide();
}
}



#If else
-------------------------------------------------

<div *ngIf="condition; then thenBlock else elseBlock"></div>
<ng-template #thenBlock>Content to render when condition is true.</ng-template>
<ng-template #elseBlock>Content to render when condition is false.</ng-template>



=================================================
#          Angular Pipe | ngFor Group
================================================= 
<ng-template ngFor let-wardItemObj [ngForOf]="wardItemInfoList | groupBy: 'wardStoreName'">
<span>{{wardItemObj.key}}</span>
<ng-template ngFor let-object [ngForOf]="wardItemObj.value">
<span>{{object.itemName}} - {{object.itemQty}}</span>
</ng-template>
</ng-template>
---------------------------------------------------------
<table class="table table-bordered table-striped customTable bg-white"
*ngFor="let group of wardItemInfoList | groupBy: 'wardStoreName'"
>
<tr>
<td colspan="3">
<div class="word-dep-area">
<p>
<strong>Word/Department:</strong>
<span>{{group.key}}</span>
</p>
<!-- <p>
<strong>Date:</strong>
<span>12-12-2019</span>
</p> -->
</div>
</td>
<td></td>
</tr>
<tr>
<th class="text-center">SL</th>
<th class="text-center">Item Name</th>
<th class="text-center">Number of Item</th>
<th class="text-center">Ward</th>
</tr>
<tr *ngFor="let wardItemInfoObj of group.value; let i = index;" (click)="onClickWordItem(wardItemInfoObj)">
<td class="text-center">{{i+1}}</td>
<td class="text-center">{{wardItemInfoObj.itemName}}</td>
<td class="text-center">{{wardItemInfoObj.itemQty}}</td>
<td class="text-center">{{wardItemInfoObj.wardStoreName}}</td>
</tr>
</table>



=================================================
#          DataTable 
================================================= 

#General
-------------------------------------------------
this.receivedGridObj.rows().deselect();

// {
// "visible": false,
// data: 'ssModifiedON',
// name: 'ssModifiedON'
// },


initOTStatusGrid() {
let that = this;
this.otRequisitionStatusGrid = $(this.otRequisitionStatusGridTbl.nativeElement);
this.otRequisitionStatusGridObj = this.otRequisitionStatusGrid.DataTable({
pagingType: 'full_numbers',
pageLength: 10,
serverSide: true,
processing: true,
ajax: {
url: environment.baseUrl + environment.hospitalApiUrl + '/ot-requisition-status/gridList',
type: "GET",
data: function (sendData) {
sendData.personalNumber = that.gridFilterParam.personalNumber;
sendData.admissionId = that.gridFilterParam.admissionId;
sendData.fromReqDate = that.gridFilterParam.fromReqDate;
sendData.toReqDate = that.gridFilterParam.toReqDate;
sendData.ipdWardNo = that.gridFilterParam.ipdWardNo;
sendData.itemNo = that.gridFilterParam.itemNo
if(that.ipdsStation)sendData.userStationNo = that.ipdsStation.nurseStationNo;
if(that.userStationNoList)sendData.userStationNoList = that.userStationNoList.toString();

},
beforeSend: function (xhr) {
xhr.setRequestHeader('Authorization', "bearer " + that.authService.getAccessToken());
xhr.setRequestHeader('Content-Type', "application/json");
},
dataSrc: function (response) {
if (response.obj) {
response.draw = response.obj.draw;
response.recordsTotal = response.obj.recordsTotal;
response.recordsFiltered = response.obj.recordsFiltered;
return response.obj.data;
}
},
error: function (request) {
console.log("request.responseText", request.responseText);
}
},
"order": [[2, "desc"]],
columns: [
// {
// "visible": false,
// data: 'ssModifiedON',
// name: 'ssModifiedON'
// },
{
title: 'Patient Name',
data: 'patientName',
name: 'patientName',
render: function (data, type, row) {
let patientName;
if (row.rankName){
patientName = row.rankName + ' ' + row.patientName;
} else {
patientName = row.patientName;
}
if (row.photoUrl) {
return '<div><img src="data:image/jpeg;base64,' + row.photoUrl + '" width="50px" height="50px" class="rounded-circle boder"><span class="pl-1">' + patientName + '</span></div>';
} else {
if (row.gender == 'F') {
return '<div><img src="assets/images/profile-small-female.jpg" width="50px" height="50px" class="rounded-circle"><span class="pl-1">' + patientName + '</span></div>';
} else {
return '<div><img src="assets/images/profile-small.jpg" width="50px" height="50px" class="rounded-circle"><span class="pl-1">' + patientName + '</span></div>';
}
}
}
}, {
title: 'Personal No.',
data: 'personalNumber',
name: 'personalNumber'
},
{
title: 'Relation',
data: 'relation',
name: 'relation',
render: function(data){
if(data == ' '){
return 'Self';
}else{
return data
} ;
}
},
{
title: 'Admission No.',
data: 'admissionId',
name: 'admissionId'
},
{
title: 'Age',
data: 'age',
},{
title: 'Unit',
data: 'unitName',
},
{
orderable: false,
title: 'Anes. Conf.',
className: 'textCtd',
render: (data, type, row) => {
let resState: string;
if (row.anaestChkupDoneFlg == 1) {
resState = '<i class="far fa-check-square checkIcon"></i>'
} else {
resState = '<i class="fas fa-times pendingReportPrint"></i>'
}
return resState;
},
},
{
orderable: false,
title: 'Doc. Conf.',
className: 'textCtd',
render: (data, type, row) => {
let resState: string;
if (row.otConfirmationFlag == 1) {
resState = '<i class="far fa-check-square checkIcon"></i>'
} else {
resState = '<i class="fas fa-times pendingReportPrint"></i>'
}
return resState;
},
},
{
orderable: false,
title: 'OT Execution',
className: 'textCtd',
render: (data, type, row) => {
let resState: string;
if (row.otInFlag == 1) {
resState = '<i class="far fa-check-square checkIcon"></i>'
} else {
resState = '<i class="fas fa-times pendingReportPrint"></i>'
}
return resState;
},
},
{
orderable: false,
title: 'OT Completed',
className: 'textCtd',
render: (data, type, row) => {
let resState: string;
if (row.otOutFlag == 1) {
resState = '<i class="far fa-check-square checkIcon"></i>'
} else {
resState = '<i class="fas fa-times pendingReportPrint"></i>'
}
return resState;
},
},
{
orderable: false,
title: 'Ret. Ward.',
className: 'textCtd',
render: (data, type, row) => {
let resState: string;
if (row.returnIpdFlag == 1) {
resState = '<i class="far fa-check-square checkIcon"></i>'
} else {
resState = '<i class="fas fa-times pendingReportPrint"></i>'
}
return resState;
},
},
{
orderable: false,
title: 'Ref. PACCU.',
className: 'textCtd',
render: (data, type, row) => {
let resState: string;
if (row.transferPacuFlg == 1) {
resState = '<i class="far fa-check-square checkIcon"></i>'
} else {
resState = '<i class="fas fa-times pendingReportPrint"></i>'
}
return resState;
},
},
{
orderable: false,
title: 'Ref. CCU.',
className: 'textCtd',
render: (data, type, row) => {
let resState: string;
if (row.transferCcuFlg == 1) {
resState = '<i class="far fa-check-square checkIcon"></i>'
} else {
resState = '<i class="fas fa-times pendingReportPrint"></i>'
}
return resState;
},
},
],
select: true,
responsive: true,
autoWidth: true,
rowCallback: (row: Node, data: any | Object) => {
const self = this;
$('td', row).off('click');
$('td', row).on('click', () => {
self.selectedAdmission = data;
self.selectedAdmission.dob = new Date(self.selectedAdmission.dob)
this.recivedPatient = self.selectedAdmission;
this.onClickGridList(data);
});
return row;
},
})
}

#DataTable2
-------------------------------------------------

initSamplePendingGrid() {
let that = this;
this.samplePendingGrid = $(this.samplePendingTable.nativeElement);
this.samplePendingGridObj = this.samplePendingGrid.DataTable({
pagingType: 'full_numbers',
pageLength: 10,
serverSide: true,
processing: true,
ajax: {
url: this.BASE_URL + "/path-simple-receive-atlab-pending-cc-v2/gridList",
type: "GET",
data: function (sendData) {
sendData.fromDate = that.simplePendingfilterParams.fromDate;
sendData.toDate = that.simplePendingfilterParams.toDate;
sendData.selectedPendingPatientFrom = that.simplePendingfilterParams.selectedPendingPatientFrom;
sendData.selectedDepartmentNo = that.simplePendingfilterParams.selectedDepartmentNo;
sendData.selectedCompanyNo = that.simplePendingfilterParams.selectedCompanyNo;
sendData.hospitalNumber = that.simplePendingfilterParams.hospitalNumber;
sendData.personalNumber = that.simplePendingfilterParams.personalNumber;
sendData.invoiceId = that.simplePendingfilterParams.invoiceId;
sendData.admissionId = that.simplePendingfilterParams.admissionId;
sendData.labId = that.simplePendingfilterParams.labId;
sendData.deliveryStatusNo = that.simplePendingfilterParams.deliveryStatusNo;
},
beforeSend: function (xhr) {
//TODO: Need to change bearer token from static to dynamic
xhr.setRequestHeader('Authorization', "bearer " + that.authService.getAccessToken());
xhr.setRequestHeader('Content-Type', "application/json");
},
dataSrc: function (response) {
// console.log("path-simple-pending grid res:", response);
response.draw = response.obj.draw;
response.recordsTotal = response.obj.recordsTotal;
response.recordsFiltered = response.obj.recordsFiltered;
if (response.obj.data.length > 0) {
that.currentInvoiceId = response.obj.data[0].invoiceId;
that.getPatientDemographyInfo();
}
return response.obj.data;
}
},
"order": [[0, "desc"]],
columns: [
{
"visible": false,
data: 'invoiceNo',
name: 'invoiceNo'
},
{
orderable: false,
title: 'SRC',
render: (data, type, row) => {
let finalRwo: string;
finalRwo = ''
if (row.btobLabNo != null && row.btobLabNo>0) {
finalRwo += 'B2B';
}else if(row.billUnitNo != null && row.billUnitNo>0){
finalRwo += 'BLU';
}else {
finalRwo += 'GNR';
}
return finalRwo;

},
},
{
title: 'Invoice ID',
data: 'invoiceId',
name: 'invoiceId'
},
{
title: 'LAB ID',
data: 'labId',
name: 'labId'
},
{
title: 'Delivery Date',
data: 'deliveryDateTime',
render: (data) => {
return moment(new Date(data)).format("DD/MM/YYYY").toString()
}
},
{
title: 'Patient Name',
data: 'patientName',
name: 'patientName'
},
{
title: 'Exam Name',
data: 'itemName'
},
{
title: 'Department',
data: 'buName'
},
{
title: 'Specimen',
data: 'samName'
},
{
title: 'Container',
data: 'conName'
}
],
responsive: true,
select: true,
rowCallback: (row: Node, data: any[] | Object) => {
// console.log("*****",row, data);
if (data['btobLabNo'] != null && data['btobLabNo']>0) {
$(row).addClass('B2B')
}else if(data['billUnitNo'] != null && data['billUnitNo']>0){
$(row).addClass('BLU')
}else {
$(row).addClass('GNR')
}

$('td', row).bind('dblclick', () => {
that.goToSampleReceiveClickHandler(data);
});
$(row).bind('click', () => {
$(row).removeClass('selected')
$(row).addClass('selected');
that.onClickSampleReceive(data);
});
return row;
}
});
}


#DataTable3
-------------------------------------------------

initLandryItemGrid() {
let that = this;
this.receivedGrid = $(this.receivedGridTbl.nativeElement);
this.receivedGridObj = this.receivedGrid.DataTable({
pagingType: 'full_numbers',
pageLength: 10,
serverSide: true,
processing: true,
bLengthChange: false,
//deferLoading:0,
initComplete: function () {
$('.dataTables_filter input').unbind()
.bind('keyup change', function (e: any) {
// console.log("Key Kore ##########:",e.keyCode);
if (e.keyCode === 13) {
if (e.target.value.length != undefined && e.target.value.length > 2) {
that.receivedGridObj.search(e.target.value).draw();
}
}
if (e.target.value == "") {
that.receivedGridObj.search("").draw();
}
});
},
ajax: {
url: environment.baseUrl + environment.linenLaundryAppUrl + "/cleaning-process/received/gridList",
type: "GET",
data: function (sendData) {
sendData.fromDate = that.sendgridParam.fromDate;
sendData.toDate = that.sendgridParam.toDate;
},
beforeSend: function (xhr) {
xhr.setRequestHeader('Authorization', "bearer " + that.authService.getAccessToken());
xhr.setRequestHeader('Content-Type', "application/json");
},
dataSrc: function (response) {
// console.log("path-simple-pending grid res:", response);
response.draw = response.obj.draw;
response.recordsTotal = response.obj.recordsTotal;
response.recordsFiltered = response.obj.recordsFiltered;
return response.obj.data;
}
},
"order": [[1, "desc"]],
columns: [
{
"visible": false,
data: 'hlTrnNo',
name: 'hlTrnNo'
},
{
title: 'Req No',
data: 'refTrnId',
name: 'refTrnId'
},
{
title: 'Receive No',
data: 'hlTrnId',
name: 'hlTrnId'
},
{
title: ' Date',
data: 'trnDate',
render: (data) => {
return moment(data).format("DD/MM/YYYY")
}
},
{
title: 'Description',
data: 'descr',
},
{
title: 'Status',
data: 'trnStatusDate'
}
],
responsive: true,
select: true,
rowCallback: (row: Node, data: any[] | Object, index: number) => {
$(row).unbind('click');
$(row).bind('click', () => {
$(row).removeClass('selected')
$(row).addClass('selected');
this.onClickGridItem(data);
});
$('td', row).unbind('dblclick');
$('td', row).bind('dblclick', () => {
that.onDblClickGridItem(data);
});
return row;
}
});
}
onClickGridItem(obj): void {
console.log("onClickGridItem: ", obj);
this.currentItemTrnHl = obj;
}


onDblClickGridItem(obj): void {
console.log("onDblClickGridItem: ", obj);
this.currentItemTrnHl = obj;
this.showDetailsItem();
}

createdCell: (td, cellData, rowData, row, col) => {
$(td).addClass('lightRed');
}

#DataTable4
-------------------------------------------------
itemStockGrid() {
const that = this;
this.itemStockList = $(this.itemStockTable.nativeElement);
this.itemStockObj = this.itemStockList.DataTable({
pagingType: 'full_numbers',
pageLength: 10,
serverSide: true,
processing: true,
ajax: {
url: environment.baseUrl + environment.pharmacyApiUrl + '/item-stock/gridList',
type: 'GET',
data: function (sendData: any) {
sendData.storeNo = that.storeNo;
sendData.stockQty = that.stockQty;
},
beforeSend: function (xhr) {
xhr.setRequestHeader('Authorization', 'bearer ' + that.authService.getAccessToken());
xhr.setRequestHeader('Content-Type', 'application/json');
},
dataSrc: function (response) {
response.draw = response.obj.draw;
// console.log("Grid: ",response);
response.recordsTotal = response.obj.recordsTotal;
response.recordsFiltered = response.obj.recordsFiltered;
return response.obj.data;
},
error: function (request) {
console.log('request.responseText', request.responseText);
}
},
'order': [[0, 'desc']],
columns: [
{
'visible': false,
data: 'itemId',
name: 'itemId',
},
// {
// 'visible': false,
// data: 'itemNo',
// name: 'itemNo'
// },
{
title: 'Item Name',
data: 'itemName',
name: 'itemName',
className: 'grid-name-item2-th',
},
{
title: 'Type Name',
data: 'itemTypeName',
name: 'itemTypeName',
},
{
title: 'UoM',
data: 'uomName',
name: 'uomName',
},
{
title: 'Generic Name',
data: 'genericName',
name: 'genericName',
className: 'grid-name-item-th',
},
{
title: 'Therapeutic Name',
name: 'therapeuticName',
data: 'therapeuticName',
},
{
title: 'Manufacturer Name',
data: 'manufacturerName',
name: 'manufacturerName',
},
{
title: 'Sales Price',
data: 'salesPrice',
// name: 'salesPrice',
},
{
title: 'Pur Price',
data: 'purchasePrice',
// name: 'purchasePrice',
},
{
title: 'Stock Qty',
data: 'stockQty',
// name: 'stockQty',
}
],
rowGroup: {
startRender: function (rows, group) {
var totalQty = rows
.data()
.pluck('stockQty')
.reduce(function (a, b) {
return a + b;
}, 0);
return '<div> Item No :: ' + group + '</div> <div> Item Total: ' + totalQty + '</div>'
},
// endRender: function (rows, group) {
// var totalQty = rows
// .data()
// .pluck('stockQty')
// .reduce(function (a, b) {
// return a + b;
// }, 0);
// return 'Item total:' + totalQty;
// },
dataSrc: function (row) {
return row.itemId;
},
},
responsive: true,
select: true,
rowCallback: (row: Node, data: any[] | Object) => {
$('td', row).bind('click', () => {
that.getSelectedItem(data);
});
return row;
}
});
}
getSelectedItem(obj: any): void {
console.log(obj)
}


#DataTable5 | Color legend
-------------------------------------------------
 initAppointmentDetailsGrid() {
    let that = this;
    this.appointmentDetailsGrid = $(this.appointmetDetailsTable.nativeElement);
    this.appointmentDetailsGridObjec = this.appointmentDetailsGrid.DataTable({
      pagingType: 'full_numbers',
      pageLength: 100,
      serverSide: true,
      processing: true,
      deferLoading: 0,
      sDom: '<"top"f >rt<"bottom"ip><"clear">',
      searching: false,
      ajax: {
        url: environment.baseUrl + environment.diagnosticApiUrl + "/opd-appointments/opdAppointmentDetails",
        type: "GET",

        data: function (sendData) {
          sendData.doctorNo = that.simplefilterParams.doctorNo
          sendData.slotDate = that.simplefilterParams.slotDate
          sendData.shiftdtlNo = that.simplefilterParams.shiftdtlNo
        },

        beforeSend: function (xhr) {
          xhr.setRequestHeader('Authorization', "bearer " + that.authService.getAccessToken());
          xhr.setRequestHeader('Content-Type', "application/json");
        },

        dataSrc: function (response) {
          response.draw = response.obj.draw;
          response.recordsTotal = response.obj.recordsTotal;
          response.recordsFiltered = response.obj.recordsFiltered;
          that.slotList = response.obj.data;

          if(that.selectedDoctor && response.obj.data.length == 0){
            if(that.scheduleStatus==0){
              that.toastr.warning("No Schedule found !")
            }else {
              that.toastr.warning("No Sloat found, Please generate slot.")
            }
          }
          return response.obj.data;
        },
   
      },
      order: [[1, "desc"]],
      columns: [
        {
          orderable: false,
          data: 'appointType',
          render: (data) => {
            if (data == 'Internet') {
              return `<i class="fas fa-globe-asia" data-toggle="tooltip" title="Online appointment"></i>`;
            } else if (data == 'Phone') {
              return `<i class="fas fa-phone" data-toggle="tooltip" title="Phone appointment"></i>`;
            } else if (data == 'Walking') {
              return `<i class="fas fa-walking" data-toggle="tooltip" title="Walking appointment"></i>`;
            } else {
              return '';
            }
          }
        }, {
          title: 'SL.',
          data: 'slotSl',
          name: 'slotSl'
        },
        {
          title: 'Start Time',
          data: 'startTime',
          name: 'startTime',
          render: (data) => {
            return moment(new Date(data)).format("hh:mm A").toString()
          }
        },
        {
          title: 'End Time',
          data: 'endTime',
          render: (data) => {
            return moment(new Date(data)).format("hh:mm A").toString()
          }
        },
        {
          title: 'Patient Name',
          data: 'patientName',
        },
        {
          title: 'Reg.No.',
          data: 'hospitalNumber',
        },
        {
          title: 'Mobile No',
          data: 'phoneMobile',
        },
        {
          title: 'Booked By',
          data: 'bookedBy',
          render: (data, type, row) => {
            if (row.appointStatus == 1) {
              return data;
            } else {
              return '';
            }
          }
        },
        {
          title: 'Modified By',
          data: 'modifyByName',
          render: (data, type, row) => {
            if (row.modifyByName) {
              return data;
            } else {
              return '';
            }
          }
        },
        {
          title: 'Confirm By',
          data: 'confirmByName',
        },
        {
          "orderable": false,
          class: 'text-center',
          render: (data, type, row) => {
            if (row && !row.appointNo || row.appointStatus == 0) {
              return '<button type="button" class="btn btn-warning fontsize booked-slot">Booking</button>';
            } else {
              return '<button type="button" class="btn btn-warning fontsize disabled">Booked</button>';

            }
          }
        },
        {
          "orderable": false,
          class: 'text-center',
          visible: that.consPriv,
          render: (data, type, row) => {
            if (row && row.appointNo) {
              return '<button type="button" class="btn btn-success fontsize consultation">Consultation</button>';
            } else {
              return '<button type="button" class="btn btn-success fontsize disabled">Consultation</button>';
            }
          }
        },
        {
          "orderable": false,
          class: 'text-center',
          render: (data, type, row) => {
            if (row && row.appointNo && !row.consultationNo) {
              return '<button type="button" class="btn btn-info fontsize update-slot">Update</button>';
            } else {
              return '<button type="button" class="btn btn-info fontsize disabled">Update</button>';
            }
          }
        },
        {
          "orderable": false,
          class: 'text-center',
          render: (data, type, row) => {
            if (row && row.appointNo && !row.consultationNo) {
              return '<button type="button" class="btn btn-danger fontsize cencel-slot">Cancel</button>';
            } else {
              return '<button type="button" class="btn btn-danger fontsize disabled">Cancel</button>';
            }
          }
        },
        {
          "orderable": false,
          class: 'text-center',
          render: (data, type, row) => {
            if (row && row.appointNo) {
              return '<button type="button" class="btn btn-warning fontsize disabled">Block</button>';
            } else {
              return '<button type="button" class="btn btn-warning fontsize appBlock">Block</button>';
            }
          }
        },
        {
          "orderable": false,
          class: 'text-center',
          render: (data, type, row) => {
            if (row && !row.appointNo) {
              return '<button type="button" title="Re-Print" class="btn btn-primary fontsize disabled">R</button>';
            } else {
              return '<button type="button" title="Re-Print" class="btn btn-primary fontsize rePrintBtnRef">R</button>';
            }
          }
        }
      ],
      rowGroup: {
        startRender: function (rows, group) {
          if (group === rows.data()[0].shiftdtlNo) {
            if (group === 1) {
              return '<div> Morning Shift</div>';
            } else if (group === 2) {
              return '<div> Evening Shift</div>';
            }
          }
        },
        dataSrc: ['shiftdtlNo']
      },
      select: true,
      rowCallback: (row: Node, data: any[] | Object) => {
        let rowObj: any = {};
        rowObj = data;
        $(row).find(".booked-slot").on("click", function () {
          that.book(data);
        });

        $(row).find(".update-slot").click(function () {
          that.book(data);
        });
        $(row).find(".rePrintBtnRef").click(function () {
          that.onClickRePrintBtn(data);
        });
        $(row).find(".cencel-slot").click(function () {
          that.opdCancel(data);
        });

        $(row).find(".consultation").on("click", function () {
          that.retrieve(data);
        });
        $(row).find(".appBlock").on("click", function () {
          that.onClickAppBlock(data);
        });
        $(row).bind('click', () => {
          console.log(data);
          if (!$(row).hasClass('selected')) {
            that.selectedSlot = data;
          } else {
            that.selectedSlot = '';
          }
        });

        // var endTime = new Date(rowObj.endTime);
        var endTime = moment(new Date(rowObj.endTime));
        var currentDate = moment(new Date());
        if (endTime < currentDate) {
          //console.log(rowObj.slotSl,endTime,currentDate);
          $(row).find('td:eq(0)').css('background-color', '#ff0000');
          $(row).find('td:eq(1)').css('background-color', '#ff0000');
          $(row).find('td:eq(2)').css('background-color', '#ff0000');
          $(row).find('td:eq(3)').css('background-color', '#ff0000');
          that.setBgColor(row, rowObj);
        } else {
          $(row).find('td:eq(0)').css('background-color', 'transparent');
          $(row).find('td:eq(1)').css('background-color', 'transparent');
          $(row).find('td:eq(2)').css('background-color', 'transparent');
          $(row).find('td:eq(3)').css('background-color', 'transparent');
          that.setBgColor(row, rowObj);
        }
        return row;
      }
    }
    );
  }

  setBgColor(row, rowObj) {
    if (rowObj.slotStatus == 1) {
      $(row).find('td:eq(0)').css('background-color', '#ffc000');
      $(row).find('td:eq(1)').css('background-color', '#ffc000');
      $(row).find('td:eq(2)').css('background-color', '#ffc000');
      $(row).find('td:eq(3)').css('background-color', '#ffc000');
    } if (rowObj.consultationNo) {
      $(row).find('td:eq(0)').css('background-color', '#266a2e');
      $(row).find('td:eq(1)').css('background-color', '#266a2e');
      $(row).find('td:eq(2)').css('background-color', '#266a2e');
      $(row).find('td:eq(3)').css('background-color', '#266a2e');
    } else if (rowObj.slotStatus == 6) {
      $(row).find('td:eq(0)').css('background-color', '#800000');
      $(row).find('td:eq(1)').css('background-color', '#800000');
      $(row).find('td:eq(2)').css('background-color', '#800000');
      $(row).find('td:eq(3)').css('background-color', '#800000');
    } if (rowObj.slotStatus == 8) {
      $(row).find('td:eq(4)').css('background-color', '#708090');
      $(row).find('td:eq(5)').css('background-color', '#708090');
      $(row).find('td:eq(6)').css('background-color', '#708090');
      $(row).find('td:eq(7)').css('background-color', '#708090');
      $(row).find('td:eq(8)').css('background-color', '#708090');
      $(row).find('td:eq(9)').css('background-color', '#708090');
      $(row).find('td:eq(10)').css('background-color', '#708090');
      $(row).find('td:eq(11)').css('background-color', '#708090');
      $(row).find('td:eq(12)').css('background-color', '#708090');
      $(row).find('td:eq(13)').css('background-color', '#708090');
      $(row).find('td:eq(14)').css('background-color', '#708090');
    } else if (rowObj.extraSlot == 1) {
      $(row).find('td:eq(0)').css('background-color', '#008080');
      $(row).find('td:eq(1)').css('background-color', '#008080');
      $(row).find('td:eq(2)').css('background-color', '#008080');
      $(row).find('td:eq(3)').css('background-color', '#008080');
    }
  }




=================================================
#           Validation | Object check
=================================================
if (Object.keys(this.currentEmployee).length === 0 && this.currentEmployee.constructor === Object) {
this.toast.warning('', "Please select a employee !");
return;
}

=================================================
#                  Array Operation
=================================================

let array = [
    { id: 1, value: "itemname" },
    { id: 2, value: "itemname" }
];


#Array Short | Order
-------------------------------------------------
this.arr = this.arr.sort((a,b) => a.chapter > b.chapter ? 1 : -1);

-------------------------------------------------
if (this.fetalGrowthMeasureList != null) {
this.fetalGrowthMeasureList.sort(function (a, b) {
return a.growthDurationVal - b.growthDurationVal;
});
}


#Get Obj from Array By Condition
----------------------------------------------------
let defObj = this.patientTypeList.find(obj => obj.phrDefaultFlg == 1);


#Check doplicated item
-------------------------------------------------
let newArrForItemExistsCheck = this.itemTrnDtlHlList.filter((obj: InTrnDtlHl) => obj.itemNo === result.itemNo);
if (newArrForItemExistsCheck && newArrForItemExistsCheck.length > 0) {
this.toastr.warning('', `${result.itemName} already added !`);
return;
}
this.itemTrnDtlHlList.unshift(result);


#Filter Array
------------------------------------------
let newArr = this.pathSampleCollectionccList.filter((obj: PathSampleCollectionCCModel) => obj.isCollectable === 1);
let newArrForQtyCheck = this.itemTrnDtlHlList.filter((obj: InTrnDtlHl) =>  obj.itemQty > obj.stockQty);
    if(newArrForQtyCheck && newArrForQtyCheck.length > 0){
      this.toastr.warning('', `Invlaid ${newArrForQtyCheck[0].itemName} quentity, Dirty item  more then Stock Item !`);
      return;
    }

this.pathsMethodMthList = this.pathsMethodAllData.filter((obj:PathsMethod) => obj.textType === 'MTH');



#Group By
-------------------------------------------------

groupBy(objectArray, property) {
return objectArray.reduce(function (acc, obj) {
  let key = obj[property]
  if (!acc[key]) {
	acc[key] = []
  }
  acc[key].push(obj)
  return acc
}, {})
}


#Ng for with data pipe
-------------------------------------------------
<tbody class="check_input">
<tr *ngFor="let nonLabReport of nonLabReportList;let i = index;">
<td>{{i+1}}</td>
<td>{{nonLabReport.finalizeDate | date: 'dd/MM/yyyy h:mm a'}}</td>
<td>{{nonLabReport.itemName}}</td>
<td>{{nonLabReport.buName}}</td>
<td>
<button class="btn btn-primary btnLab" (click)="radiologyImage(nonLabReport.accessionId)">Image</button>
</td>
<td>
<button class="btn btn-primary btnLab" (click)="loadRadiologyData(nonLabReport)">Report</button></td>
</tr>
</tbody>



#API Calling
-------------------------------------------------
getDepartmentList():Observable<any>{
return this.http.get<any>(this.DEPARTMENT_LIST).pipe(
map((data: any) => data
));
}
leaveApprovedOrReject(reqObj: any): Observable<any> {
return this.http.post<any>(this.LEAV_APPROVED_OR_REJECT, reqObj).pipe(
map((data: any) => data
));
}

checkInvoiceId(invoiceId: string) {
return this.http.get<any>(`${this.CHECK_INVOICE_ID}`, {
params: new HttpParams().set('invoiceId', invoiceId)
})
}


findBedListByWard(data:string){
let params = new HttpParams().set("wardNo",data);
return this.http.get(this.BED_BY_WARD, {params}).pipe(map((data:any) => data))
}


#Alert
-------------------------------------------------
if (this.selectedDoctor) {
const initialState = { title: "Do you want to Delete?" };
this.bsModalRef = this.modalService.show(ConfirmationDialogComponent, { initialState, class: 'modal-sm' });
this.bsModalRef.content.onClose.subscribe(
result => {
if (result == true) {
this.doctorService.deleteDoctor(this.selectedDoctor.doctorNo).subscribe(
resp => {
this.toastr.success('', "Delete Successfull");
this.docTableObj.draw();
this.selectedDoctor = "";
},
err => {
this.toastr.warning('', "Error occured on Delete");
}
)
}
});
} else {
this.toastr.warning("Please select a Doctor");
}




#Html if else
-------------------------------------------------

<p *ngIf="currentLeaveApprovalObj.apprvlRemarks; else remarkPending">
{{currentLeaveApprovalObj.apprvlRemarks}}
</p>
<ng-template #remarkPending>
( Approval pending )
</ng-template>


#Typeahead
-------------------------------------------------

<input type="text" class="form-control borderradius"
name="doctorSelect"
[(ngModel)]="selectedOTItem"
[typeahead]="otList"
(typeaheadOnSelect)="onSelectOTItem($event)"
(ngModelChange)="onOTItemChange()"
[typeaheadOptionsLimit]="7"
typeaheadMinLength="2"
typeaheadOptionField="itemName"
placeholder="Operation Name ..."
autocomplete="off">


onSelectOTItem(ev:any): void {
console.log(ev)
if(ev.item){
this.gridFilterParam.itemNo = ev.item.itemNo
this.reqComfirmationGridObj.draw();
}
}
onOTItemChange(): void {
console.log("onOTItemChange");
if(this.selectedOTItem == undefined || this.selectedOTItem == ""){
this.gridFilterParam.itemNo = undefined;
this.reqComfirmationGridObj.draw();
}
}


#Date picker
-------------------------------------------------
fromDate: Date;
toDate: Date;
maxDate: Date;

ngOnInit() {
this.toDate = new Date()
this.fromDate = new Date();
this.maxDate = new Date();
this.fromDate.setDate(this.toDate.getDate() - 7);
this.gridFilterParam.toDate = new DatePipe('en-US').transform(this.toDate, 'dd/MM/yyyy');
}

<input type="text"
class="form-control datePicker"
bsDatepicker
[maxDate]="maxDate"
[(ngModel)]="fromDate"
(onHidden)="onChangeFormDate()"
[bsConfig]="{ dateInputFormat: 'DD/MM/YYYY'}"
>

onChangeFormDate(): void {
if (this.fromDate != undefined) {
let modifyFormDate: string = new DatePipe('en-US').transform(this.fromDate, 'dd/MM/yyyy');
this.gridFilterParam.fromDate = modifyFormDate;
console.log("On change Form date:", modifyFormDate);
}
this.resultEntryPendingGridObj.draw();
}


#Style Tow
-------------------------------------------------
onChangeToDate(): void {
console.log("On change selected to date ", this.toDate);
if (this.toDate) {
this.sendgridParam.toDate = this.util.getDateStringFromDateAndFormat(this.toDate, this.DATE_FMT);
this.maxDate = this.toDate;
}
}



#Confirmation Dialog Component
-------------------------------------------------

const initialState = { title: "Do you want to Delete?" };
this.bsModalRef = this.modalService.show(ConfirmationDialogComponent, { initialState, class: 'modal-sm' });
this.bsModalRef.content.onClose.subscribe(
result => {
if (result == true) {
this.blacklistPatientService.delete(this.id.toString()).subscribe(
() => {
this.toastr.success('', "Delete Successfull")
this.blockedListGridObj.draw();
},
() => {
this.toastr.warning('', "Error occured in Unit Setup")
}
)
}
});




#Modal
-------------------------------------------------

onClickAddLaveAppliction(): void {
console.log('onClickAddLaveAppliction: ', this.currentEmployee)
if (Object.keys(this.currentEmployee).length === 0 && this.currentEmployee.constructor === Object) {
this.toast.warning('', "Please select a employee !");
return;
}
const initialState = {
currentEmployee: this.currentEmployee
};
this.applicationBsModalRef = this.modalService.show(LeaveApplicationFormComponent, { initialState, class: 'modal-lg',backdrop: 'static' });
this.applicationBsModalRef.content.onClose.subscribe(
result => {
if (result == true) {
this.leaveApplicationGridObj.draw();
this.toast.success('', "Application successfully submit.")
}
});
}



#http call
-------------------------------------------------

getPriorityList(priority:Priority): Observable<any> {
return this.http.post<any>(this.PRIORITY_LIST,priority).pipe(
map((data: any) => data
));
}

getDepartmentList(department:Department): Observable<any> {
return this.http.post<any>(this.DEPARTMENT_LIST,department).pipe(
map((data: any) => data
));
}
getUserCompanyList(userCompany:UserCompany): Observable<any> {
return this.http.post<any>(this.USER_COMPANY_LIST,userCompany).pipe(
map((data: any) => data
));
}

getInitialDataList(): Observable<any[]> {

let priorityList = this.pathSampleCollectionCCService.getPriorityList(new Priority());
let departmentList = this.pathSampleCollectionCCService.getDepartmentList(new Department());
let userCompanyList = this.pathSampleCollectionCCService.getUserCompanyList(new UserCompany());
return forkJoin([
priorityList.pipe(take(1)),
departmentList.pipe(take(1)),
userCompanyList.pipe(take(1))
]);
}

getInitialDataList(): void {
this.pathSampleCollectionPendingCCService.getInitialDataList().subscribe(
res => {
console.log('getInitialDataList: ',res);
let priorityObj = res[0];
if(priorityObj.success){
this.priorityList = priorityObj.items;
}
let departmentObj = res[1];
if(departmentObj.success){
this.departmentList = departmentObj.items;
}
let userCompanyObj = res[2];
if(userCompanyObj.success){
this.userCompanyList = userCompanyObj.items;
}
},
err => {
console.error("Error occured when get all Initial Data response ", err);
}
);
}



#Callback
-------------------------------------------------
onEnterSampleCollInputField(): void {
let that = this;
this.getPathLabIdChdByGenLabId(function (currentPathsLabIdChd: PathsLabIdChd) {
console.log("getPathLabIdChdByGenLabId Call Back:", currentPathsLabIdChd.useFlag);
});

}

getPathLabIdChdByGenLabId(callback: any): void {
let genLabIdObj = { "genLabId": this.genLabIdForSampleColl }
this.pathsLabIdChdService.getPathLabIdChdByGenLabId(genLabIdObj).subscribe(
res => {
if (res.success) {
// console.log("getPathLabIdChdByGenLabId res:", res);
this.currentPathsLabIdChd = res.obj;
callback(this.currentPathsLabIdChd)
} else {
this.toastr.warning("", "Invlaid Label !");
// console.log("getPatientDemographyInfo error:", res);
}
},
err => {
console.log("getPathLabIdChdByGenLabId list error: ", err);
})
}


=================================================
#                 Calculartion
=================================================



#Get Hour Minut from Date between
-------------------------------------------------

calcuteOPDuration(): void {
    console.log("onChangeOpEndDateTime: ", this.anaestheticNote);
    let diffRes = this.convertMS(this.anaestheticNote.opEndDateTime.getTime()-this.anaestheticNote.opStartDateTime.getTime());
    if(diffRes){
      this.anaestheticNote.opDuration = diffRes;
    }
    console.log("diffMilSec Hour: ",this.convertMS(diffRes));
   }
  convertMS(ms) {
    var d, h, m, s;
    s = Math.floor(ms / 1000);
    m = Math.floor(s / 60);
    s = s % 60;
    h = Math.floor(m / 60);
    m = m % 60;
    d = Math.floor(h / 24);
    h = h % 24;
    h += d * 24;
    return h + ':' + m + ':' + s;
}


#Reactive From
-------------------------------------------------
<form #preAnaesthCheckUpForm="ngForm">
onSubmitPreAnaesthCheckUpForm(ngFrom : NgForm): void {
console.log("ngFrom value:", ngFrom.valid);
console.log("ngFrom touched:", ngFrom.touched);
console.log("ngFrom untouched:", ngFrom.untouched);
console.log("ngFrom dirty:", ngFrom.dirty);
console.log("ngFrom valid:", ngFrom.valid);
console.log("ngFrom Value:", ngFrom.value);
if(ngFrom.dirty){
if(ngFrom.valid){
this.onClickAnestSaveBtn();
}else{
this.toastr.warning("", "Pleaser complete required field");
}
}else{
this.bsModalRefAnaesthetic.hide();
}
}



=================================================
#            Production Building | build
=================================================
node --max_old_space_size=4096 node_modules/@angular/cli/bin/ng build --baseHref=/medicare-web-client-v2/ --prod=true



================================================
#Angular Install |   Install or uninstall
================================================
# Install Node.js and npm
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs
node -v
npm -v


# Install Angular CLI
sudo npm install -g @angular/cli@17
ng version


# Create a new Angular project
ng new my-angular-project

# Navigate to the project directory
cd my-angular-project

# Serve the application
ng serve



First:
npm uninstall @angular-devkit/build-angular

Next:
npm install @angular-devkit/build-angular@0.12.4
npm install ngx-toastr@9.1.2 --save


=================================================
#             Observable | obser
=================================================


  getReportListAsObservable() {
    return of([
      { orderSl: 1, label: 'Opd Appointment report', reportCod: 'OPD_4012_117_N' },
      { orderSl: 2, label: 'Opd Appointment Summary report', reportCod: 'OPD_4013' },
      { orderSl: 3, label: 'Opd Appointment Summary report(Type Wise)', reportCod: 'OPD_4014' },
      { orderSl: 4, label: 'Opd Appointment Cancel report', reportCod: 'OPD_4015_117' },
    ]).pipe(map((data) => data));
  }

  getReportList() {
    this.getReportListAsObservable().subscribe(
      response => {
        this.reportList = response;
        this.selectedReport = this.reportList.length > 0 ? this.reportList[0] : {};
      }
    );
  }



=================================================
#Service | HttpCall | Rest Api Call
=================================================

Base
=====
import { Injectable } from '@angular/core';
import { Resource } from '../models/resource.model';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Serializer } from '../interfaces/serializer';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { environment } from '../../../environments/environment';

export class ResourceService<T extends Resource> {

  private RESOURCE_LIST = `list`;
  private RESOURCE_CREATE = `create`;
  private RESOURCE_CREATE_WITH_IMAGE = `create-with-image`;
  private RESOURCE_UPDATE_WITH_IMAGE = `update-with-image`;
  private RESOURCE_UPDATE = `update`;
  private RESOURCE_DELETE = `delete`;
  private RESOURCE_REMOVE = `remove`;
  private BASE_URL = environment.baseUrl;

  constructor(
    private httpClient: HttpClient,
    private apiUrl: string,
    private endpoint: string,
    private serializer: Serializer) { }

  public uploadImage(image_url: string, image: File): Observable<any> {
    const formData = new FormData();
    formData.append('file', image);

    return this.httpClient
      .post(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${image_url}`, formData).pipe(
        map(data => data)
      );
  }

  public createWithImage(item: T, image: File): Observable<any> {
    const formData = new FormData();
    formData.append('reqobj', JSON.stringify(this.serializer.toJson(item)));
    formData.append('file', image);

    return this.httpClient
      .post<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_CREATE_WITH_IMAGE}`, formData).pipe(
        map(data => data)
      );
  }

  public create(item: T): Observable<T> {
    return this.httpClient
      .post<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_CREATE}`,
        this.serializer.toJson(item)).pipe(
          map(data => data.obj && this.serializer.fromJson(data.obj) as T)
        );
  }

  public createNew(item: T): Observable<T> {
    return this.httpClient
      .post<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_CREATE}`, this.serializer.toJson(item)).pipe(
        map(data => data)
      );
  }

  public updateNew(item: T): Observable<T> {
    return this.httpClient
      .put<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_UPDATE}`,
        this.serializer.toJson(item)).pipe(
          map((data: any) => data)
        );
  }
  
  public updateWithImage(item: T, image: File): Observable<any> {
    const formData = new FormData();
    // console.log("item >>>>>>>>>>> ", item)
    formData.append('reqobj', JSON.stringify(this.serializer.toJson(item)));
    formData.append('file', image);

    return this.httpClient
      .put<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_UPDATE_WITH_IMAGE}`, formData).pipe(
        map(data => data)
      );
  }

  public update(item: T): Observable<T> {
    return this.httpClient
      .put<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_UPDATE}`,
        this.serializer.toJson(item)).pipe(
          map(data => data)
        );
  }

  public updatePrescription(item: T): Observable<T> {
    return this.httpClient
      .put<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_UPDATE}`,
        this.serializer.toJson(item)).pipe(
          map((data: any) => data)
        );
  }

  // read(id: number): Observable<T> {
  //   return this.httpClient
  //     .get(`${this.BASE_URL}:${this.apiUrl}/${this.endpoint}/${id}`).pipe(
  //       map((data: any) => this.serializer.fromJson(data) as T)
  //     )
  // }

  public getSearch(mappingUrl: string, reqItem: T): Observable<T[]> {
    return this.httpClient
      .get(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${mappingUrl}`).pipe(
        map((data: any) => data)
      );
  }

  public search(mappingUrl: string, reqItem: T): Observable<T> {
    return this.httpClient
      .post<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${mappingUrl}`, reqItem).pipe(
        map((data: any) => data)
      );
  }

  public customeList(mappingUrl: string, item: T): Observable<T[]> {
    return this.httpClient
      .post<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${mappingUrl}`, this.serializer.toJson(item)).pipe(
        map((data: any) => this.convertData(data.items))
      );
  }

  public customeListGet(mappingUrl: string, item: T): Observable<T[]> {
    return this.httpClient
      .get(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${mappingUrl}`, this.serializer.toJson(item)).pipe(
        map((data: any) => this.convertData(data.items))
      );
  }

  public getCustomObjects(optional: string, item: T): Observable<any> {
    return this.httpClient
      .get(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${optional}`, this.serializer.toJson(item)).pipe(
        map((data: any) => this.convertDataObject(data))
      );
  }

  public customParamList(optional: string, item: any): Observable<any> {
    return this.httpClient
      .post(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${optional}`, item).pipe(
        map((data: any) => data.model.itemList)
      );
  }
  public customParamObj(optional: string, item: any): Observable<any> {
    return this.httpClient
      .post(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${optional}`, item).pipe(
        map((data: any) => (this.isEmptyObject(data.model)) ? null : this.serializer.fromJson(data.model))
      );
  }

  public list(item: T): Observable<T[]> {
    return this.httpClient
      .post(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_LIST}`, this.serializer.toJson(item)).pipe(
        map((data: any) => this.convertData(data.items))
      );
  }


  public delete(id: string) {
    return this.httpClient
      .delete<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_DELETE}`, {
        params: new HttpParams().set('id', id)
      });
  }

  public remove(id: string) {
    return this.httpClient
      .delete<any>(`${this.BASE_URL}${this.apiUrl}/${this.endpoint}/${this.RESOURCE_REMOVE}`, {
        params: new HttpParams().set('id', id)
      });
  }

  convertToJson(data: any): T[] {
    if (data) {
      return this.serializer.toJson(data);
    } else {
      return [];
    }
  }

  convertData(data: any): T[] {
    if (data) {
      return data.map(item => this.serializer.fromJson(item));
    } else {
      return [];
    }
  }

  private convertDataObject(data: any) {
    if (data) {
      // return data.map(item => this.serializer.fromJson(item));
      return this.serializer.fromJson(data);
    } else {
      return null;
    }
  }

  isEmptyObject(obj) {
    for (let prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        return false;
      }
    }
    return true;
  }

}

Serivce
========

import { Injectable } from '@angular/core';
import { environment } from 'src/environments/environment';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class PathReportLogService {


  private END_POINT = `path-report-log`;

  private REPORT_LOG_BY_INVOICE_ID = `${environment.baseUrl}${environment.pathologyApiUrl}/${this.END_POINT}/log-by-invoice-id`;
  private GET_PATIENT_DEMOGRAPHY_DATE = `${environment.baseUrl}${environment.pathologyApiUrl}/${this.END_POINT}/patient-demography`;

  constructor(private http:HttpClient) { }


  reportLogByInvoiceId(itemInfoStr:any): Observable<any> {
    return this.http.post<any>(this.REPORT_LOG_BY_INVOICE_ID, itemInfoStr).pipe(
      map((data: any) => data
    ));
  }

  patientDemographyDate(itemInfoStr:any): Observable<any> {
    return this.http.post<any>(this.GET_PATIENT_DEMOGRAPHY_DATE, itemInfoStr).pipe(
      map((data: any) => data
    ));
  }
  
  
    getRsFormConfigByCompanyNo() {
    const params = new HttpParams();
    return this.http.get(this._RS_FORM_CONFIG_BY_COMPANY_NO, { params }).pipe(
      map((data: any) => data
      ));
  }



 

}

Service2
========

import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { ConsultationSerializer } from '../serializers/consultation-serializer';
import { ResourceService } from 'src/app/core/services/resource.service';
import { environment } from 'src/environments/environment';
import { Consultation } from '../models/consultation.model';
import { Observable, forkJoin } from 'rxjs';
import { take } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class ConsultationService extends ResourceService<Consultation> {

  private GRAPH_END_POINT = `pathology-graph`;
  private FIND_GRAPH_ATTRIBUTE_LIST = `${environment.baseUrl}${environment.prescriptionServiceApiUrl}/${this.GRAPH_END_POINT}/findGraphAttributeList`;
  private FIND_GRAPHABLE_ATTRIBUTE_LIST = `${environment.baseUrl}${environment.prescriptionServiceApiUrl}/${this.GRAPH_END_POINT}/findGraphableAttributeList`;
  private FIND_GRAPHABLE_ATTRIBUTE_LIST_WITH_DATE = `${environment.baseUrl}${environment.prescriptionServiceApiUrl}/${this.GRAPH_END_POINT}/findGraphableAttributeListWithDate`;
  private FIND_GRAPHABLE_ATTRIBUTE_LIST_WITH_DATE_ARRAYLIST = `${environment.baseUrl}${environment.prescriptionServiceApiUrl}/${this.GRAPH_END_POINT}/findGraphableAttributeListArryListWithDate`;

  // Lab non lab report request url
  private LAB_NON_LAB_END_POINT = `lab-nonlab-report`;
  private LAB_REPORT_LIST = `${environment.baseUrl}${environment.prescriptionServiceApiUrl}/${this.LAB_NON_LAB_END_POINT}/margeLabReportList`;
  private NON_LAB_REPORT_LIST = `${environment.baseUrl}${environment.prescriptionServiceApiUrl}/${this.LAB_NON_LAB_END_POINT}/nonLabReportList`;
  private LAB_INVESTIGATION_DETAIL_LIST = `${environment.baseUrl}${environment.prescriptionServiceApiUrl}/${this.LAB_NON_LAB_END_POINT}/margeLabInvestigationDetailList`;
  private NON_LAB_INVESTIGATION_DETAIL_LIST = `${environment.baseUrl}${environment.prescriptionServiceApiUrl}/${this.LAB_NON_LAB_END_POINT}/nonLabInvestigationDetailList`;

  constructor(httpClient: HttpClient, private http: HttpClient) {
    super(httpClient, environment.prescriptionServiceApiUrl, 'consultation', new ConsultationSerializer());
  }

  

  // OPD lab investigation detail list
  labInvestigationDetailList(params: HttpParams): Observable<any> {
    return this.http.get<any>(this.LAB_INVESTIGATION_DETAIL_LIST, { params });
  }

  // OPD non lab investigation detail list
  nonLabInvestigationDetailList(params: HttpParams): Observable<any> {
    return this.http.get<any>(this.NON_LAB_INVESTIGATION_DETAIL_LIST, { params });
  }

  // Graph Attribute List
  labGraphAttributeList(params: any): Observable<any> {
    return this.http.post<any>(this.FIND_GRAPH_ATTRIBUTE_LIST, params);
  }

  // Graphable Attribute List
  labGraphableAttributeList(params: any): Observable<any> {
    return this.http.post<any>(this.FIND_GRAPHABLE_ATTRIBUTE_LIST, params);
  }

  // Graphable Attribute List With Date
  labGraphableAttributeListWithDate(params: any): Observable<any> {
    return this.http.post<any>(this.FIND_GRAPHABLE_ATTRIBUTE_LIST_WITH_DATE, params);
  }

  // Graphable Attribute List With Date Arry List
  loadGraphData(params: any): Observable<any> {
    return this.http.post<any>(this.FIND_GRAPHABLE_ATTRIBUTE_LIST_WITH_DATE_ARRAYLIST, params);
  }

  getLabNonLabReportList(params: HttpParams): Observable<any[]> {

    const labReportList = this.http.get<any>(this.LAB_REPORT_LIST, { params });
    const nonLabReportList = this.http.get<any>(this.NON_LAB_REPORT_LIST, { params });

    return forkJoin([
      labReportList.pipe(take(1)),
      nonLabReportList.pipe(take(1))
    ]);

  }

}

InCpmponent
===========

import { Component, ViewChild, OnInit, ElementRef, OnDestroy } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { UtilsService } from 'src/app/core/services/utils.service';
import { Priority } from 'src/app/diagnostic/_coreDiagnostic/models/priority.model';
import { Department } from 'src/app/diagnostic/_coreDiagnostic/models/department.model';
import { UserCompany } from 'src/app/diagnostic/_coreDiagnostic/models/user-company.model';
import { PathologySharedService } from 'src/app/diagnostic/_coreDiagnostic/services/pathology-shared.service';
import { PathInvoiceDtl } from '../../_coreDiagnostic/models/path-invoicedtl.model';
import { BsModalRef, BsModalService } from 'ngx-bootstrap';
import { ConfirmationDialogComponent } from 'src/app/shared/components/confirmation-dialog/confirmation-dialog.component';
import { StepReverseService } from '../../_coreDiagnostic/services/step-reverse.service';
import { StepCancellationFilterParams } from '../../_coreDiagnostic/models/step-cancellation-filter-params.model';
import { DatePipe } from '@angular/common';
import { Subscription } from 'rxjs';


@Component({
  selector: 'app-step-cancellation',
  templateUrl: './step-cancellation.component.html',
  styleUrls: ['./step-cancellation.component.css']
})
export class StepCancellationComponent implements OnInit, OnDestroy {

  @ViewChild("invoiceNoInputFieldIdentity") invoiceNoInputFieldIdentity;
  @ViewChild('stepReversePageBody') stepReversePageBody: ElementRef;

  subscription: Subscription;


  // Filter fields
  fromDate: Date;
  toDate: Date;

  selectedPatientFrom: string;

  resetAlertBsModalRef: BsModalRef;
  cuttentInvoiceId: string;

  labNo: string;
  invoiceNo: string;
  hospitalNumber: string;
  admissionNo: string;
  personalNumber: string;
  currentInvoiceId: string;
  currentPathItemInfo: any = {};

  priority: Priority = new Priority();
  priorityList: Priority[] = [];
  selectedPriorityDeliveryStatusNo: number = 0;

  department: Department = new Department();
  departmentList: Department[] = [];
  selectedDepartmentNo: number = 0;

  userCompany: UserCompany = new UserCompany();
  userCompanyList: UserCompany[] = [];
  selectedCompanyNo: number = 0;

  minDate: Date;
  maxDate: Date;

  private DATE_FMT = 'dd/MM/yyyy';

  selectedPatientInfo: any;
  pathInvoiceDtl: PathInvoiceDtl = new PathInvoiceDtl();
  pathInvoiceDtlList: PathInvoiceDtl[] = [];
  stepCancellationFilterParams: StepCancellationFilterParams = new StepCancellationFilterParams();


  constructor(
    private util: UtilsService,
    private toastr: ToastrService,
    private modalService: BsModalService,
    private stepReverseService: StepReverseService,
    private pathologySharedService: PathologySharedService,

  ) { }

  ngOnInit(): void {
    this.subscription = this.pathologySharedService.obj$.subscribe((obj: any) => {
      if(obj){
        console.log("SharedServiceObj: ",obj);
        this.currentPathItemInfo = obj;
        this.invoiceNo = this.currentPathItemInfo.invoiceId;
        this.onInitFindData();
      }
      setTimeout(() => { this.invoiceNoInputFieldIdentity.nativeElement.focus() }, 100 / 60);
      console.log('invoiceId: ', this.currentPathItemInfo.invoiceId);
    });

    let that = this;
    this.selectedCompanyNo = 0;
    this.selectedDepartmentNo = 0;
    this.selectedPatientFrom = "ALL";
    this.selectedPriorityDeliveryStatusNo = 0;

    this.toDate = new Date()
    this.fromDate = new Date();
    this.maxDate = new Date();
    this.fromDate.setDate(this.toDate.getDate() - 7);

    this.stepCancellationFilterParams.toDateStr = new DatePipe('en-US').transform(this.toDate, 'dd/MM/yyyy');
    this.stepCancellationFilterParams.fromDateStr = new DatePipe('en-US').transform(this.fromDate, 'dd/MM/yyyy');

    this.getInitialDataList();
  }


  onInitFindData(): void {
    this.stepCancellationFilterParams.labId = "";
    this.selectedPatientInfo = {};
    if (this.invoiceNo != undefined) {
      this.stepCancellationFilterParams.invoiceId = this.invoiceNo;
      // this.stepCancellationFilterParams.buNo = this.currentPathItemInfo.buNo;
      this.stepCancellationFilterParams.deliveryStatusNo = this.currentPathItemInfo.deliveryStatusNo;
      console.log("onInitFindDataParam:", this.stepCancellationFilterParams);
      this.getInvoiceDtlViewListForStepReverse();
    }
  }

  onChangeFromDate(): void {
    console.log("On change selected from date ", this.fromDate);
    if (this.fromDate) {
      this.minDate = this.fromDate;
      this.stepCancellationFilterParams.fromDateStr = this.util.getDateStringFromDateAndFormat(this.fromDate, this.DATE_FMT);
      this.getInvoiceDtlViewListForStepReverse();
    }

  }

  onChangeToDate(): void {
    console.log("On change selected to date ", this.toDate);
    if (this.toDate) {
      this.maxDate = this.toDate;
      this.stepCancellationFilterParams.toDateStr = this.util.getDateStringFromDateAndFormat(this.toDate, this.DATE_FMT);
      this.getInvoiceDtlViewListForStepReverse();
    }
  }

  onChangePriority(): void {
    console.log("selectedPriorityDeliveryStatusNo: ", this.selectedPriorityDeliveryStatusNo)
    if (this.selectedPriorityDeliveryStatusNo == 0 || this.selectedPriorityDeliveryStatusNo > 0) {
      this.stepCancellationFilterParams.priorityNumber = this.selectedPriorityDeliveryStatusNo;
      this.getInvoiceDtlViewListForStepReverse();
    }
  }

  onChangeDepartment(): void {
    console.log("selectedDepartmentNo: ", this.selectedDepartmentNo)
    if (this.selectedDepartmentNo == 0 || this.selectedDepartmentNo > 0) {
      this.stepCancellationFilterParams.buNo = this.selectedDepartmentNo;
      this.getInvoiceDtlViewListForStepReverse();
    }

  }

  onChangeCompany(): void {
    console.log("selectedCompanyNo: ", this.selectedCompanyNo)
    if (this.selectedCompanyNo == 0 || this.selectedCompanyNo > 0) {
      this.stepCancellationFilterParams.companyNo = this.selectedCompanyNo;
      this.getInvoiceDtlViewListForStepReverse();
    }
  }

  onChangeSelectedPatientFrom(): void {
    console.log("selectedPatientFrom: ", this.selectedPatientFrom)
    if (this.selectedPatientFrom != undefined) {
      this.stepCancellationFilterParams.patientFrom = this.selectedPatientFrom;
      this.getInvoiceDtlViewListForStepReverse();
    }
  }

  onEnterSearchByInvoiceId(): void {
    this.stepCancellationFilterParams.admissionId = "";
    this.stepCancellationFilterParams.labId = "";
    this.stepCancellationFilterParams.personalNumber = "";
    this.selectedPatientInfo = {};
    console.log("onEnterSearch:", this.invoiceNo);
    if (this.invoiceNo != undefined) {
      this.stepCancellationFilterParams.invoiceId = this.invoiceNo;
      this.getInvoiceDtlViewListForStepReverse();
    } else {
      this.toastr.error('', 'Please enter valid number.');
    }
  }

  onEnterLABNoInputField(): void {
    this.stepCancellationFilterParams.admissionId = "";
    this.stepCancellationFilterParams.personalNumber = "";
    this.stepCancellationFilterParams.invoiceId = "";
    this.selectedPatientInfo = {};
    console.log("onEnterSearch:", this.labNo);
    if (this.labNo != undefined) {
      this.stepCancellationFilterParams.labId = this.labNo;
      this.getInvoiceDtlViewListForStepReverse();
    } else {
      this.toastr.error('', 'Please enter valid number.');
    }
  }

  onClickStepCalItem(obj: any): void {
    console.log("Item: ", obj)
  }

  onClickCancelBtn(obj: PathInvoiceDtl, btnIdentity: any): void {
    console.log('btnIdentity: ', btnIdentity);
    console.log('CancelAbleObj: ', obj);
    switch (btnIdentity) {
      case "PSCC":
        if (obj.spProSamKeyFlag != 1) {
          this.stepCancelProcess(obj, btnIdentity);
        } else {
          this.toastr.warning('', 'Advance process exist. Please cancel advanced process first.');
        }
        break;
      case "PSPP":
        if (obj.labRcvFromSpKeyFlag != 1) {
          this.stepCancelProcess(obj, btnIdentity);
        } else {
          this.toastr.warning('', 'Advance process exist. Please cancel advanced process first.');
        }
        break;
      default:
        this.toastr.warning("", "Item not found !");
    }

  }

  stepCancelProcess(obj: PathInvoiceDtl, btnIdentity: any): void {
    const initialState = { title: "Are you sure to cancle this step ?" };
    this.resetAlertBsModalRef = this.modalService.show(ConfirmationDialogComponent, { initialState, class: 'modal-sm' });
    this.resetAlertBsModalRef.content.onClose.subscribe(
      result => {
        if (result == true) {
          this.pathStepReverseProc(obj, btnIdentity);
        }
      });
  }

  pathStepReverseProc(obj: PathInvoiceDtl, btnIdentity: any): void {

    let setpReverseObj = {
      "itemNo": obj.itemNo,
      "labNo": obj.labNo,
      "stampNo": obj.stampNo,
      "pStepProc": btnIdentity,
    }
    console.log("setpReverseObj:", setpReverseObj);
    this.addLoader();
    this.stepReverseService.pathStepReverseProc(setpReverseObj).subscribe(
      res => {
        if (res.success) {
          this.toastr.success("", res.message);
          this.getInvoiceDtlViewListForStepReverse();
        } else {
          console.log("pathStepReverseProc error:", res);
          this.toastr.error("", res.message);
        }
        // this.removeLoader();
      },
      err => {
        this.removeLoader();
        this.toastr.error("", err);
        console.log("pathStepReverseProc error: ", err);
      });
  }

  onClickResetBtn(obj: PathInvoiceDtl): void {
    console.log("onClickResetBtn: ", obj);
    if (obj.labResultPrintKeyFlag === 1) {
      this.toastr.warning("", "Result already printed, so you can't restructure.\n Please step cancel first.");
      return;
    }
    const initialState = { title: "Do you want to restructure ?" };
    this.resetAlertBsModalRef = this.modalService.show(ConfirmationDialogComponent, { initialState, class: 'modal-sm' });
    this.resetAlertBsModalRef.content.onClose.subscribe(
      result => {
        if (result == true) {
          this.restructureProcess(obj);
        }
      });
  }

  restructureProcess(obj: PathInvoiceDtl): void {
    let restructureProObj = {
      "itemNo": obj.itemNo,
      "labNo": obj.labNo
    }
    console.log("restructureProObj:", restructureProObj);
    this.addLoader();
    this.stepReverseService.pathStepResetProc(restructureProObj).subscribe(
      res => {
        if (res.success) {
          this.toastr.success("", res.message);
          this.getInvoiceDtlViewListForStepReverse();
        } else {
          console.log("restructureProObj error:", res);
          this.toastr.error("", res.message);
        }
        // this.removeLoader();
      },
      err => {
        this.removeLoader();
        this.toastr.error("", err);
        console.log("restructureProObjerror: ", err);
      });
  }

  getInvoiceDtlViewListForStepReverse(): void {
    this.addLoader();
    this.stepReverseService.getInvoiceDtlViewListForStepReverse(this.stepCancellationFilterParams).subscribe(
      res => {
        if (res.success) {
          console.log("getInvoiceDtlViewListForStepReverse:", res)
          this.pathInvoiceDtlList = res.items;
          if (this.pathInvoiceDtlList != null && this.pathInvoiceDtlList.length > 0) {
            this.currentInvoiceId = this.pathInvoiceDtlList[0].invoiceId;
            this.getPatientDemographyInfo();
          }
        } else {
          console.log("getPatientDemographyInfo error:", res);
        }
        this.removeLoader();
      },
      err => {
        this.removeLoader();
        console.log("Priority list error: ", err);
      }
    )
  }

  getPatientDemographyInfo(): void {
    this.selectedPatientInfo = {};
    let invoiceIdObj = { "invoiceId": this.currentInvoiceId }
    this.stepReverseService.getPatientDemographyInfo(invoiceIdObj).subscribe(
      res => {
        if (res.success) {
          this.selectedPatientInfo = res.obj;
        } else {
          console.log("getPatientDemographyInfo error:", res);
        }
      },
      err => {
        console.log("Priority list error: ", err);
      }
    )
  }

  getInitialDataList(): void {
    this.stepReverseService.getInitialDataList().subscribe(
      res => {
        let priorityObj = res[0];
        if (priorityObj.success) {
          this.priorityList = priorityObj.items;
        }
        let departmentObj = res[1];
        if (departmentObj.success) {
          this.departmentList = departmentObj.items;
        }
        let userCompanyObj = res[2];
        if (userCompanyObj.success) {
          this.userCompanyList = userCompanyObj.items;
        }
      },
      err => {
        console.error("Error occured when get all Initial Data response ", err);
      }
    );
  }
  
   getReportLogByInvoiceId(): void {
    let reqObj = {"invoiceId":this.currentInvoiceId}
    this.pathReportLogService.reportLogByInvoiceId(reqObj).subscribe(
      res => {
        if (res.success) {
          console.log("getReportLogByInvoiceId: ", res);
          this.pathReportLogList = res.items;
        } else {
          console.log("getReportLogByInvoiceId error:", res);
        }
      },
      err => {
        console.log("getReportLogByInvoiceId error: ", err);
      });
  }


  getPatientDemographyInfo(): void {
    this.patientDemographyInfoForShow = {};
    let invoiceIdObj = { "invoiceId": this.currentInvoiceId }
    this.pathReportLogService.patientDemographyDate(invoiceIdObj).subscribe(
      res => {
        if (res.success) {
          console.log("getPatientDemographyInfo: ", res);
          this.patientDemographyInfoForShow = res.obj;
        } else {
          console.log("getPatientDemographyInfo error:", res);
        }
      },
      err => {
        console.log("getPatientDemographyInfo  error: ", err);
      }
    )
  }



  addLoader(): void {
    if (!this.stepReversePageBody.nativeElement.classList.contains('loader')) {
      this.stepReversePageBody.nativeElement.classList.add('loader');
    }
  }

  removeLoader(): void {
    if (this.stepReversePageBody.nativeElement.classList.contains('loader')) {
      this.stepReversePageBody.nativeElement.classList.remove('loader');
    }
  }


  ngOnDestroy(): void {
    this.subscription.unsubscribe();
    this.pathologySharedService.setObj(null);
  }


}

InCpmponent2
============
import { Component, ViewChild, OnInit, Output, EventEmitter, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import * as moment from 'moment';
import { PatientDemographyInfo } from '../../../_coreDiagnostic/models/patient-demography-info.model';
import { environment } from '../../../../../environments/environment';
import { AuthService } from 'src/app/core/auth/services/auth.service';
import { PathSampleReceiveAtLabPending } from '../../../_coreDiagnostic/models/path-sample-receive-atlab-pending.model';
import { PathSampleReceiveAtLabPendingService } from '../../../_coreDiagnostic/services/path-sample-receive-atlab-pending.service';
import { Priority } from '../../../_coreDiagnostic/models/priority.model';
import { Department } from '../../../_coreDiagnostic/models/department.model';
import { UserCompany } from 'src/app/security/_coreSecurity/models/user-company.model';
import { DatePipe } from '@angular/common';
import { PathologySharedService } from 'src/app/diagnostic/_coreDiagnostic/services/pathology-shared.service';

@Component({
  selector: 'app-sample-pending',
  templateUrl: './sample-pending.component.html',
  styleUrls: ['./sample-pending.component.css']
})
export class SamplePendingComponent implements OnInit , OnDestroy{

  @Output() tabId: EventEmitter<number> = new EventEmitter<number>();
  @ViewChild('samplePendingGrid') samplePendingTable;
  samplePendingGrid: any;
  samplePendingGridObj: any;

  onClose: Subject<boolean>;
  fromDate: Date;
  toDate: Date;
  maxDate: Date;
  selectedDepartmentNo: any;
  selectedCompanyNo: any;
  selectedPendingPatientFrom: any;
  selectedPriorityDeliveryStatusNo: any;
  pathSampleReceiveAtLabPending: PathSampleReceiveAtLabPending = new PathSampleReceiveAtLabPending();

  constructor(
    private authService: AuthService,
    private pathSampleReceiveAtLabPendingService: PathSampleReceiveAtLabPendingService,
    private pathologySharedService: PathologySharedService
  ) { }
  public BASE_URL = environment.baseUrl + environment.diagnosticApiUrl;

  priorityList: Priority[] = []
  priority: Priority = new Priority();
  departmentList: Department[] = []
  department: Department = new Department();
  userCompanyList: UserCompany[] = []
  userCompany: UserCompany = new UserCompany();
  simplePendingfilterParams: any = {};
  patientDemographyInfoForShow: any = {};
  currentInvoiceId  : string;
  patientDemographyInfo: PatientDemographyInfo = new PatientDemographyInfo();

  ngOnInit() {
    let that = this;
    this.selectedCompanyNo = "ALL";
    this.selectedDepartmentNo = "ALL";
    this.selectedPriorityDeliveryStatusNo = "ALL";
    this.toDate = new Date()
    this.fromDate = new Date();
    this.maxDate = new Date();
    this.fromDate.setDate(this.toDate.getDate() - 7);

    this.simplePendingfilterParams.toDate = new DatePipe('en-US').transform(this.toDate, 'dd/MM/yyyy');
    this.simplePendingfilterParams.fromDate = new DatePipe('en-US').transform(this.fromDate, 'dd/MM/yyyy');

    this.getPriorityList(function () {
      that.getDepartmentList(function () {
        that.getUserCompanyList(function () {
          that.initSamplePendingGrid();
        });
      });
    });
    //console.log("SamplePendingComponent On Init");
  }

  samplePendingGridClickHandler(info: any): void {
    console.log("Grid Data:", info);
  }

  onChangeToDate(): void {
    if (this.toDate != undefined) {
     // console.log(this.toDate);
      let modiftToDate: string = new DatePipe('en-US').transform(this.toDate, 'dd/MM/yyyy');
      this.simplePendingfilterParams.toDate = modiftToDate
    }
    this.samplePendingGridObj.draw();
  }

  onChangeFormDate(): void {
    //console.log(this.fromDate, " Onchange")
    if (this.fromDate != undefined) {
      let modifyFormDate: string = new DatePipe('en-US').transform(this.fromDate, 'dd/MM/yyyy');
      this.simplePendingfilterParams.fromDate = modifyFormDate;
    }
    this.samplePendingGridObj.draw();
  }

  onEnterSearchByHospitalNo() {
    this.patientDemographyInfoForShow = {};
    this.pathSampleReceiveAtLabPending.invoiceId = "";
    this.pathSampleReceiveAtLabPending.admissionId = "";
    this.pathSampleReceiveAtLabPending.labId = "";
    if (this.pathSampleReceiveAtLabPending.hospitalNumber != undefined) {
      this.simplePendingfilterParams.invoiceId=''; 
      this.simplePendingfilterParams.admissionId=''; 
      this.simplePendingfilterParams.labId=''; 
      this.simplePendingfilterParams.hospitalNumber = this.pathSampleReceiveAtLabPending.hospitalNumber;
    }
    this.samplePendingGridObj.draw();
  }

  onEnterSearchByInvoiceNo() {
    this.pathSampleReceiveAtLabPending.hospitalNumber = "";
    this.pathSampleReceiveAtLabPending.admissionId = "";
    this.pathSampleReceiveAtLabPending.labId = "";
    this.patientDemographyInfoForShow = {};
    if (this.pathSampleReceiveAtLabPending.invoiceId != undefined) {
      this.simplePendingfilterParams.hospitalNumber=''; 
      this.simplePendingfilterParams.admissionId=''; 
      this.simplePendingfilterParams.labId=''; 
      this.simplePendingfilterParams.invoiceId = this.pathSampleReceiveAtLabPending.invoiceId;
    }
    this.samplePendingGridObj.draw();
  }


  onEnterSearchByAdmissionNo() {
    this.pathSampleReceiveAtLabPending.hospitalNumber = "";
    this.pathSampleReceiveAtLabPending.invoiceId = "";
    this.pathSampleReceiveAtLabPending.labId = "";
    this.patientDemographyInfoForShow = {};
    if (this.pathSampleReceiveAtLabPending.admissionId != undefined) {
      this.simplePendingfilterParams.invoiceId=''; 
      this.simplePendingfilterParams.hospitalNumber=''; 
      this.simplePendingfilterParams.labId=''; 
      this.simplePendingfilterParams.admissionId = this.pathSampleReceiveAtLabPending.admissionId;
    }
    this.samplePendingGridObj.draw();
  }

  onEnterSearchByLabNo() {
    this.pathSampleReceiveAtLabPending.hospitalNumber = "";
    this.pathSampleReceiveAtLabPending.invoiceId = "";
    this.pathSampleReceiveAtLabPending.admissionId = "";
    if (this.pathSampleReceiveAtLabPending.labId != undefined) {
      this.simplePendingfilterParams.invoiceId=''; 
      this.simplePendingfilterParams.hospitalNumber=''; 
      this.simplePendingfilterParams.admissionId=''; 
      this.simplePendingfilterParams.labId = this.pathSampleReceiveAtLabPending.labId;
    }
    this.samplePendingGridObj.draw();
  }

  changePendingPatientFrom(value: any) {
    this.simplePendingfilterParams.selectedPendingPatientFrom = undefined;
    this.selectedPendingPatientFrom = value;
    if (this.selectedPendingPatientFrom != 'ALL') {
      this.simplePendingfilterParams.selectedPendingPatientFrom = this.selectedPendingPatientFrom;
    }
    this.samplePendingGridObj.draw();
  }

  onChangeDeliveryStatus(): void {
    this.simplePendingfilterParams.deliveryStatusNo = undefined;
    if (this.selectedPriorityDeliveryStatusNo != 'ALL') {
      this.simplePendingfilterParams.deliveryStatusNo = this.selectedPriorityDeliveryStatusNo;
    }
    this.samplePendingGridObj.draw();
  }

  onChangeDepartment(): void {
    this.simplePendingfilterParams.selectedDepartmentNo = undefined;
    if (this.selectedDepartmentNo != 'ALL') {
      this.simplePendingfilterParams.selectedDepartmentNo = this.selectedDepartmentNo;
    }
    this.samplePendingGridObj.draw();
  }

  onChangeCompany(): void {
    this.simplePendingfilterParams.selectedCompanyNo = undefined
    if (this.selectedCompanyNo != 'ALL') {
      this.simplePendingfilterParams.selectedCompanyNo = this.selectedCompanyNo;
    }
    this.samplePendingGridObj.draw();
  }

  

  onClickSampleReceive(info: any){
    console.log("onClickSampleReceive",info);
    // this.currentInvoiceId = info.invoiceId;
    // this.getPatientDemographyInfo();
  }

  goToSampleReceiveClickHandler(info: any){
    this.pathologySharedService.setInvoiceNo(info.invoiceId);
    this.tabId.emit(0);
  }

  initSamplePendingGrid() {
    let that = this;
    this.samplePendingGrid = $(this.samplePendingTable.nativeElement);
    this.samplePendingGridObj = this.samplePendingGrid.DataTable({
      pagingType: 'full_numbers',
      pageLength: 10,
      serverSide: true,
      processing: true,
      searching: false,
      ajax: {
        url: this.BASE_URL + "/path-simple-receive-atlab-pending/gridList",
        type: "GET",
        data: function (sendData) {
          sendData.fromDate = that.simplePendingfilterParams.fromDate;
          sendData.toDate = that.simplePendingfilterParams.toDate;
          sendData.selectedPendingPatientFrom = that.simplePendingfilterParams.selectedPendingPatientFrom;
          sendData.selectedDepartmentNo = that.simplePendingfilterParams.selectedDepartmentNo;
          sendData.selectedCompanyNo = that.simplePendingfilterParams.selectedCompanyNo;
          sendData.hospitalNumber = that.simplePendingfilterParams.hospitalNumber;
          sendData.invoiceId = that.simplePendingfilterParams.invoiceId;
          sendData.admissionId = that.simplePendingfilterParams.admissionId;
          sendData.labId = that.simplePendingfilterParams.labId;
          sendData.deliveryStatusNo = that.simplePendingfilterParams.deliveryStatusNo;
        },
        beforeSend: function (xhr) {
          //TODO: Need to change bearer token from static to dynamic
          xhr.setRequestHeader('Authorization', "bearer " + that.authService.getAccessToken());
          xhr.setRequestHeader('Content-Type', "application/json");
        },
        dataSrc: function (response) {
          // console.log("path-simple-pending grid res:", response);
          response.draw = response.obj.draw;
          response.recordsTotal = response.obj.recordsTotal;
          response.recordsFiltered = response.obj.recordsFiltered;
          if(response.obj.data.length > 0){
            that.currentInvoiceId = response.obj.data[0].invoiceId;
            that.getPatientDemographyInfo();
          }
          return response.obj.data;
        }
      },
      "order": [[0, "desc"]],
      columns: [
        {
          "visible": false ,
          data: 'deliveryDateTime',
          name: 'deliveryDateTime'
        },
        { 
          title: 'MEN',
          data: 'hospitalNumber'
        },
        {
          title: 'Invoice ID',
          data: 'invoiceId',
          name: 'invoiceId'
        },
        {
          title: 'LAB ID',
          data: 'labId',
          name: 'labId'
        },
        {
          title: 'Delivery Date',
          data: 'deliveryDateTime',
          render: (data) => {
            return moment(new Date(data)).format("DD/MM/YYYY").toString()
          }
        },
        {
          title: 'Patient Name',
          data: 'patientName',
          name: 'patientName'
        },
        {
          title: 'Exam Name',
          data: 'itemName'
        },
        {
          title: 'Department',
          data: 'buName'
        },
        {
          title: 'Specimen',
          data: 'samName'
        },
        {
          title: 'Container',
          data: 'conName'
        }
      ],
      responsive: true,
      select: true,
      rowCallback: (row: Node, data: any[] | Object) => {
        $('td', row).bind('dblclick', () => {
          that.goToSampleReceiveClickHandler(data);
        });
        $(row).bind('click', () => {
          $(row).removeClass('selected')
          $(row).addClass('selected');
         that.onClickSampleReceive(data);
        });
        return row;
      }
    });
  }

  getPriorityList(callback) {
    if (typeof callback === 'function') {
      let priority = new Priority();
      this.pathSampleReceiveAtLabPendingService.getPriorityList(priority).subscribe(
        res => {
          if (res.success) {
            this.priorityList = res.items;
            callback(this, this.priorityList)
          } else {
            callback(this, "priorityList list error:", res)
            console.log("priorityList list error:", res);
          }
        },
        err => {
          callback(this, "Priority list error: ", err)
          console.log("Priority list error: ", err);
        }
      )
    }
  }

  getDepartmentList(callback) {
    if (typeof callback === 'function') {
      let department = new Department();
      this.pathSampleReceiveAtLabPendingService.getDepartmentList(department).subscribe(
        res => {
          if (res.success) {
            this.departmentList = res.items;
            callback(this, this.departmentList)
          } else {
            console.log("Department list error:", res);
          }
        },
        err => {
          console.log("Department list error: ", err);
        }
      )
    }
  }

  getUserCompanyList(callback) {
    if (typeof callback === 'function') {
      let userCompany = new UserCompany();
      this.pathSampleReceiveAtLabPendingService.getUserCompanyList(userCompany).subscribe(
        res => {
          if (res.success) {
            this.userCompanyList = res.items;
            callback(this, this.userCompanyList)
          } else {
            console.log("userCompanyList list error:", res);
          }
        },
        err => {
          console.log("User Company list error: ", err);
        }
      )
    }
  }

  getPatientDemographyInfo(): void {
    this.patientDemographyInfoForShow = {};
    let invoiceIdObj = {"invoiceId":this.currentInvoiceId}
    this.pathSampleReceiveAtLabPendingService.getPatientDemographyInfo(invoiceIdObj).subscribe(
      res => {
        if (res.success) {
          this.patientDemographyInfoForShow = res.obj;
         // console.log("getPatientDemographyInfo:", this.patientDemographyInfoForShow);
        } else {
          console.log("getPatientDemographyInfo Not found:", res);
        }
      },
      err => {
        console.log("Priority list error: ", err);
      }
    )
  }

  checkIsNumber(value: any | number): boolean {
    return ((value != null) && !isNaN(Number(value.toString())));
  }

  gridRefresh(){
    this.samplePendingGridObj.draw();
  }

  ngOnDestroy(): void {
    this.pathologySharedService.setInvoiceNo(0);
    this.pathSampleReceiveAtLabPending.hospitalNumber = "";
    this.pathSampleReceiveAtLabPending.invoiceId = "";
    this.pathSampleReceiveAtLabPending.labId = "";
   // console.log("call OnDestory")
  }



}

InCpmponent3
==============
import { Component, ViewChild, OnInit, OnDestroy, ElementRef, AfterViewInit } from '@angular/core';
import { PathResultEntrySharedService } from 'src/app/diagnostic/pathology/_corePathology/services/path-result-entry-shared.service';
import { ResultEntryItemInfo } from 'src/app/diagnostic/pathology/_corePathology/models/result-entry-item-info.model';
import { Subscription } from 'rxjs';
import { Router } from '@angular/router';
import { HttpParams } from '@angular/common/http';
import { BsModalRef, BsModalService } from 'ngx-bootstrap';
import { ResultEntryTemplateFilterParams } from 'src/app/diagnostic/pathology/_corePathology/models/result-entry-template-filter-params.model';
import { ToastrService } from 'ngx-toastr';
import { BasicLabReportComponent } from '../../../basic-lab-report/basic-lab-report.component';
import { ConsultationService } from 'src/app/diagnostic/pathology/_corePathology/services/consultation.service';
import { PatientDemographyInfo } from 'src/app/diagnostic/_coreDiagnostic/models/patient-demography-info.model';
import { PathTestResult } from 'src/app/diagnostic/pathology/_corePathology/models/path-test-result.model';
import { PathsMethod } from 'src/app/diagnostic/pathology/_corePathology/models/paths-method.model';
import { TestResultStamp } from 'src/app/diagnostic/pathology/_corePathology/models/path-test-result-stamp.model';
import { PathInvoiceDtl } from 'src/app/diagnostic/_coreDiagnostic/models/path-invoicedtl.model';
import { ResultEntryTemplateAuthorInfoService } from 'src/app/diagnostic/pathology/_corePathology/services/result-entry-template-author-info.service';
import { PathTestResultService } from 'src/app/diagnostic/pathology/_corePathology/services/path-test-result.service';
import { PathInvoiceDtlService } from 'src/app/diagnostic/_coreDiagnostic/services/path-invoicedtl.service';
import { TestResultStampService } from 'src/app/diagnostic/pathology/_corePathology/services/path-test-result-stamp.service';
import { TmplConfirmationDialogComponent } from '../../../../../shared/components/tmpl-confirmation-dialog/tmpl-confirmation-dialog.component';
import { PathResultEntryReportService } from 'src/app/diagnostic/pathology/_corePathology/services/path-result-entry-report.service';
import { PathGeneralResultEntryFormService } from 'src/app/diagnostic/pathology/_corePathology/services/path-general-result-entry-form.service';
import { GeneralFormResultEntryData } from 'src/app/diagnostic/pathology/_corePathology/models/general-from-result-entry-data.model';
import { UserFeatureService } from 'src/app/diagnostic/pathology/_corePathology/services/user-feature.service';
import { PathUserFeaturAccess } from 'src/app/diagnostic/pathology/_corePathology/models/path-user-feature-acc.model';
import { PathologySharedService } from 'src/app/diagnostic/_coreDiagnostic/services/pathology-shared.service';
import { ItemValueListViewerComponent } from '../../../item-value-list-viewer/item-value-list-viewer.component';
import { PathsMethodDataViewerComponent } from '../../../paths-method-data-viewer/paths-method-data-viewer.component';
import { ItemHistoryViewerComponent } from '../../../item-history-viewer/item-history-viewer.component';
import { PathTestStructValue } from '../../../_corePathology/models/path-test-struct-value.model';
import { PathTestStructValueService } from '../../../_corePathology/services/path-test-struct-value.service';
import { PathRsFrmFeatureMng } from '../../../_corePathology/models/path-rs-frm-feature-mng.model';
import { ResultEntryFormResourceService } from '../../../_corePathology/services/result-entry-form-resource.service';
import { PathItemPropEditorComponent } from '../../../path-item-prop-editor/path-item-prop-editor.component';
import { LabReportInfo } from '../../../_corePathology/models/lab-report-info.model';
import { PathResultEntryConfig } from '../../../_corePathology/models/path-result-entry-config.model';
import { PreparedByAuthInfo } from '../../../_corePathology/models/prepared-by-auth-info.model';
import { VerifyByAuthInfo } from '../../../_corePathology/models/verify-by-auth-info.model';
import { FinalizedByAuthInfo } from '../../../_corePathology/models/finalized-by-auth-info.model';
import { PathsTesttemplateService } from '../../../_corePathology/services/paths-testtemplate.service';
import { PathsTesttemplate } from '../../../_corePathology/models/paths-testtemplate.model';
import { isHasFileData } from 'src/app/core/services/utils.service';



@Component({
  selector: 'app-general-template',
  templateUrl: './general-template.component.html',
  styleUrls: ['./general-template.component.css']
})
export class GeneralTemplateComponent implements OnInit, OnDestroy {

  @ViewChild('generalResultEntryFormBody') generalResultEntryFormBody: ElementRef;

  @ViewChild("pathsMthInput_1") pathsMthInput_1: ElementRef;
  @ViewChild("pathsMthInput_2") pathsMthInput_2: ElementRef;
  @ViewChild("pathsMthInput_3") pathsMthInput_3: ElementRef;
  @ViewChild("pathsMthInput_4") pathsMthInput_4: ElementRef;
  @ViewChild("pathsMthInput_5") pathsMthInput_5: ElementRef;
  @ViewChild("pathsMthInput_6") pathsMthInput_6: ElementRef;

  @ViewChild("pathRsEntrySaveBtnRef") pathRsEntrySaveBtnRef: ElementRef;
  @ViewChild("pathRsEntryVerifyBtnRef") pathRsEntryVerifyBtnRef: ElementRef;
  @ViewChild("pathRsEntryFinalizeBtnRef") pathRsEntryFinalizeBtnRef: ElementRef;
  @ViewChild("pathRsEntryPrintBtnRef") pathRsEntryPrintBtnRef: ElementRef;
  @ViewChild("pathRsEntryExitBtnRef") pathRsEntryExitBtnRef: ElementRef;


  constructor(
    public router: Router,
    private toastr: ToastrService,
    public modalService: BsModalService,
    private userFeatureService: UserFeatureService,
    private consultationService: ConsultationService,
    private pathTestResultService: PathTestResultService,
    private pathInvoiceDtlService: PathInvoiceDtlService,
    private pathologySharedService: PathologySharedService,
    private testResultStampService: TestResultStampService,
    public pathsTesttemplateService: PathsTesttemplateService,
    public pathTestStructValueService: PathTestStructValueService,
    private pathResultEntryReportService: PathResultEntryReportService,
    private pathResultEntrySharedService: PathResultEntrySharedService,
    private resultEntryFormResourceService: ResultEntryFormResourceService,
    private pathGeneralResultEntryFormService: PathGeneralResultEntryFormService,
    private resultEntryTemplateAuthorInfoService: ResultEntryTemplateAuthorInfoService

  ) { }

  bsModalRef: BsModalRef;
  subscription: Subscription;
  itemLogListBsModalRef: BsModalRef;
  itemValueListBsModalRef: BsModalRef;
  pathsMethodDataBsModalRef: BsModalRef;
  pathItemPropEditorBsModalRef: BsModalRef;

  // For EMI
  // lab non lab report list
  labReportList: any[] = [];
  labReportFilterByItemNoList: any[] = [];
  nonLabReportList: any[] = [];
  //Lab non lab report modal
  labNonLabReportModalConfig = {
    keyboard: true,
    ignoreBackdropClick: true
  };
  // -- For EMI  --

  patientDemographyInfoForShow: any = {};
  labReportInfo: LabReportInfo = new LabReportInfo();
  currentPathsTestTemp: PathsTesttemplate = new PathsTesttemplate();
  pathRsFrmFeatureMng: PathRsFrmFeatureMng = new PathRsFrmFeatureMng();
  pathUserFeaturAccess: PathUserFeaturAccess = new PathUserFeaturAccess();
  patientDemographyInfo: PatientDemographyInfo = new PatientDemographyInfo();
  pathResultEntryConfig: PathResultEntryConfig = new PathResultEntryConfig();
  generalFormResultEntryData: GeneralFormResultEntryData = new GeneralFormResultEntryData();
  resultEntryTemplateFilterParams: ResultEntryTemplateFilterParams = new ResultEntryTemplateFilterParams();

  currentPathItemInfoForShow: any = {};
  currentPathItemInfo: any = {};

  otherPrepEmp: any = {};
  otherVerifyEmp: any = {};
  otherFinalEmp: any = {};
  preparedByInfoList: PreparedByAuthInfo[] = [];
  currentkPreparedBy: PreparedByAuthInfo = new PreparedByAuthInfo();
  verifyByInfoList: VerifyByAuthInfo[] = [];
  currentVerifyBy: VerifyByAuthInfo = new VerifyByAuthInfo();
  consultationInfoList: FinalizedByAuthInfo[] = [];
  currentConsultation: FinalizedByAuthInfo = new FinalizedByAuthInfo();

  pathTestResult: PathTestResult = new PathTestResult();
  pathTestResultList: PathTestResult[] = [];


  pathInvoiceDtlList: PathInvoiceDtl[] = [];
  pathInvoiceDtl: PathInvoiceDtl = new PathInvoiceDtl();
  currentSinglePathDtlObj: PathInvoiceDtl = new PathInvoiceDtl();


  pathsMethod: PathsMethod = new PathsMethod();
  pathsMethodAllData: PathsMethod[] = [];
  pathsMethodMthList: PathsMethod[] = [];
  pathsMethodAnaList: PathsMethod[] = [];
  pathsMethodNotList: PathsMethod[] = [];
  pathsMethodComList: PathsMethod[] = [];
  currentPathsMethodList: PathsMethod[] = [];

  selectedPathTestStructValObj: PathTestStructValue = new PathTestStructValue();
  pathTestStructValueList = []
  selectTestResultID: any;

  currentRsSl: string;
  testResultStamp: TestResultStamp = new TestResultStamp();

  // for save flag
  g_checkpendingtest: any = {};
  l_save: any = {};
  opdPatientInfoVProces: any = 1;
  isBlankReportPrint: boolean = false;


  ngOnInit() {
    this.getAuthorizePrivileged();
    this.receivedPathItemObjForResultEntry();
  }

  receivedPathItemObjForResultEntry() {
    this.subscription = this.pathResultEntrySharedService.pathItem$.subscribe((pathItemObj: ResultEntryItemInfo) => {
      if (pathItemObj == undefined) {
        console.log("Obj Not found for result entry:", pathItemObj);
        setTimeout(() => {
          this.toastr.warning("", "Item not found for result entry.\nPlease add item from work list.");
        }, 0);
        this.resetInfo();
        return;
      }
      console.log("Obj found for result entry:", pathItemObj);
      this.currentRsSl = 'result';
      this.currentPathItemInfoForShow = pathItemObj;
      this.currentPathItemInfo = pathItemObj;
      this.resultEntryTemplateFilterParams.invoiceId = pathItemObj.invoiceId;

      this.getRequiredData();
    });
  }

  getRequiredData() {
    let that = this;
    this.addLoader();
    this.getRsFormInitData()
      .then(function (result) {
        return that.getPathTestResultList();
      }).then(function (result) {
        return that.getTestResultStampDataByStampNo();
      }).then(function (result) {
        that.removeLoader();
        console.log("Finished init API calling.");
      });
  }

  getRsFormInitData(): any {
    this.addLoader();
    console.log("############## API 1  (getRsFormInitData) CALL START..");
    return new Promise<any>((resolve, reject) => {
      this.pathGeneralResultEntryFormService.rsFormInitData(this.currentPathItemInfo).subscribe(
        res => {
          if (res.success) {
            console.log("getRsFormInitData res:", res);
            if (res.model.currentPathsTestTemp) {
              this.currentPathsTestTemp = res.model.currentPathsTestTemp;
              // console.log("currentPathsTestTempResData:", this.currentPathsTestTemp);
            }
            if (res.model.pathResultEntryConfig) {
              this.pathResultEntryConfig = res.model.pathResultEntryConfig;
              // console.log("pathResultEntryConfigResData: ", this.pathResultEntryConfig);
            }
            if (res.model.pathInvoiceDtlList) {
              this.pathInvoiceDtlList = res.model.pathInvoiceDtlList;
              // console.log("pathInvoiceDtlListResData: ", this.pathInvoiceDtlList);
            }
            if (res.model.patientDemographyInfoObj) {
              this.patientDemographyInfoForShow = res.model.patientDemographyInfoObj;
              this.patientDemographyInfo = res.model.patientDemographyInfoObj;
              // console.log("patientDemographyInfoResData: ", this.patientDemographyInfo);
            }
            if (res.model.preparedByInfoList) {
              this.preparedByInfoList = res.model.preparedByInfoList;
              let defaultPrepObj = this.preparedByInfoList.find(obj => obj.defaultFlag === 1);
              if (defaultPrepObj) {
                this.testResultStamp.resultPreparedKeyedBy = defaultPrepObj.docId;
                this.currentkPreparedBy = defaultPrepObj;
              }
              // console.log("preparedByInfoListResData: ", this.preparedByInfoList);
            }
            if (res.model.verifyByInfoList) {
              this.verifyByInfoList = res.model.verifyByInfoList;
              let defaultVerifyObj = this.verifyByInfoList.find(obj => obj.defaultFlag === 1);
              if (defaultVerifyObj) {
                this.testResultStamp.resultVerifyKeyedBy = defaultVerifyObj.docId;
                this.currentVerifyBy = defaultVerifyObj;
              }
              // console.log("verifyByInfoListResData: ", this.verifyByInfoList);
            }
            if (res.model.consultationInfoList) {
              this.consultationInfoList = res.model.consultationInfoList;
              let defaultConstObj = this.consultationInfoList.find(obj => obj.defaultFlag === 1);
              if (defaultConstObj) {
                this.testResultStamp.resultFinalKeyedBy = defaultConstObj.docId;
                this.currentConsultation = defaultConstObj;
              }
              // console.log("consultationInfoListResData: ", this.consultationInfoList);
            }
            if (res.model.pathsMethodAllData) {
              this.pathsMethodAllData = res.model.pathsMethodAllData;
              this.pathsMethodMthList = this.pathsMethodAllData.filter((obj: PathsMethod) => obj.textType === 'MTH');
              this.pathsMethodAnaList = this.pathsMethodAllData.filter((obj: PathsMethod) => obj.textType === 'ANA');
              this.pathsMethodNotList = this.pathsMethodAllData.filter((obj: PathsMethod) => obj.textType === 'NOT');
              this.pathsMethodComList = this.pathsMethodAllData.filter((obj: PathsMethod) => obj.textType === 'COM');
              // console.log("pathsMethodAllDataResData: ", this.pathsMethodAllData);
            }
          } else {
            console.log("getRsFormInitData resFailed:", res);
          }
          console.log("############## API 1  (getRsFormInitData) CALL RESOLVE !:");
          resolve(res);
        },
        err => {
          this.removeLoader();
          console.log("getRsFormInitData  error: ", err);
          reject(null);
        });
    });
  }


  onClickSaveBtn(event: any): void {
    console.log("onClickSaveBtn", this.currentPathItemInfo);
    if (Object.keys(this.currentPathItemInfo).length == 0) {
      console.log("Obj Not found for result entry:", this.currentPathItemInfo);
      this.toastr.warning("", "Item not found for result entry. Please add item from work list.");
      this.resetInfo();
      return;
    }
    if (this.pathResultEntryConfig.preparedByReqFlag === 1 && this.testResultStamp.resultPreparedKeyedBy == null) {
      this.toastr.warning("", "Please select prepared by.");
      return;
    }
    this.addLoader();
    this.pathGeneralResultEntryFormService.checkPendingTest(this.currentPathItemInfo).subscribe(
      res => {
        if (res.success) {
          console.log("checkPendingTest: ", res);
          if (res.obj === 'N') {
            console.log("checkPendingTest re fond N:");
            this.g_checkpendingtest = 'Y';     // l_save := 1;
            this.onSaveGeneralTemplateData();      // :parameter.g_checkpendingtest := 'Y'
          } else {
            const initialState = { title: "Pending test exist, Confirm to SAVE ?" };
            this.bsModalRef = this.modalService.show(TmplConfirmationDialogComponent, { initialState, class: 'modal-sm' });
            this.bsModalRef.content.onClose.subscribe(
              result => {
                if (result === 'save_now') {
                  console.log("Pres save_now");
                  this.g_checkpendingtest = 'Y';
                  this.onSaveGeneralTemplateData();
                } else if (result === 'proceed') {
                  console.log("Pres proceed")
                  this.g_checkpendingtest = 'N';
                  this.onSaveGeneralTemplateData();
                } else {
                  this.removeLoader();
                  console.log("Pres Later")
                  this.g_checkpendingtest = null;
                }
              });
          }
        } else {
          this.removeLoader();
          console.log("checkPendingTest error:", res);
        }
      },
      err => {
        this.removeLoader();
        console.log("checkPendingTest  error: ", err);
      });



  }

  onSaveGeneralTemplateData(): void {
    this.opdPatientInfoVProces = 1;
    this.generalFormResultEntryData.setGCheckPendingTest(this.g_checkpendingtest);
    this.generalFormResultEntryData.setTestResultStampData(this.testResultStamp);
    this.generalFormResultEntryData.setOpdPatientInfoVProces(this.opdPatientInfoVProces);
    this.generalFormResultEntryData.setPathInvoiceDtlListData(this.pathInvoiceDtlList);
    this.generalFormResultEntryData.setPathTestResultListData(this.pathTestResultList);
    this.generalFormResultEntryData.setResultEntryItemInfoData(this.currentPathItemInfo);
    this.generalFormResultEntryData.setPatientDemographyInfoData(this.patientDemographyInfoForShow);
    this.pathRsFrmFeatureMng.isResultSaveBtnActive = false;
    console.log("onSaveGeneralTemplateData: ", this.generalFormResultEntryData);
    this.pathGeneralResultEntryFormService.onSaveData(this.generalFormResultEntryData).subscribe(
      res => {
        if (res.success) {
          console.log("onSaveGeneralTemplateData: ", res);
          this.toastr.success("", "Result Entry done.");
          this.testResultStamp = res.obj;
          this.currentPathItemInfo.stampNo = res.obj.id;
          if (this.pathRsEntryVerifyBtnRef) this.pathRsEntryVerifyBtnRef.nativeElement.focus();
        } else {
          this.toastr.warning("", res.message);
          console.log("onSaveGeneralTemplateData error:", res);
        }
        this.removeLoader();
        this.pathRsFrmFeatureMng.isResultSaveBtnActive = true;
      },
      err => {
        console.log("onSaveGeneralTemplateData  error: ", err);
        this.removeLoader();
      });

  }

  onClickVerifiedBtn(): void {
    console.log("onClickVerifiedBtn", this.testResultStamp);
    if (this.testResultStamp.id == null) {
      console.log("No StampNo found");
      this.toastr.warning("", "Please save this report first.");
      return;
    }
    if (this.testResultStamp.resultPreparedKeyFlag == null) {
      this.toastr.warning("", "Prepared not complete !");
      return;
    }
    if (this.pathResultEntryConfig.scientificByReqFlag === 1 && this.testResultStamp.resultVerifyKeyedBy == null) {
      console.log("No resultVerifyKeyedBy found");
      this.toastr.warning("", "Scientific Officer not selected.");
      return;
    }
    this.onVerified();
  }

  onVerified(): void {
    this.opdPatientInfoVProces = 2;
    this.generalFormResultEntryData.setTestResultStampData(this.testResultStamp);
    this.generalFormResultEntryData.setOpdPatientInfoVProces(this.opdPatientInfoVProces);
    this.generalFormResultEntryData.setResultEntryItemInfoData(this.currentPathItemInfo);
    this.generalFormResultEntryData.setPatientDemographyInfoData(this.patientDemographyInfoForShow);
    console.log("onVerified data: ", this.generalFormResultEntryData);
    this.pathRsFrmFeatureMng.isResultVerifyBtnActive = false;
    this.addLoader();
    this.pathGeneralResultEntryFormService.onVerified(this.generalFormResultEntryData).subscribe(
      res => {
        if (res.success) {
          console.log("onVerified res: ", res);
          this.toastr.success("", "Verified done.");
          this.getTestResultStampDataByStampNo();
          if (this.pathRsEntryFinalizeBtnRef) this.pathRsEntryFinalizeBtnRef.nativeElement.focus();
        } else {
          this.toastr.warning("", res.message);
          console.log("verifiedImmunology error:", res);
        }
        this.removeLoader();
        this.pathRsFrmFeatureMng.isResultVerifyBtnActive = true;
      },
      err => {
        console.log("verifiedImmunology  error: ", err);
        this.removeLoader();
      });
  }

  onClickFinalizeBtn(): void {
    console.log("onClickFinalizeBtn", this.testResultStamp);

    if (this.testResultStamp.id == null) {
      console.log("No StampNo found");
      this.toastr.warning("", "Please save this report first.");
      return;
    }
    if (this.testResultStamp.resultVerifyKeyFlag == null) {
      this.toastr.warning("", "Report not verified yet !");
      return;
    }
    if (this.pathResultEntryConfig.consultentByReqFlag === 1 && this.testResultStamp.resultFinalKeyedBy == null) {
      console.log("No resultFinalKeyedBy found");
      this.toastr.warning("", "Consultant not selected.");
      return;
    }
    let reqObj = {
      "invoiceNo": this.currentPathItemInfo.invoiceNo,
      "labNo": this.currentPathItemInfo.labNo,
      "itemNo": this.currentPathItemInfo.itemNo,
    }
    console.log("findByInvoiceNoAndLabNo reqObj: ", reqObj);
    this.pathInvoiceDtlService.findByInvoiceNoAndLabNo(reqObj).subscribe(
      res => {
        if (res.success) {
          // console.log("findByInvoiceNoAndLabNo: ", res);
          if (res.items) {
            this.currentSinglePathDtlObj = res.items[0];
            console.log("currentSinglePathDtlObj: ", this.currentSinglePathDtlObj);
            if (this.currentSinglePathDtlObj.labResultVerifyKeyFlag === 0) {
              this.toastr.warning("", "Result not verified yet, Please verify first.");
            } else {
              this.onFinalize();
            }
          }
        } else {
          this.toastr.warning("", res.message);
          console.log("findByInvoiceNoAndLabNo error:", res);
        }
      },
      err => {
        console.log("findByInvoiceNoAndLabNo error: ", err);
      });

  }

  onFinalize(): void {
    this.opdPatientInfoVProces = 3;
    this.generalFormResultEntryData.setTestResultStampData(this.testResultStamp);
    this.generalFormResultEntryData.setOpdPatientInfoVProces(this.opdPatientInfoVProces);
    this.generalFormResultEntryData.setResultEntryItemInfoData(this.currentPathItemInfo);
    this.generalFormResultEntryData.setPatientDemographyInfoData(this.patientDemographyInfoForShow);
    console.log("onFinalize date: ", this.generalFormResultEntryData);
    this.pathRsFrmFeatureMng.isResultFinalizedBtnActive = false;
    this.addLoader();
    this.pathGeneralResultEntryFormService.onFinalize(this.generalFormResultEntryData).subscribe(
      res => {
        if (res.success) {
          console.log("onFinalize Res: ", res);
          this.getTestResultStampDataByStampNo();
          this.toastr.success("", "Finalize done.");
          if (this.pathRsEntryPrintBtnRef) this.pathRsEntryPrintBtnRef.nativeElement.focus();
        } else {
          this.toastr.warning("", res.message);
        }
        this.removeLoader();
        this.pathRsFrmFeatureMng.isResultFinalizedBtnActive = true;
      },
      err => {
        console.log("onFinalizeImmunology  error: ", err);
        this.removeLoader();
      });
  }

  onClickPrintPreviewBtn(isBlankReportPrint: boolean): void {
    this.labReportInfo.isBlankReport = isBlankReportPrint;
    console.log("onClickPrintPreviewBtn currentPathItemInfo:", this.currentPathItemInfo);
    console.log("onClickPrintPreviewBtn testResultStamp:", this.testResultStamp);
    if (Object.keys(this.currentPathItemInfo).length == 0) {
      console.log("Obj Not found for Print:", this.currentPathItemInfo);
      this.toastr.warning("", "Item not found for Print. Please add item from work list.");
      this.resetInfo();
      return;
    }
    if (this.currentPathItemInfo.reportUrl == null) {
      console.log("No Report url Found", this.currentPathItemInfo);
      this.toastr.warning("", "Report Template not found for this Item.");
      return;
    }
    if (this.testResultStamp.id == null) {
      console.log("No StampNo found");
      this.toastr.warning("", "Please save this report first.");
      return;
    }
    let reqObj = {
      "invoiceNo": this.currentPathItemInfo.invoiceNo,
      "labNo": this.currentPathItemInfo.labNo,
      "itemNo": this.currentPathItemInfo.itemNo,
    }
    console.log("findByInvoiceNoAndLabNo reqObj: ", reqObj);
    this.goToPathReportPreview();

  }

  goToPathReportPreview(): void {
    this.generalFormResultEntryData.setLabReportInfo(this.labReportInfo);
    this.generalFormResultEntryData.setStampNoStr(this.testResultStamp.id);
    this.generalFormResultEntryData.setReportAccessPoint("pathology_result_entry");
    this.generalFormResultEntryData.setReportUrl(this.currentPathItemInfo.reportUrl);
    this.generalFormResultEntryData.setTestResultStampData(this.testResultStamp);
    this.generalFormResultEntryData.setOpdPatientInfoVProces(this.opdPatientInfoVProces);
    this.generalFormResultEntryData.setResultEntryItemInfoData(this.currentPathItemInfo);
    this.generalFormResultEntryData.setPatientDemographyInfoData(this.patientDemographyInfoForShow);
    console.log("goToPathReportPreview data: ", this.generalFormResultEntryData);
    this.addLoader();
    this.pathResultEntryReportService.pathReportPreview(this.generalFormResultEntryData).subscribe(
      res => {
        this.pathRsFrmFeatureMng.isResultPrintBtnActive = true;
        if (this.pathRsEntryExitBtnRef) this.pathRsEntryExitBtnRef.nativeElement.focus();
        this.removeLoader();
        let file = new Blob([res], { type: 'application/pdf' });
        if (!isHasFileData(file)) {
          this.toastr.warning("", "Report not found !");
          return;
        }
        var fileURL = URL.createObjectURL(file);
        window.open(fileURL);
      },
      err => {
        this.removeLoader();
        this.toastr.warning("", "Report not fully complete yet !");
        console.log(" Error occured in goToPathReportPreview.", err);
      });
  }

  onClicakPrintBtn(isBlankReportPrint: boolean): void {
    this.labReportInfo.isBlankReport = isBlankReportPrint;
    console.log("onClicakPrintBtn currentPathItemInfo:", this.currentPathItemInfo);
    console.log("onClicakPrintBtn testResultStamp:", this.testResultStamp);
    if (Object.keys(this.currentPathItemInfo).length == 0) {
      console.log("Obj Not found for Print:", this.currentPathItemInfo);
      this.toastr.warning("", "Item not found for Print. Please add item from work list.");
      this.resetInfo();
      return;
    }
    if (this.currentPathItemInfo.reportUrl == null) {
      console.log("No Report url Found", this.currentPathItemInfo);
      this.toastr.warning("", "Report Template not found for this Item.");
      return;
    }
    if (this.testResultStamp.id == null) {
      console.log("No StampNo found");
      this.toastr.warning("", "Please save this report first.");
      return;
    }
    if (this.testResultStamp.resultFinalKeyFlag == null) {
      this.toastr.warning("", "Result not Finalized !");
      return;
    }
    if (this.pathResultEntryConfig.consultentByReqFlag === 1 && this.testResultStamp.resultFinalKeyedBy == null) {
      console.log("No resultFinalKeyedBy found");
      this.toastr.warning("", "Consultant not selected.");
      return;
    }
    let reqObj = {
      "invoiceNo": this.currentPathItemInfo.invoiceNo,
      "labNo": this.currentPathItemInfo.labNo,
      "itemNo": this.currentPathItemInfo.itemNo,
    }
    console.log("findByInvoiceNoAndLabNo reqObj: ", reqObj);
    this.pathInvoiceDtlService.findByInvoiceNoAndLabNo(reqObj).subscribe(
      res => {
        if (res.success) {
          // console.log("findByInvoiceNoAndLabNo: ", res);
          if (res.items) {
            this.currentSinglePathDtlObj = res.items[0];
            console.log("currentSinglePathDtlObj: ", this.currentSinglePathDtlObj);
            if (this.currentSinglePathDtlObj.labResultFinalKeyFlag === 0) {
              this.toastr.warning("", "Result not finalized yet, Please finalize first.");
            } else {
              this.pathRsFrmFeatureMng.isResultPrintBtnActive = false;
              this.goToPrintResult();
            }
          }
        }
      },
      err => {
        console.log("findByInvoiceNoAndLabNo error: ", err);
      });
  }

  goToPrintResult(): void {
    this.opdPatientInfoVProces = 4;
    this.generalFormResultEntryData.setLabReportInfo(this.labReportInfo);
    this.generalFormResultEntryData.setStampNoStr(this.testResultStamp.id);
    this.generalFormResultEntryData.setTestResultStampData(this.testResultStamp);
    this.generalFormResultEntryData.setReportAccessPoint("pathology_result_entry");
    this.generalFormResultEntryData.setReportUrl(this.currentPathItemInfo.reportUrl);
    this.generalFormResultEntryData.setOpdPatientInfoVProces(this.opdPatientInfoVProces);
    this.generalFormResultEntryData.setResultEntryItemInfoData(this.currentPathItemInfo);
    this.generalFormResultEntryData.setPatientDemographyInfoData(this.patientDemographyInfoForShow);
    console.log("goToPrintResult data: ", this.generalFormResultEntryData);
    this.addLoader();
    this.pathResultEntryReportService.generateReport(this.generalFormResultEntryData).subscribe(
      res => {
        this.pathRsFrmFeatureMng.isResultPrintBtnActive = true;
        if (this.pathRsEntryExitBtnRef) this.pathRsEntryExitBtnRef.nativeElement.focus();
        this.removeLoader();
        let file = new Blob([res], { type: 'application/pdf' });
        if (!isHasFileData(file)) {
          this.toastr.warning("", "Report not found !");
          return;
        }
        var fileURL = URL.createObjectURL(file);
        window.open(fileURL);
      },
      err => {
        this.removeLoader();
        this.toastr.warning("", "Report not fully complete yet !");
        console.log(" Error occured in general report generating.", err);
      });
  }

  onEditRsItemProp(obj: any, objIndex: number, propType: any) {
    console.log('onDoubleClickRsItemProp:');
    const initialState = {
      currentItemObj: obj
    };
    this.pathItemPropEditorBsModalRef = this.modalService.show(PathItemPropEditorComponent, { initialState, class: 'modal-sm', backdrop: 'static' });
    this.pathItemPropEditorBsModalRef.content.onClose.subscribe(modalRes => {
      if (modalRes) {
        obj[propType] = modalRes;
        // console.log('onDoubleClickRsFrmItemProp obj:',obj);
        this.resultEntryFormResourceService.onFocusInputFieldByIdRef('pathTestResultResult_' + objIndex);
      }
    });
  }

  // For moving mouse course Up, Down, Left and Right on result input field.
  onKeyDownInRsInputField(event: any, obj: any, objIndex: number, refInputIdPrefix: any, rsSl: string) {
    console.log("CurrentInputFieldRef:", refInputIdPrefix, "Index:", objIndex);
    let nextIndex = 0
    if (event.keyCode == 13) {       // Enter key Press
      nextIndex = objIndex + 1;
      this.resultEntryFormResourceService.onRsFormTravelForward(event, obj, objIndex, refInputIdPrefix, null, this.pathRsEntrySaveBtnRef, this.pathRsEntryExitBtnRef);
    } else if (event.keyCode == 40) { // Down arrow key
      this.resultEntryFormResourceService.onRsFormTravelForward(event, obj, objIndex, refInputIdPrefix, null, this.pathRsEntrySaveBtnRef, this.pathRsEntryExitBtnRef);
      nextIndex = objIndex + 1;
    } else if (event.keyCode == 38) { // Up arrow key
      if (objIndex > 0) nextIndex = objIndex - 1;
      this.resultEntryFormResourceService.onRsFormTravelBackwards(event, obj, objIndex, refInputIdPrefix, null, this.pathRsEntrySaveBtnRef, this.pathRsEntryExitBtnRef);
    } else if (event.keyCode == 39) { // Right arrow key
      nextIndex = objIndex;
      this.resultEntryFormResourceService.onRsFormTravelRight(event, obj, objIndex, refInputIdPrefix, null, this.pathRsEntrySaveBtnRef, this.pathRsEntryExitBtnRef);
    } else if (event.keyCode == 37) { // Left arrow key
      nextIndex = objIndex;
      this.resultEntryFormResourceService.onRsFormTravelLeft(event, obj, objIndex, refInputIdPrefix, null, this.pathRsEntrySaveBtnRef, this.pathRsEntryExitBtnRef);
    }
    this.currentRsSl = rsSl;
    this.pathTestStructValueList = [];
    let nextObj = this.pathTestResultList[nextIndex];
    if (nextObj) {
      console.log("NextObjFound: ", nextObj);
      this.pathTestResult = nextObj;
      if (nextObj.testStructNo) this.listByTestStructNo(nextObj.testStructNo);
      this.onActiveRsSl(nextIndex, rsSl);
    }
  }

  onDblClickItemValue(obj: any): void {
    console.log('onDblClickItemValue', obj.testResult);
    if (this.pathTestResult) this.pathTestResult[this.currentRsSl] = obj.testResult;
    let selectableTag = document.getElementById(this.selectTestResultID);
    if (selectableTag != null) {
      document.getElementById(this.selectTestResultID).focus();
    }
  }

  onClickTestResult(selectObj: PathTestResult, objIndex: any, rsSl: string): void {
    console.log('onClickTestResult: ', selectObj);
    // let resultId = 'pathTestResultResult_' + objIndex;
    // this.selectTestResultID = resultId;
    this.currentRsSl = rsSl;
    this.pathTestResult = selectObj;
    this.onActiveRsSl(objIndex, rsSl);
    if (selectObj.testStructNo) this.listByTestStructNo(selectObj.testStructNo);
  }

  onActiveRsSl(objIndex: any, rsSl: string): any {
    switch (rsSl) {
      case "result": {
        let resultId = 'pathTestResultResult_' + objIndex;
        this.selectTestResultID = resultId;
        break;
      }
      case "result1": {
        let resultId = 'pathTestResultResultOne_' + objIndex;
        this.selectTestResultID = resultId;
        break;
      }
      case "result2": {
        let resultId = 'pathTestResultResultTwo_' + objIndex;
        this.selectTestResultID = resultId;
        break;
      }
      case "result3": {
        let resultId = 'pathTestResultResultThree_' + objIndex;
        this.selectTestResultID = resultId;
        break;
      }
      default: {
        let resultId = 'pathTestResultResult_' + objIndex;
        this.selectTestResultID = resultId;
        break;
      }
    }
  }


  onClickItemValueBtn(obj: PathTestResult): void {
    console.log('onClickItemValueBtn:', obj)
    if (obj.testStructNo == null) return;
    const initialState = {
      testStructNo: obj.testStructNo
    };
    this.itemValueListBsModalRef = this.modalService.show(ItemValueListViewerComponent, { initialState, class: 'modal-sm', backdrop: 'static' });
    this.itemValueListBsModalRef.content.onClose.subscribe(testResult => {
      if (testResult) {
        console.log('itemValueListBsModalRef:', testResult);
        obj[this.currentRsSl] = testResult;
      }
    });

  }

  onClickHistoryShowBtn(selectObj: PathTestResult): void {
    console.log('onClickHistoryShowBtn: ', selectObj);
    if (selectObj.id == null) return;
    const initialState = {
      testresultNo: selectObj.id
    };
    this.itemLogListBsModalRef = this.modalService.show(ItemHistoryViewerComponent, { initialState, class: 'modal-lg', backdrop: 'static' });
    this.itemLogListBsModalRef.content.onClose.subscribe(testResult => {
      if (testResult) {
        console.log('itemLogListBsModalRef:', testResult);
        selectObj[this.currentRsSl] = testResult;
      }
    });
  }
  onPathMthInputKeydownEvent(event: any, refElement: any): void {
    console.log("onPathMthInputKeydownEvent: ", event, refElement);

    if (event.keyCode == 13 && event.ctrlKey) {

      switch (refElement) {
        case "pathsMthInput_1": {
          if (this.pathsMthInput_2) {
            this.pathsMthInput_2.nativeElement.focus()
          } else {
            this.pathRsEntrySaveBtnRef.nativeElement.focus()
          }
          break;
        }
        case "pathsMthInput_2": {
          if (this.pathsMthInput_3) {
            this.pathsMthInput_3.nativeElement.focus()
          } else {
            this.pathRsEntrySaveBtnRef.nativeElement.focus()
          }
          break;
        }
        case "pathsMthInput_3": {
          if (this.pathsMthInput_4) {
            this.pathsMthInput_4.nativeElement.focus();
          } else {
            this.pathRsEntrySaveBtnRef.nativeElement.focus();
          }
          break;
        }
        case "pathsMthInput_4": {
          if (this.pathsMthInput_5) {
            this.pathsMthInput_5.nativeElement.focus();
          } else {
            this.pathRsEntrySaveBtnRef.nativeElement.focus();
          }
          break;
        }
        case "pathsMthInput_5": {
          if (this.pathsMthInput_6) {
            this.pathsMthInput_6.nativeElement.focus()
          } else {
            this.pathRsEntrySaveBtnRef.nativeElement.focus();
          }
          break;
        }
        case "pathsMthInput_6": {
          if (this.pathRsEntrySaveBtnRef) {
            this.pathRsEntrySaveBtnRef.nativeElement.focus()
          } else {
            this.pathRsEntryExitBtnRef.nativeElement.focus();
          }
          break;
        }
        default: {
          if (this.pathRsEntryExitBtnRef) this.pathRsEntryExitBtnRef.nativeElement.focus()
          break;
        }
      }

    }
  }


  listByTestStructNo(testStructNo: number): void {
    this.pathTestStructValueList = [];
    let testStructNoObj = { "testStructNo": testStructNo }
    this.pathTestStructValueService.listByTestStructNo(testStructNoObj).subscribe(
      res => {
        if (res.success) {
          console.log("Value listByTestStructNo: ", res);
          this.pathTestStructValueList = res.items;
        } else {
          console.log("listByTestStructNo error:", res);
        }
      },
      err => {
        console.log("listByTestStructNo error: ", err);
      });
  }

  onDoubleClickForPathsMethodData(obj, dataFor): void {
    console.log("onDoubleClickForPathsMethodData: ", dataFor)
    this.currentPathsMethodList = [];
    if (dataFor === 'comments') this.currentPathsMethodList = this.pathsMethodComList;
    if (dataFor === 'note') this.currentPathsMethodList = this.pathsMethodNotList;
    if (dataFor === 'testMethod') this.currentPathsMethodList = this.pathsMethodMthList;
    if (dataFor === 'analyzerDesc') this.currentPathsMethodList = this.pathsMethodAnaList;
    if (this.currentPathsMethodList.length == 0) {
      this.toastr.warning("", `No Setup value found for ${dataFor} !`);
      return;
    }
    // console.log("currentPathsMethodList: ",this.currentPathsMethodList)
    // return;
    const initialState = {
      currentPathsMethodList: this.currentPathsMethodList,
      dataFor: dataFor
    };
    this.pathsMethodDataBsModalRef = this.modalService.show(PathsMethodDataViewerComponent, { initialState, class: 'modal-sm', backdrop: 'static' });
    this.pathsMethodDataBsModalRef.content.onClose.subscribe(methodName => {
      if (methodName) {
        obj[dataFor] = methodName;
        // console.log('pathsMethodData obj:',obj);
      }
    });
  }

  onClickStepCancelBtn(): void {
    console.log("onClickStepCancelBtn:", this.currentPathItemInfo)
    if (this.currentPathItemInfo.invoiceId == undefined || this.currentPathItemInfo.invoiceId == null) {
      this.toastr.warning("", "No Invoice Id found !");
    }
    this.pathologySharedService.setObj(this.currentPathItemInfo);
    this.router.navigateByUrl(`diagnostic/pathology/step-cancellation`);
  }


  onClickExitBtn(): void {
    this.pathologySharedService.setInvoiceId(this.currentPathItemInfo.invoiceId);
    this.router.navigateByUrl('diagnostic/pathology/result-entry');
  }


  getTestResultStampDataByStampNo(): any {
    console.log('getTestResultStampDataByStampNo Data: ', this.testResultStamp)
    this.addLoader();
    console.log("############## API 3  (getTestResultStampDataByStampNo) CALL START...");
    return new Promise<any>((resolve, reject) => {
      this.testResultStampService.getTestResultStampByStampNo(this.currentPathItemInfo).subscribe(
        res => {
          if (res.success) {
            console.log("getTestResultStampDataByStampNo rea: ", res);
            this.testResultStamp = res.obj;
            let that = this;
            if (that.testResultStamp.resultPreparedKeyedBy > 0) {
              let matchObj = that.preparedByInfoList.find(obj => obj.docId === that.testResultStamp.resultPreparedKeyedBy);
              if (!matchObj) {
                that.getOtherPrepEmpByEmpNo(that.testResultStamp.resultPreparedKeyedBy);
              }
            }
            if (that.testResultStamp.resultVerifyKeyedBy > 0) {
              let matchObj = that.verifyByInfoList.find(obj => obj.docId === that.testResultStamp.resultVerifyKeyedBy);
              if (!matchObj) {
                that.getOtherVerifyEmpByEmpNo(that.testResultStamp.resultVerifyKeyedBy);
              }
            }
            if (that.testResultStamp.resultFinalKeyedBy > 0) {
              let matchObj = that.consultationInfoList.find(obj => obj.docId === that.testResultStamp.resultFinalKeyedBy);
              if (!matchObj) {
                that.getOtherConsultDocDocNo(that.testResultStamp.resultFinalKeyedBy);
              }
            }
            console.log("############## API 3  (getTestResultStampDataByStampNo) CALL RESOLVE 1");
            resolve(res);
          } else {
            console.log("getTestResultStampDataByStampNo error:", res);
            let allNote = "";
            let allComments = "";
            let allPlainText = "";
            let allTestMethod = "";
            let allAnalyzerDesc = "";
            let allInterpretation = "";
            this.pathTestResultList.forEach(function (obj) {
              if (obj.note) allNote += obj.note + "\n"
              if (obj.comments) allComments += obj.comments + "\n"
              if (obj.plainText) allPlainText += obj.plainText + "\n"
              if (obj.testMethod) allTestMethod += obj.testMethod + "\n"
              if (obj.analyzerDesc) allAnalyzerDesc += obj.analyzerDesc + "\n"
              if (obj.interpretation) allInterpretation += obj.interpretation + "\n"
            });
            this.currentPathsTestTemp.note? this.testResultStamp.note = allNote + this.currentPathsTestTemp.note:this.testResultStamp.note = allNote
            this.currentPathsTestTemp.comments? this.testResultStamp.comments = allComments + this.currentPathsTestTemp.comments:this.testResultStamp.comments = allComments;
            this.currentPathsTestTemp.plainText?this.testResultStamp.plainText = allPlainText + this.currentPathsTestTemp.plainText:this.testResultStamp.plainText = allPlainText;
            this.currentPathsTestTemp.testMethod?this.testResultStamp.testMethod = allTestMethod + this.currentPathsTestTemp.testMethod:this.testResultStamp.testMethod = allTestMethod;
            this.currentPathsTestTemp.analyzerDesc?this.testResultStamp.analyzerDesc = allAnalyzerDesc + this.currentPathsTestTemp.analyzerDesc:this.testResultStamp.analyzerDesc = allAnalyzerDesc;
            this.currentPathsTestTemp.interpretation?this.testResultStamp.interpretation = allInterpretation + this.currentPathsTestTemp.interpretation:this.testResultStamp.interpretation = allInterpretation;
          }
          this.removeLoader();
          console.log("############## API 3  (getTestResultStampDataByStampNo) CALL RESOLVE 2");
          resolve(res);
        },
        err => {
          this.removeLoader();
          console.log("getTestResultStampDataByStampNo  error: ", err);
          reject(null);
        });
    });
  }


  getPathTestResultList(): any {
    if (this.currentPathItemInfo.invoiceNo == undefined && this.currentPathItemInfo.itemNo == undefined) {
      console.log("Item not found");
      return;
    }
    this.addLoader();
    console.log("############## API 2  (getPathTestResultList) CALL START..");
    return new Promise<any>((resolve, reject) => {
      this.pathTestResultService.getPathTestResultList(this.currentPathItemInfo).subscribe(
        res => {
          if (res.success) {
            console.log("getPathTestResultList: ", res);
            this.pathTestResultList = res.items;
            if (this.pathTestResultList) {
              this.resultEntryFormResourceService.onLoadRsFormFocusInputFieldByIdRef('pathTestResultResult_0');
              if (this.pathTestResultList[0]) {
                this.selectTestResultID = 'pathTestResultResult_0';
                this.pathTestResult = this.pathTestResultList[0];
                this.listByTestStructNo(this.pathTestResultList[0].testStructNo);
              }
            }

          } else {
            console.log("getPathTestResultList error:", res);
          }
          console.log("############## API 2  (getPathTestResultList) CALL RESOLVE");
          resolve(res);
        },
        err => {
          this.removeLoader();
          console.log("getPathTestResultList error: ", err);
          reject(null);
        });
    });
  }

  getOtherPrepEmpByEmpNo(empNo: any): void {
    let reqObj = { "empNo": empNo }
    this.resultEntryTemplateAuthorInfoService.prepEmpByEmpNo(reqObj).subscribe(
      res => {
        if (res.success) {
          console.log("getOtherPrepEmpByEmpNo: ", res);
          if (res.obj) {
            this.otherPrepEmp = res.obj;
          }
        } else {
          console.log("getOtherPrepEmpByEmpNo error:", res);
        }
      },
      err => {
        console.log("getOtherPrepEmpByEmpNo error: ", err);
      });
  }

  getOtherVerifyEmpByEmpNo(empNo: any): void {
    let reqObj = { "empNo": empNo }
    this.resultEntryTemplateAuthorInfoService.verifyEmpByEmpNo(reqObj).subscribe(
      res => {
        if (res.success) {
          console.log("getOtherVerifyEmpByEmpNo: ", res);
          if (res.obj) {
            this.otherVerifyEmp = res.obj;
          }
        } else {
          console.log("getOtherVerifyEmpByEmpNo error:", res);
        }
      },
      err => {
        console.log("getOtherVerifyEmpByEmpNo error: ", err);
      });
  }

  getOtherConsultDocDocNo(docNo: any): void {
    let reqObj = { "docNo": docNo }
    this.resultEntryTemplateAuthorInfoService.finalDocByDocNo(reqObj).subscribe(
      res => {
        if (res.success) {
          console.log("getOtherConsultDocDocNo: ", res);
          if (res.obj) {
            this.otherFinalEmp = res.obj;
          }
        } else {
          console.log("getOtherConsultDocDocNo error:", res);
        }
      },
      err => {
        console.log("getOtherConsultDocDocNo error: ", err);
      });
  }


  onClickPathDtlItem(invoiceDtlObj: any): void {
    console.log("onClickPathDtlItem:", invoiceDtlObj);
  }
  clearPreparedBy(): void {
    this.otherPrepEmp = "";
    this.currentkPreparedBy = new PreparedByAuthInfo();
    this.testResultStamp.resultPreparedKeyedBy = null;
  }
  clearScientificBy(): void {
    this.otherVerifyEmp = "";
    this.currentVerifyBy = new VerifyByAuthInfo();
    this.testResultStamp.resultVerifyKeyedBy = null;
  }
  clearConsultantBy(): void {
    this.otherFinalEmp = "";
    this.currentConsultation = new FinalizedByAuthInfo();
    this.testResultStamp.resultFinalKeyedBy = null;
  }

  resetInfo(): void {
    this.patientDemographyInfoForShow = "";
  }

  ngOnDestroy(): void {
    this.subscription.unsubscribe();
    this.pathResultEntrySharedService.setPathItemObjForResultEntry(null);
  }

  addLoader(): void {
    if (!this.generalResultEntryFormBody.nativeElement.classList.contains('loader')) {
      this.generalResultEntryFormBody.nativeElement.classList.add('loader');
    }
  }

  removeLoader(): void {
    if (this.generalResultEntryFormBody.nativeElement.classList.contains('loader')) {
      this.generalResultEntryFormBody.nativeElement.classList.remove('loader');
    }
  }

  onChangeResultPrepBy(): void {
    console.log('onChangeResultPrepBy', this.testResultStamp.resultPreparedKeyedBy);
    this.otherPrepEmp = "";
  }

  onChangeResultVerifyBy(): void {
    console.log('onChangeResultVerifyBy', this.testResultStamp.resultVerifyKeyedBy);
    this.otherVerifyEmp = "";
  }

  onChangeResultFinalBy(): void {
    console.log('onChangeResultFinalBy', this.testResultStamp.resultFinalKeyedBy);
    this.otherFinalEmp = "";
  }

  // For EMR showing
  onClickLoadlabNonLabReport(): void {
    console.log("EMR currentPathItemInfo:", this.currentPathItemInfo);
    console.log("EMR patientDemographyInfo:", this.patientDemographyInfo);
    if (this.currentPathItemInfo.hospitalNumber == null) {
      this.toastr.warning("", "Hospital number not found. ");
      return;
    }
    const labNonLabReportHttpParams = new HttpParams().set('hnNumber', this.currentPathItemInfo.hospitalNumber);
    this.consultationService.getLabNonLabReportList(labNonLabReportHttpParams).subscribe(
      res => {
        if (res[0].success) {
          console.log("EMR Load res:", res)
          this.labReportList = res[0].items;
          // this.nonLabReportList = res[1].items;
          this.labReportFilterByItemNoList = this.labReportList.filter((obj: any) => obj.itemNo === this.currentPathItemInfo.itemNo);
          console.log("EMI Filter list:", this.labReportFilterByItemNoList);
          const initialState = {
            isActive: true,
            isLoading: false,
            labReports: this.labReportFilterByItemNoList,
            nonLabReports: this.nonLabReportList,
            isInvoiceBillPaid: true,
            selectedConsultation: this.patientDemographyInfo
          };
          this.bsModalRef = this.modalService.show(BasicLabReportComponent, Object.assign({}, this.labNonLabReportModalConfig, { initialState }));

        } else {
          console.log('Error occurred while get all OPD lab non report list.');
        }
      },
      err => {
        console.log('Http error occurred while get all OPD lab non lab report list.');
      })


  }
  // EMR

  getAuthorizePrivileged(): void {
    this.userFeatureService.getAuthorizePreviledge().subscribe(
      res => {
        if (res.success) {
          console.log("getAuthorizePreviledge: ", res);

          if (res.items != null) {
            for (let i in res.items) {

              if (res.items[i].featureCode === 'PATH-PRSA-1007' && res.items[i].isGranted) {
                this.pathUserFeaturAccess.resultEntrySaveAcc = true;
              }
              if (res.items[i].featureCode === 'PATH-VRETA-1003' && res.items[i].isGranted) {
                this.pathUserFeaturAccess.resultEntryVerifiedAcc = true;
              }
              if (res.items[i].featureCode === 'PATH-FRETA-1004' && res.items[i].isGranted) {
                this.pathUserFeaturAccess.resultEntryFinalizeAcc = true;
              }
              if (res.items[i].featureCode === 'PATH-PRPA-1010' && res.items[i].isGranted) {
                this.pathUserFeaturAccess.resultEntryPrintAcc = true;
              }
            }
          }
        } else {
          console.log("getAuthorizePreviledge error:", res);
        }
      },
      err => {
        console.log("getAuthorizePreviledge  error: ", err);
        this.removeLoader();
      });
  }

  setUserInfoByAccess(): void {
    if (!this.pathUserFeaturAccess.resultEntrySaveAcc) {
      this.clearPreparedBy();
    }
    if (!this.pathUserFeaturAccess.resultEntryVerifiedAcc) {
      this.clearScientificBy();
    }
    if (!this.pathUserFeaturAccess.resultEntryFinalizeAcc) {
      this.clearConsultantBy();
    }
  }



}

-------------------------------------------------

=================================================
#Router
=================================================
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { AuthComponent } from './auth/auth.component';
import { DashboardComponent } from './dashboard/dashboard.component';
import { NotFoundComponent } from './not-found/not-found.component';
import { HashLocationStrategy, LocationStrategy } from '@angular/common';
import { AuthGuard } from './auth/guards/auth.guard';

// Layouts
import { HomeLayoutComponent } from './layouts/home-layout/home-layout.component';
import { LoginLayoutComponent } from './layouts/login-layout/login-layout.component';
import { DashboardLayoutComponent } from './layouts/dashboard-layout/dashboard-layout.component';
import { BrowserNavigationGuard } from './auth/guards/browser-navigation.guard';
import { EmrComponent } from './emr/emr.component';
import { FullLayoutComponent } from './layouts/full-layout/full-layout.component';

const routes: Routes = [
  {
    path: '',
    component: DashboardLayoutComponent,
    canActivate: [AuthGuard],
    children: [
      {
        path: '',
        component: DashboardComponent,
        /*
        child routing added to handle /dashboarc url using left nav from sub module
        */
        children: [
          {
            path: 'dashboard',
            component: DashboardComponent
          }
        ]
      }
    ]
  },
  {
    path: '',
    component: LoginLayoutComponent,
    canActivate: [BrowserNavigationGuard],
    children: [
      {
        path: 'login',
        component: AuthComponent
      }
    ]
  },
  {
    path: 'diagnostic',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../diagnostic/diagnostic.module#DiagnosticModule'
  },
  {
    path: 'pharmacy',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../pharmacy/pharmacy.module#PharmacyModule'
  },
  {
    path: 'opd',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../opd/opd.module#OpdModule'
  },
  {
    path: 'ipd',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../ipd/ipd.module#IpdModule'
  },
  {
    path: 'hrm',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../hrm/hrm.module#HRMModule'
  },
  {
    path: 'emergency-casualty',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../emergency-casualty/emergency-casualty.module#EmergencyCasualtyModule'
  },
  {
    path: 'security',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../security/security.module#SecurityModule'
  },
  {
    path: 'displayboard',
    component: LoginLayoutComponent,
    children: [
      {
        path: 'opd',
        component: LoginLayoutComponent,
        loadChildren: '../opd-queue-displayboard/opd-queue-displayboard.module#OpdQueueDisplayboardModule'
      }
    ]
  },
  {
    path: 'display-board',
    component: LoginLayoutComponent,
    children: [
      {
        path: 'display',
        component: LoginLayoutComponent,
        loadChildren: '../displayboard/displayboard.module#DisplayboardModule'
      }
    ]
  },
  
  {
    path: 'reception',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../reception/reception.module#ReceptionModule'
  },
  {
    path: 'daycare',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../daycare/daycare.module#DaycareModule'
  },
  {
    path: 'daycare-services',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../daycare-services/daycare-services.module#DaycareServicesModule'
  },
  {
    path: 'dietary',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../dietary/dietary.module#DietaryModule'
  },
  {
    path: 'external-service',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../external-service/external-service.module#ExternalServiceModule'
  },
  {
    path: 'hr-payroll',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../hr-payroll/hr-payroll.module#HrPayrollModule'
  },
  {
    path: 'material-management',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../material-management/material-management.module#MaterialManagementModule'
  },
  {
    path: 'accounts', 
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],  
    loadChildren: '../accounts/accounts.module#AccountsModule'
  },
  {
    path: 'queue-managment-system', 
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],  
    loadChildren: '../queue-managment-system/queue-managment-system.module#QueueManagmentSystemModule'
  },
  {
    path: 'package',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../package/package.module#PackageModule'
  },
  {
    path: 'corporate-client',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../corporate-client/corporate-client.module#CorporateClientModule'
  },

  {
    path: 'fixed-asset',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../fixed-asset/fixed-asset.module#FixedAssetModule'
  },
  {
    path: 'house-keeping',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../house-keeping/house-keeping.module#HouseKeepingModule'
  },
  {
    path: 'vaccinenation',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../vaccinenation/vaccinenation.module#VaccinenationModule'
  },
  {
    path: 'health-checkup',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../health-checkup/health-checkup.module#HealthCheckupModule'
  },
  {
    path: 'emr-service',
    component: HomeLayoutComponent,
    loadChildren: '../emergency-service/emergency-service.module#EmergencyServiceModule'
  },
  {
    path: 'reports',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../reports/reports.module#ReportsModule'
  },
  
  {
    path: 'patient-info-post',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../patient-info-post/patient-info-post.module#PatientInfoPostModule'
  },

  {
    path: 'operation-theater',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../operation-theater/operation-theater.module#OperationTheaterModule'
  },

  {
    path: 'statistics-view',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../statistics-view/statistics-view.module#StatisticsViewModule'
  },

  {
    path: 'theme-setting',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../theme-setting/theme-setting.module#ThemeSettingModule'
  },

  {
    path: 'dynamic-theme-setting',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../dynamic-theme-setting/dynamic-theme-setting.module#DynamicThemeSettingModule'
  },

  {
    path: 'car-parking',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../car-parking/car-parking.module#CarParkingModule'
  },

  {
    path: 'customer-relation-manage',
    component: HomeLayoutComponent,
    canActivate: [AuthGuard],
    loadChildren: '../customer-relation-manage/customer-relation-manage.module#CustomerRelationManageModule'
  },


  {
    path: 'his',
    component: HomeLayoutComponent,
    children: [
      {
        path: 'emr',
        component: EmrComponent,
        canActivate: [AuthGuard],
      }
    ]
  },
  // {
  //   path: 'opd-queue-displayboard',
  //   component: HomeLayoutComponent,
  //   loadChildren: '../opd-queue-displayboard/opd-queue-displayboard.module#OpdQueueDisplayboardModule'
  // },
  {
    path: 'onlineappointment',
    component: LoginLayoutComponent,
    children: [
      {
        path: 'appointment',
        component: LoginLayoutComponent,
        loadChildren: '../online-appointment/online-appointment.module#OnlineAppointmentModule'
      }
    ]
  },
  {
    path: 'online',
    component: FullLayoutComponent,
    children: [
      {
        path: '',
        component: FullLayoutComponent,
        loadChildren: '../full-layout/full-layout.module#FullLayoutModule'
      }
    ]
  },
  {
    path: 'videoconference',
    component: LoginLayoutComponent,
    children: [
      {
        path: 'viconference',
        component: LoginLayoutComponent,
        loadChildren: '../video-conference/video-conference.module#VideoConferenceModule'
      }
    ]
  },
  {
    path: '**',
    component: NotFoundComponent
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes,{ scrollPositionRestoration: 'enabled', anchorScrolling: 'enabled', })],
  exports: [RouterModule],
  providers: [{ provide: LocationStrategy, useClass: HashLocationStrategy }]
})
export class CoreRoutingModule { }


Route#
======
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { DashboardComponent } from './dashboard/dashboard.component';
import { AuthGuard } from '../core/auth/guards/auth.guard';
import { InformationDeskComponent } from './information-desk/information-desk.component';
import { DiagItemBookingWorklistComponent } from './diag-item-booking-worklist/diag-item-booking-worklist.component';
import { DiagnosticItemBookingComponent } from './diagnostic-item-booking/diagnostic-item-booking.component';

const routes: Routes = [
  {
    path: '',
    redirectTo: 'dashboard',
    pathMatch: 'full'
  },
  {
    path: 'dashboard',
    canActivate: [AuthGuard],
    component: DashboardComponent
  },
  {
    path: 'diagnostic-config',
    canActivate: [AuthGuard],
    loadChildren: './config-diagnostic/config-diagnostic.module#ConfigDiagnosticModule'
  },
  {
    path: 'diagnostic-service',
    canActivate: [AuthGuard],
    loadChildren: './diagnostic-services/diagnostic-services.module#DiagnosticServicesModule'
  },
  {
    path: 'billing',
    canActivate: [AuthGuard],
    loadChildren: './billing/billing.module#BillingModule'
  },
  {
    path: 'pathology',
    canActivate: [AuthGuard],
    loadChildren: './pathology/pathology.module#PathologyModule'
  },
  {
    path: 'radiology',
    canActivate: [AuthGuard],
    loadChildren: './radiology/radiology.module#RadiologyModule'
  },
  {
    path: 'information-desk',
    canActivate: [AuthGuard],
    component: InformationDeskComponent
  },
  {
    path: 'diag-item-booking-worklist',
    canActivate: [AuthGuard],
    component: DiagItemBookingWorklistComponent
  },
  {
    path: 'diagnostic-item-booking',
    canActivate: [AuthGuard],
    component: DiagnosticItemBookingComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class DiagnosticRoutingModule { }

Router2
=======

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { EmailManagementComponent } from './email-management/email-management.component';
import { MessageManagementComponent } from './message-management/message-management.component';

const routes: Routes = [
  {
    path: '',
    redirectTo: 'dashboard',
    pathMatch: 'full'
  },
  {
    path: 'email-management',
    component: EmailManagementComponent
  },
  {
    path: 'message-management',
    component: MessageManagementComponent
  },
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class CustomerRelationManageRoutingModule { }



Module
=======
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { CustomerRelationManageRoutingModule } from './customer-relation-manage-routing.module';
import { EmailManagementComponent } from './email-management/email-management.component';
import { SharedModule } from '../shared/shared.module';
import { EmailSentWorklisComponent } from './email-management/email-sent-worklis/email-sent-worklis.component';
import { ComposeEmailComponent } from './email-management/compose-email/compose-email.component';
import { MessageManagementComponent } from './message-management/message-management.component';
import { MessageSentWorklistComponent } from './message-management/message-sent-worklist/message-sent-worklist.component';
import { ComposeMessageComponent } from './message-management/compose-message/compose-message.component';
import { UpdateSmsSentInfoModalComponent } from './crm-modal/update-sms-sent-info-modal/update-sms-sent-info-modal.component';
import { UpdateEmailSentInfoModalComponent } from './crm-modal/update-email-sent-info-modal/update-email-sent-info-modal.component';

@NgModule({
  declarations: [
    EmailManagementComponent,
    EmailSentWorklisComponent,
    ComposeEmailComponent,
    MessageManagementComponent,
    MessageSentWorklistComponent,
    ComposeMessageComponent,
    UpdateSmsSentInfoModalComponent,
    UpdateEmailSentInfoModalComponent
  ],
  imports: [
    CommonModule,
    SharedModule,
    CustomerRelationManageRoutingModule
  ],
  entryComponents: [
    UpdateSmsSentInfoModalComponent,
    UpdateEmailSentInfoModalComponent

  ],
})
export class CustomerRelationManageModule { }


Module2
======

import { NgModule } from '@angular/core';

import { DiagnosticRoutingModule } from './diagnostic-routing.module';
import { DashboardComponent } from './dashboard/dashboard.component';
import { SharedModule } from '../shared/shared.module';
import { BillingModule } from './billing/billing.module';
import { InformationDeskComponent } from './information-desk/information-desk.component';
import { InvoiceReportComponent } from './information-desk/invoice-report/invoice-report.component';
import { ReprintHnCardComponent } from './information-desk/reprint-hn-card/reprint-hn-card.component';
import { InvoicePricingComponent } from './information-desk/invoice-pricing/invoice-pricing.component';
import { ResetPasswordComponent } from './information-desk/reset-password/reset-password.component';
import { InvestigationStatusComponent } from './information-desk/investigation-status/investigation-status.component';
import { PathologyInvStatusComponent } from './information-desk/investigation-status/pathology-inv-status/pathology-inv-status.component';
import { RadiologyImagingStatusComponent } from './information-desk/investigation-status/radiology-imaging-status/radiology-imaging-status.component';
import { DiagItemBookingWorklistComponent } from './diag-item-booking-worklist/diag-item-booking-worklist.component';
import { DiagnosticItemBookingComponent } from './diagnostic-item-booking/diagnostic-item-booking.component';


@NgModule({
  declarations: [
     DashboardComponent, 
     InformationDeskComponent,
     InvoiceReportComponent,
     ReprintHnCardComponent, 
     InvoicePricingComponent, 
     ResetPasswordComponent, 
     InvestigationStatusComponent, 
     PathologyInvStatusComponent, 
     RadiologyImagingStatusComponent, 
     DiagItemBookingWorklistComponent, DiagnosticItemBookingComponent
  ],
  imports: [
    DiagnosticRoutingModule,
    SharedModule
  ],
  entryComponents: [
  ]
})
export class DiagnosticModule { }

Module2
=========


import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule } from '@angular/router';
import { CookieService } from 'ngx-cookie-service';
import { FullCalendarModule } from '@fullcalendar/angular';
// datatables
import { DataTablesModule, DataTableDirective } from 'angular-datatables';

// Date Picker
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import { ConfirmationDialogComponent } from './components/confirmation-dialog/confirmation-dialog.component';

// Modal
import { ModalModule, BsModalRef, TooltipModule, TabsModule, TypeaheadModule, CollapseModule } from 'ngx-bootstrap';

// ngx-order-pipe
import { OrderModule } from 'ngx-order-pipe';


import { PopoverModule } from 'ngx-bootstrap/popover';
// password Match
import { MustMatchDirective } from '../core/header/security-profile-modal/_coreSecurityProfile/passwordMatch.directive';

// TinyMCE
import { EditorModule } from '@tinymce/tinymce-angular';

// BsDropdown
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TmplConfirmationDialogComponent } from './components/tmpl-confirmation-dialog/tmpl-confirmation-dialog.component';

// Ngx-Mask
import { NgxMaskModule } from 'ngx-mask'

// Digit Only || Only numeric field
import { DigitOnlyModule } from '@uiowa/digit-only';

// NG-Select
import { NgSelectModule } from '@ng-select/ng-select';
import { FilterPipe } from './pipes/filter.pipe';

// High charts
import { ChartModule } from '@rijine/ngx-highcharts';
import { HighchartsStatic } from "@rijine/ngx-highcharts/dist/services/highcharts.service";

//TimepickerModule
import { TimepickerModule } from 'ngx-bootstrap';

import { ButtonsModule } from 'ngx-bootstrap/buttons';
//Sliding scale
import { Ng5SliderModule } from 'ng5-slider';

// AccordionModule
import { AccordionModule } from 'ngx-bootstrap';
import { OpdPatientsListComponent } from 'src/app/shared/components/opd-patients-list/opd-patients-list.component';
import { TwoDigitDecimaNumberDirective } from './directives/two-digit-decima-number.directive';
import { PrescriptionConfirmationComponent } from './components/prescription-confirmation/prescription-confirmation.component';
import { GroupByPipe } from './pipes/group-by.pipe';
import { MultiFilterPipe } from './pipes/multi-filter.pipe';
import { TemplateSetupQuesFormComponent } from './components/template-setup-ques-form/template-setup-ques-form.component';
import { WebCamComponent } from './components/web-cam/web-cam.component';
import { WebcamModule } from 'ngx-webcam';
import { TemplateFullCalenderComponent } from './components/template-full-calender/template-full-calender.component';
import { RegPassportConfirmationComponent } from './components/reg-passport-confirmation/reg-passport-confirmation.component';

export function highchartsFactory() {
  return require('highcharts');
}

@NgModule({
  declarations: [
    ConfirmationDialogComponent,
    MustMatchDirective,
    TmplConfirmationDialogComponent,
    FilterPipe,
    MultiFilterPipe,
    OpdPatientsListComponent,
    TwoDigitDecimaNumberDirective,
    PrescriptionConfirmationComponent,
    GroupByPipe,
    WebCamComponent,
    TemplateSetupQuesFormComponent,
    TemplateFullCalenderComponent,
    RegPassportConfirmationComponent
  ],
  entryComponents: [
    ConfirmationDialogComponent,
    TmplConfirmationDialogComponent,
    PrescriptionConfirmationComponent,
    WebCamComponent,
    RegPassportConfirmationComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule,
    RouterModule,
    DataTablesModule,
    // DataTableDirective,
    BsDatepickerModule.forRoot(),
    ModalModule.forRoot(),
    TooltipModule.forRoot(),
    TabsModule.forRoot(),
    TypeaheadModule.forRoot(),
    OrderModule,
    PopoverModule.forRoot(),
    EditorModule,
    BsDropdownModule.forRoot(),
    NgxMaskModule.forRoot(),
    DigitOnlyModule,
    NgSelectModule,
    ChartModule,
    // TimepickerModule
    TimepickerModule.forRoot(),
    ButtonsModule.forRoot(),
    Ng5SliderModule,
    AccordionModule.forRoot(),
    CollapseModule.forRoot(),
    FullCalendarModule, // import the FullCalendar module! will make the FullCalendar component available
    WebcamModule,
  ],
  exports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule,
    RouterModule,
    DataTablesModule,
    // DataTableDirective,
    BsDatepickerModule,
    ModalModule,
    TooltipModule,
    TabsModule,
    TypeaheadModule,
    OrderModule,
    PopoverModule,
    MustMatchDirective,
    EditorModule,
    BsDropdownModule,
    NgxMaskModule,
    DigitOnlyModule,
    NgSelectModule,
    FilterPipe,
    MultiFilterPipe,
    GroupByPipe,
    ChartModule,
    TimepickerModule,
    ButtonsModule,
    Ng5SliderModule,
    AccordionModule,
    CollapseModule,
    OpdPatientsListComponent,
    TwoDigitDecimaNumberDirective,
    FullCalendarModule,
    WebCamComponent,
    TemplateSetupQuesFormComponent,
    TemplateFullCalenderComponent,
  ],
  providers: [BsModalRef, CookieService, { provide: HighchartsStatic, useFactory: highchartsFactory }]
})
export class SharedModule { }


-------------------------------------------------

=================================================
#Service | Token | Auth
=================================================

Serice1
======
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable, throwError, of } from 'rxjs';
import { User } from '../models/user.model';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { environment } from 'src/environments/environment';
import { map, catchError } from 'rxjs/operators';
import { CookieService } from 'ngx-cookie-service';
import { CustomizeCookieService } from './customize-cookie.service';
import { ToastrService } from 'ngx-toastr';
import { VideoconferenceService } from 'src/app/opd/quick-consultation/_coreConsultation/services/videoconference.service';

@Injectable()
export class AuthService {
    private loggedIn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
    private BASE_URL = environment.baseUrl;
    private API_URL = environment.authApiUrl;
    private END_POINT = '/oauth/token';
    private USER_DETAILS = this.BASE_URL + this.API_URL + '/api/coreUser/user-details';
    private AUTH_URL = `${this.BASE_URL}${this.API_URL}${this.END_POINT}`;

    private CLIENT_ID = 'medClientIdPassword';
    private PASSWORD = 'secret';
    private GRANT_TYPE = 'password';

    public _isLoading = false;
    private isLoading: BehaviorSubject<boolean> = new BehaviorSubject(false);
    private errorMgs: BehaviorSubject<string> = new BehaviorSubject(null);

    userDetils: any = {};
    localStorageObj: any = {}

    get isLoggedIn() {
        this.checkCredentials();
        return this.loggedIn.asObservable();
    }

    constructor(
        private router: Router,
        private httpClient: HttpClient,
        private cookieService: CookieService,
        private cookie: CustomizeCookieService,
        private toastr: ToastrService,
        private videoconferenceService:VideoconferenceService
    ) { }

    // obtainAccessToken(user: User) {

    //     this._isLoading = true;
    //     this.isLoading.next(this._isLoading);

    //     const params = new HttpParams()
    //         .set('username', user.userName)
    //         .set('password', user.password)
    //         .set('grant_type', this.GRANT_TYPE)
    //         .set('client_id', this.CLIENT_ID);

    //     const headers = {
    //         'Authorization': 'Basic ' + btoa(`${this.CLIENT_ID}:${this.PASSWORD}`),
    //         'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'
    //     }

    //     this.httpClient.post<any>(this.AUTH_URL, params.toString(), { headers }).pipe(
    //         map(res => res))
    //         .subscribe(
    //             data => {
    //                 this.saveToken(data);
    //                 this._isLoading = false;
    //                 this.isLoading.next(this._isLoading);
    //                 this.errorMgs.next('');
    //             },
    //             err => {
    //                 this._isLoading = false;
    //                 this.isLoading.next(this._isLoading);
    //                 // console.error('Credentials error ', err);
    //                 var errorMessage = navigator.onLine ? err.error.error_description : 'Please check your internet connection or try again later';

    //                 if (errorMessage === undefined) {
    //                     errorMessage = 'Service not available, please contact with Administrator';
    //                 }
    //                 this.errorMgs.next(errorMessage);
    //             }
    //         );

    // }

    obtainAccessToken(user: User) {

        this._isLoading = true;
        this.isLoading.next(this._isLoading);

        const params = new HttpParams()
            .set('username', user.userName)
            .set('password', user.password)
            .set('grant_type', this.GRANT_TYPE)
            .set('client_id', this.CLIENT_ID);

        const headers = {
            'Authorization': 'Basic ' + btoa(`${this.CLIENT_ID}:${this.PASSWORD}`),
            'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'
        }

        this.httpClient.post<any>(this.AUTH_URL, params.toString(), { headers }).pipe(
            map(res => res))
            .subscribe(
                data => {
                    this.saveToken(data);
                    this._isLoading = false;
                    this.isLoading.next(this._isLoading);
                    this.errorMgs.next('');
                },
                err => {
                    this._isLoading = false;
                    this.isLoading.next(this._isLoading);
                    console.error('Credentials error ', err);
                    var errorMessage = navigator.onLine ? err.error.error_description : 'Please check your internet connection or try again later';

                    if (errorMessage === undefined) {
                        errorMessage = 'Service not available, please contact with Administrator';
                    }
                    this.errorMgs.next(errorMessage);
                }
            );

    }

    loadingStatus(): Observable<boolean> {
        return this.isLoading.asObservable();
    }

    messStatus(): Observable<string> {
        return this.errorMgs.asObservable();
    }

    // saveToken(token) {
    //   //  console.log('===========:', token);
    //     // var expireDate = new Date().getTime() + (1000 * token.expires_in);
    //     const expireDate = token.expires_in;
    //     // this.cookieService.set("access_token", token.access_token, expireDate);
    //     this.cookie.setWithExpiryInSeconds('access_token', token.access_token, expireDate);
    //     // console.log('Obtained Access token');
    //     this.setUserInformation();
    //     //        this.router.navigate(['/']);
    // }

    saveToken(token) {
        console.log('===========:', token);
        //var expireDate = new Date().getTime() + (1000 * token.expires_in);
        var expireDate = token.expires_in;
        //this.cookieService.set("access_token", token.access_token, expireDate);
        this.cookie.setWithExpiryInSeconds("access_token", token.access_token, expireDate);
        //console.log('Obtained Access token');
        this.setUserInformation();
        //        this.router.navigate(['/']);
    }

    // setUserInformation(): void {
    //     this.httpClient.get<any>(`${this.USER_DETAILS}`, <any>{}).subscribe(
    //         res => {
    //             this.userDetils = res;
    //             // console.log(this.userDetils);
    //             // const _userInfo = this.userDetils.obj;
    //             // const companyList = _userInfo.companyList;
    //             // Object.keys(companyList).forEach((key, value, array) => {
    //             //     if (companyList[key].companyId == _userInfo.defaultCompanyId) {
    //             //         _userInfo.companyAddress1 = companyList[key].compnayAddress1;
    //             //         _userInfo.companyAddress2 = companyList[key].compnayAddress2;
    //             //     }
    //             // });
    //             if (this.userDetils.obj != null) {
    //                 localStorage.setItem('userInfo', JSON.stringify(this.userDetils.obj));
    //                 if (this.userDetils.obj.userDefaultPageLink) {
    //                     this.router.navigate([this.userDetils.obj.userDefaultPageLink]);
    //                 } else {
    //                     this.router.navigate(['/']);
    //                 }
    //             } else {
    //                 localStorage.setItem('userInfo', JSON.stringify(null));
    //                 this.router.navigate(['/']);
    //             }
    //         },
    //         err => {
    //             localStorage.setItem('userInfo', JSON.stringify(null));
    //             this.router.navigate(['/']);
    //             // console.log("Error : ", err)
    //         });
    // }

    setUserInformation(): void {
        this.httpClient.get<any>(`${this.USER_DETAILS}`, <any>{}).subscribe(
            res => {
                this.userDetils = res;
                console.log(this.userDetils);
                const _userInfo = this.userDetils.obj;
                const companyList = _userInfo.companyList;
                if (companyList) {
                    Object.keys(companyList).forEach((key, value, array) => {
                        if (companyList[key].companyId == _userInfo.defaultCompanyId) {
                            _userInfo.companyAddress1 = companyList[key].compnayAddress1
                            _userInfo.companyAddress2 = companyList[key].compnayAddress2
                        }
                    });
                }
                if (this.userDetils.obj != null) {

                   
                   
                    localStorage.setItem('userInfo', JSON.stringify(this.userDetils.obj));
                  
                    if (this.userDetils.obj.userDefaultPageLink) {
                        this.router.navigate([this.userDetils.obj.userDefaultPageLink]);
                    } else {
                        this.router.navigate(['/']);
                    }
                } else {
                    localStorage.setItem('userInfo', JSON.stringify(null));
                    this.router.navigate(['/']);
                }
            },
            err => {
                localStorage.setItem('userInfo', JSON.stringify(null));
                this.router.navigate(['/']);
                console.log('Error : ', err)
            })
    }

    getResource(resourceUrl): Observable<any> {

        const headers = {
            'Authorization': 'Bearer ' + this.cookieService.get('access_token'),
            'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'
        }

        return this.httpClient.get<any>(resourceUrl, { headers }).pipe(
            map((res: Response) => res),
            catchError((error: any) => {
                return throwError(error);
            })
        );
    }

    getAccessToken(): any {
        return this.cookie.get('access_token');
    }

    refreshAccessToken(): Observable<any> {
        // console.log("Need Check.");
        const currentToken = this.obtainNewAccessToken();

        return of(this.obtainNewAccessToken()).pipe();
    }

    checkCredentials() {
        if (!this.cookie.get('access_token')) {
            this.loggedIn.next(false);
        } else {
            this.loggedIn.next(true);
        }
    }

    obtainNewAccessToken(): Observable<any> {
        return new Observable;
    }

    // checkCredentials() {
    //     console.log("Check Credentials",this.cookieService.check('access_token'))
    //     if (!this.cookieService.check('access_token')) {
    //         this.loggedIn.next(false);
    //     } else {
    //         console.log("Check Credentials", this.cookieService.get('access_token'));
    //         this.loggedIn.next(true);
    //     }
    // }

    deleteToken(): Observable<any> {
        const headers = {
            'Authorization': 'Bearer ' + this.cookieService.get('access_token'),
            'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'
        };

        const deleteAPIURL = `${this.BASE_URL}${this.API_URL}${this.END_POINT}/logout`;

        return this.httpClient.delete<any>(deleteAPIURL, { headers }).pipe(
            map((res: Response) => res),
            catchError((error: any) => {
                return throwError(error);
            })
        );
    }

    logout() {
        this.deleteToken().subscribe(
            res => {
                console.log('Delete token response ', res);
                if (res.success) {

                    this.cookie.delete('access_token');
                    localStorage.clear();
                    //localStorage.removeItem('userInfo');
                    this.router.navigate(['/login']);

                    // console.log("Revoke Occurred In Delete token ", res);

                } else {

                    this.cookie.delete('access_token');
                    localStorage.clear();
                    // localStorage.removeItem('userInfo');
                    this.router.navigate(['/login']);

                    // console.log("Error Occurred In Delete token ", res);
                }
            },
            err => {
                console.log('Error Occurred In Delete token ', err);
                this.cookie.delete('access_token');
                localStorage.clear();
                // localStorage.removeItem('userInfo');
                this.router.navigate(['/login']);

            }
        );
    }
}

Service2
========

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class CustomizeCookieService {

  constructor() { }
  set(key: string, value: string): void;
  set(key: string, value: string, expires: Date): void;
  set(key: string, value: string, expires?: Date): void {
    let cookieValue = `${key}=${value}`;
    if (expires) cookieValue += `;expires='${expires.toUTCString()}'`
    document.cookie = cookieValue;
  }

  setWithExpiryInYears(key: string, value: string, expires: number) {
    this.setWithExpiryInDays(key, value, expires * 365);
  }

  setWithExpiryInDays(key: string, value: string, expires: number) {
    this.setWithExpiryInHours(key, value, expires * 24);
  }

  setWithExpiryInHours(key: string, value: string, expires: number) {
    this.setWithExpiryInMinutes(key, value, expires * 60);
  }

  setWithExpiryInMinutes(key: string, value: string, expires: number) {
    this.setWithExpiryInSeconds(key, value, expires * 60);
  }

  setWithExpiryInSeconds(key: string, value: string, expires: number) {
    this.setWithExpiryInMiliseconds(key, value, expires * 1000);
  }

  setWithExpiryInMiliseconds(key: string, value: string, expires: number) {
    var expireDate = new Date();
    var time = expireDate.getTime() + expires;
    expireDate.setTime(time);
    
    this.set(key, value, expireDate);
  }

  get(key: string): string {
    const decodedCookie: string = decodeURIComponent(document.cookie);
    const pairs: string[] = decodedCookie.split(/;\s*/);

    const prefix = `${key}=`;
    for (const pair of pairs) {
      if (pair.indexOf(prefix) == 0) {
        return pair.substring(prefix.length);
      }
    }
    return "";
  }
  delete(key:string) {
    if( this.get( key ) ) {
      document.cookie = key + "=" +
        ";expires=Thu, 01 Jan 1970 00:00:01 GMT";
    }
  }
}  


Service3
========
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';
import { Observable, BehaviorSubject, throwError } from 'rxjs';
import { catchError, switchMap, filter, take } from 'rxjs/operators';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class TokenInterceptorService implements HttpInterceptor {

  private refreshTokenInProgress = false;
  // Refresh Token Subject tracks the current token, or is null if no token is currently
  // available (e.g. refresh pending).
  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);
  constructor(public authService: AuthService) { }

  intercept(request: HttpRequest<any>,next: HttpHandler): Observable<HttpEvent<any>> {

    return next.handle(this.addAuthenticationToken(request)).pipe(
      catchError((error: HttpErrorResponse) => {
        // We don't want to refresh token for some requests like login or refresh token itself
        // So we verify url and we throw an error if it's the case
        console.log("Login request error", error.status);
        if (
          request.url.includes("refreshtoken") ||
          request.url.includes("oauth/token")
        ) {
          // We do another check to see if refresh token failed
          // In this case we want to logout user and to redirect it to login page

          if (request.url.includes("refreshtoken")) {
            this.authService.logout();
          }

          // return Observable.throw(error);
          return throwError(error);
        }

        // If error status is different than 401 we want to skip refresh token
        // So we check that and throw the error if it's the case
        if (error.status !== 401) {
          // return Observable.throw(error);
          return throwError(error);
        }

        if (this.refreshTokenInProgress) {
          // If refreshTokenInProgress is true, we will wait until refreshTokenSubject has a non-null value
          // – which means the new token is ready and we can retry the request again
          return this.refreshTokenSubject.pipe(
            filter(result => result !== null),
            take(1),
            switchMap(() => next.handle(this.addAuthenticationToken(request)))
          );
        } else {
          this.refreshTokenInProgress = true;

          // Set the refreshTokenSubject to null so that subsequent API calls will wait until the new token has been retrieved
          this.refreshTokenSubject.next(null);

          // Call auth.refreshAccessToken(this is an Observable that will be returned)
          return this.authService
            .refreshAccessToken().pipe(
              switchMap((token: any) => {
                //When the call to refreshToken completes we reset the refreshTokenInProgress to false
                // for the next time the token needs to be refreshed
                this.refreshTokenInProgress = false;
                this.refreshTokenSubject.next(token);

                return next.handle(this.addAuthenticationToken(request));
              }),
              catchError((err: any) => {
                this.refreshTokenInProgress = false;

                this.authService.logout();
                return Observable.throw(error);
              })
            )
        }
      })
    );
  }

  addAuthenticationToken(request) {
    // Get access token from Local Storage
    const accessToken = this.authService.getAccessToken();

    // If access token is null this means that user is not logged in
    // And we return the original request
    if (!accessToken) {
      return request;
    }

  
    

 
    // We clone the request, because the original request is immutable
    return request.clone({
      setHeaders: {
        Authorization: `Bearer ${this.authService.getAccessToken()}`
      }
    });
  }
}
---------------------------------------------------------------------

Microservice
==================================

=>npm i single-spa-angular

Step: 1 clone the educare-ui from the internDev branch.
            => git clone -b internDev --single-branch [clone link]

Step: 2 install npm in the -> container, student and library folder under educare-ui
      using the [npm i] command. 

Step: 3 //comment// buid libraies in the library folder. 
                    => ng build auth-library 
                    => ng build core-library

                    => npm link dist/auth-library
                    => npm link dist/core-library
 
Step 4: //comment// Linking library under respective folders.
                    =>npm link auth-library
                    =>npm link core-library

Step 5: By default we have to run the container: 
                    => npm start
   
        Then the working service (e.g. student)
                   => npm start
//===============================================
