#################################################
#         MICROSERVICE-TECHSTACK                #
#################################################


=================================================
#                  Basic                                          
================================================= 






=================================================
#Spring-caching                                   
================================================= 
 In Spring, caching can be easily implemented using in-memory caching providers:
Generic
JCache (JSR-107) (EhCache 3, Hazelcast, Infinispan, and others)
EhCache 2.x
Hazelcast
Infinispan
Couchbase
Redis
Caffeine
Simple or the default ConcurrentMapCacheManager.






=================================================
#redis | Redis                                     
================================================= 

=>docker run -p 8888:6379 --name my-redis1 -d redis
=>sudo apt install redis-tools
=>redis-cli --version
Run a Redis Server using docker and install resis-toos for redis-cli in ubuntu

=>sudo systemctl status redis
=>sudo vi /etc/redis/redis.conf
Edit Config file
=>sudo systemctl restart redis-server


=>redis-cli ping
=>redis-cli
=>redis-cli -p 8888



=>set mykey myvalue
=>get mykey

=>keys *
=>dbsize
Show list of key

=>del keyName
Delete single key

=>flushall
Remove all data





#Redis Sentinel 
=================================================
=>redis-cli
=>redis-cli -p 8888

=>redis-cli -h my_host -p my_port -a my_password
=>redis-cli -h 172.16.7.161 -p 26379 -a pass


=>sentinel masters  
=>sentinel get-master-addr-by-name mymaster
Info about all master

=>SENTINEL REPLICAS mymaster
Show connected replicas



=>info replication
Show Master and Slave info


sentinel master mymaster
sentinel slaves mymaster






Doc
-------------------------
https://docs.spring.io/spring-data/redis/reference/redis/connection-modes.html
https://medium.com/@htyesilyurt/spring-boot-3-redis-sentinel-lettuce-client-and-docker-compose-for-high-availability-1f1e3c372a5a
https://www.youtube.com/watch?v=Pj8Q_9dovgY&list=PLq3uEqRnr_2HY6LMQsbvsK4btj51sWhBS&index=2


Spring Boot, both Lettuce and Jedis are popular choices for interacting with Redis, which is an open-source, in-memory data structure store. 

Lettuce:
  Asynchronous Support
  Thread Safety
  Connection Pooling
  Cluster Support

Jedis:
  Synchronous and Asynchronous Support:
  Connection Pooling:
  Maturity:

Choosing Between Lettuce and Jedis:
Performance:
Lettuce is often considered more performant than Jedis, especially in scenarios where high concurrency and asynchronous behavior are important.

Reactive Programming:
If your application is built using reactive programming paradigms (e.g., Spring WebFlux), Lettuce may be a more natural fit.
Ease of Use:

Jedis has a simpler API, and if you are looking for a straightforward and easy-to-use client, Jedis might be a good choice.






Caching Topology:
-Standalone         
 Application inMemory cashing

-Distributed
 Central case system

-Replication
 Chahe replicas every node

UdamyCourse:
https://gale.udemy.com/course/redis-latest/learn/lecture/21936116#overview


Example:
Assuming you have a Redis configuration as follows:

Master (Writer): 192.168.1.1:8080
Replicas (Readers):
192.168.3.1:8082
192.168.2.1:8082
Here's a configuration for a Spring Cloud microservice with 10 application instances:

java
Copy code
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;

@Configuration
public class RedisConfig {
    
    @Bean
    public LettuceClientConfiguration lettuceClientConfiguration() {
        return LettuceClientConfiguration.builder()
            .readFrom(ReadFrom.REPLICA_PREFERRED)
            .build();
    }
    
    @Bean
    public LettuceConnectionFactory lettuceConnectionFactory(LettuceClientConfiguration clientConfig) {
        RedisStandaloneConfiguration serverConfig = new RedisStandaloneConfiguration("192.168.1.1", 8080);
        RedisStaticMasterReplicaConfiguration staticMasterReplicaConfig = new RedisStaticMasterReplicaConfiguration(
            serverConfig,
            Arrays.asList(
                new RedisNode("192.168.3.1", 8082),
                new RedisNode("192.168.2.1", 8082)
            )
        );
        
        return new LettuceConnectionFactory(staticMasterReplicaConfig, clientConfig);
    }
}




=================================================
#kafka | Message broker  | KAFKA                                        
================================================= 

=>cd /opt/apache-kafka/kafka3_6/bin



SetUp Kafka SingleCluster
-------------------------------------------------
Start up the Zookeeper.
=>./zookeeper-server-start.sh ../config/zookeeper.properties

Add the below properties in the server.properties
  listeners=PLAINTEXT://localhost:9092
  auto.create.topics.enable=false


Start up the Kafka Broker
=>./kafka-server-start.sh ../config/server.properties


Create a topic
=>./kafka-topics.sh --create --topic test-topic --bootstrap-server localhost:9092 --partitions 4 --replication-factor 1
=>./kafka-topics.sh --list  --bootstrap-server localhost:9092


=>./kafka-topics.sh --bootstrap-server localhost:9092 --describe
=>./kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic test-topic



Create Console Producer
=>./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic
=>./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic --property "key.separator=-" --property "parse.key=true"

Create Console Consumer
=>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning
=>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property "key.separator= - " --property "print.key=true"




Consumer Groups:
=>./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list









Zookeeper:
 Manage the kafka broker, broker registred with zookeeper.

Topic/Partation/Offset:
  Kafka tpoic as database table.
  Each topic will create with one or more partiation.

  Partitation is where message linve inside the topic.
  Each partition is independent of each other.

  Each Partition is an Order, inmmutable sequence of record.
  Each record is assigned a sequential number called offset.
  Order is guaranteed only at the partition leve.
All the records are persisted in acommit log in the files system where is kafka intalled.


Message of Kafka retain inside in cluster after consumed, depending on retation prood.
Kafka Message are byte insede kafka broker, then producer/consumer serisized this.


For locket a specific message, required 3 thing:
- Topic Name
- Partition number
- Offset Number 


Consumer have three option to reload
- from-biginning
- latest
- specific offset





SpringKafka:
https://gale.udemy.com/course/apache-kafka-for-developers-using-springboot/learn/lecture/37906902#overview


=================================================
#    Message broker  | RabbitMQ                                        
================================================= 


=>rabbitmq-server start
Start rabbitMQ Server, Open RabbitMQ command prompt

=>localhost:15672
guest/guest
              
FanoutExchange:
http://localhost:8083/rabbitmq/fanout/producer?exchangeName=fanout-exchange&messageData=HelloWorldMsg
http://localhost:8084/rabbitmq/producer?empName=emp1&empId=emp001&salary=500000

DirectExchange:
http://localhost:8083/rabbitmq/direct/producer?exchangeName=direct-exchange&routingKey=finance&messageData=HelloWorldMSG





=================================================
#     ELK Stack                                      
=================================================

=>elasticsearch.bat
=>kibana.bat


=>GET /_nodes

List of Index
=>GET /_cat/indices?v
  
Creae a index
=>PUT employee_indx
  
Add data to Index
=>POST employee_indx/_doc/1
  {
     "name":"MD IMRAN HOSSAIN", "gender":"Male",
     "age":"30", "city":"Dhaka"
  }

PUT /student_indx
{
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "properties": {
      "name": { "type": "text" },
      "age": { "type": "integer" },
      "gender": { "type": "text" }
    }
  }
}

 
Show Index date
  =>GET employee_indx/_doc/1
  =>POST /employee_indx/_search
  =>POST /employee_indx/_search?filter_path=hits.hits
  

Update
=>POST /employee_indx/_doc/1/_update
{
  "doc": {
  "name": "MD IMRAN HOSSAIN UPDATE"
  }
}
  
DeleteDate
  =>DELETE  employee_indx/_doc/11




=>PUT school_indx

=>POST school_indx/student/1
  {
     "name":"MD IMRAN HOSSAIN", 
     "gender":"Male",
     "age":"30"
  }
  



=================================================
#JWT | jwt                                   
================================================= 
https://www.youtube.com/watch?v=BQwKZ6zfyk0&list=PLJq-63ZRPdBt-RFGwsJO9Pv6A8ZwYHua9

VerifyJWT:
https://dinochiesa.github.io/jwt/

Two type of encryption in jwt:
- (Symetric) Same key use for encryption and decription
-(Asymmetric) Differ key, private/public key


generate a valid key pair using OpenSSL:
=>openssl genpkey -algorithm RSA -out private_key.pem
=>openssl rsa -pubout -in private_key.pem -out public_key.pem

ExamplePython:
-------------------------------------------------
import jwt

# Generate a JWT token using an asymmetric private key
private_key = """
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA1AmT5s8T1yPRX9YeCFBqA8T6r3XrI9ilfz3EiKXsReR7H1Vi
... (your private key) ...
-----END RSA PRIVATE KEY-----
"""

payload = {
    "user_id": 123,
    "username": "example_user",
    "role": "admin",
}

# Sign the JWT token with the private key
token = jwt.encode(payload, private_key, algorithm="RS256")

print("JWT Token:")
print(token)

# Now, let's assume you have the public key for verification
public_key = """
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1AmT5s8T1yPRX9YeCFBqA
... (your public key) ...
-----END PUBLIC KEY-----
"""

try:
    # Verify the JWT token using the public key
    decoded_payload = jwt.decode(token, public_key, algorithms=["RS256"])
    print("\nDecoded Payload:")
    print(decoded_payload)
except jwt.ExpiredSignatureError:
    print("\nJWT has expired.")
except jwt.InvalidTokenError:
    print("\nJWT is invalid or tampered with.")






=================================================
#  keycloak                                          
================================================= 

https://www.tutorialsbuddy.com/keycloak-mysql-setup
https://www.appsdeveloperblog.com/keycloak-configure-mysql-database/
https://sunitkatkar.blogspot.com/2020/07/setting-up-keycloak-10-with-mysql-8-on.html


#Mysql server with keycloak
-------------------------------------------------

=>CREATE DATABASE keycloakdb CHARACTER SET utf8 COLLATE utf8_unicode_ci;
Create a database in MySQL with the utf8 character set


=>CREATE USER 'keycloakadmin'@'%' IDENTIFIED WITH mysql_native_password BY 'keycloak123';
Create a database user for Keycloak

=>GRANT ALL PRIVILEGES ON keycloakdb.* TO 'keycloakadmin'@'%';
--- Tell the server to reload the grant tables
--- by performing a flush privileges operation
=>FLUSH PRIVILEGES;

Grant all privileges


=>SHOW GLOBAL variables like "default_storage%"
Should output: default_storage_engine InnoDB

=>SET GLOBAL default_storage_engine = 'InnoDB';
If storage engine is not InnoDB, use this to set it



=================================================
#  SPRING SOAP SERVICE                                          
================================================= 

http://localhost:8080/user-soap-service/user.wsdl
http://localhost:8080/imranmadbar/ws/calculatorDemo.wsdl



Simple Soap Request:
--------------------------------------

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:cal="http://imranmadbar.com/types/calculator">
	<soapenv:Header/>
	<soapenv:Body>
		<cal:SubtractionInput>
			<cal:number1>10</cal:number1>
			<cal:number2>4</cal:number2>
		</cal:SubtractionInput>
	</soapenv:Body>
</soapenv:Envelope>

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:inh="http://com.imranmadbr/">
   <soapenv:Header/>
   <soapenv:Body>
      <inh:opManager>
         <!--Optional:-->
         <version>2.0</version>
         <service>xxx</service>
         <method>xxx</method>
         <param>xxxxxx</param>
         <numberofparam>1</numberofparam>
         <userid>xxxxxxx</userid>
         <password>xxxxx</password>
         <failclause>xxxx</failclause>
      </inh:opManager>
   </soapenv:Body>
</soapenv:Envelope>



<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                  xmlns:us="http://imranmadbar.com/spring-boot-soap-service">
    <soapenv:Header/>
    <soapenv:Body>
        <us:getUserRequest>
            <us:name>imran</us:name>
        </us:getUserRequest>
    </soapenv:Body>
</soapenv:Envelope>
		
Simple Soap Response:
-------------------------------------

<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
  <SOAP-ENV:Header/>
  <SOAP-ENV:Body>
	  <ns2:output xmlns:ns2="http://imranmadbar.com/types/calculator">
		  <ns2:result>6</ns2:result>
	  </ns2:output>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>