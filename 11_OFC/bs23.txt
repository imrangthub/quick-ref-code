#################################################
#                 BS23                         #
#################################################
BS0930
Md.Imran Hossain
Senior Software Engineer
md.imran@brainstation-23.com
Trello:imranbs23trl
GitBl:imranbs23gtlab
GitUcbl:imranbsgtlab
2583
vpn.brainstation23.com
172.16.231.253
Multiplication Factor - 1
Level - IC3
Skype:mdimran.bs23@gmail.com
https://bs23.talentlms.com


https://gale.udemy.com/organization/search/?src=ukw&q=kubernatis


Integration readiness for south-bound node and Business service, incorporate into v2 production.

Our leadership values are - OWN PATH
Ownership
Passion & Commitment
Agility & Excellence
Team Spirit
Honesty
=================================================
#SBU TELCO MEETING |  2:30PM-4:00PM       
================================================= 

	


##SBU TELCO 
-------------------------------------------------

Technical discussion: 8
Feature delivery: 90%
Code Review Hour: 6
UAT & QA feedback: 8
Operational and DevOps Activity: 8



----------------------------------------------
1)Technical discussion              5hr    ->8
2)Feature Delivery                  80%    ->80%
3)Code Review                       4hr    ->4
4)UAT & QA feedback  and DevOps     16hr   ->32     For Feature delivery+Internal VM paching


Next Rock:
----------------------------------------------
SBU: 
	System monitoring and Security analysis
How to keep monitoring for a cretical system with zero downtime and its Resiliency and high availability in microservices.
For that: Monitoring tools, report for analysis, alerting system, rederended backup server etc.
How ensure system security.

Individual:
	CKAD Exam preparation & certifications - Phase2	

	Microservice on cloud POC(A proof of concept)
The introduction of cloud with microservice, incluse:
Create environment on cloud for legacy system,Installation process for the project, and monetoring.







oLD Rock:
----------------------------------------------
SBURock:
	QuickStart Guide for Production-ready Spring Cloud Microservice

	QuickStart Guide for Production-ready Microservice with Spring Cloud

Medium to Enterprise disribution solution or any Microservice Architecture  commonly use Tech java-Spring-cloud   
For Starting a brand new Project then: How to desing the Architecture with Spring-cloud and How it work
For finding this question answer need to read a lot of documentation and RND what is take loatof time and effor.

In this case:
	Who going to start design and Build a Microservice:
	or
	New resource on boding to a projecct
	
If the Person Go throw on this Guid, 
	he/she will clear about how Spring-Cloud work
	Got an Idea how to design and implement Production Grade microservice Architecture.

This how this QuickStart Guide saveing a lot of time and cost for many of our BS developer.



IndividualRock:
	CKAD Exam preparation & certifications - Phase1


Individual Rock
	AWS exam certifications	(SSAA-C03).							
	Beta release of APIHUBv2. (Upgrade Framework, Build tools, and Runtime Envirionment-JRE for around 40 microservices services).
	

Pint:
	Banglalink take a inative to Upgrade APIHUB environment for APIHUBv2, this version upgration include Security Policy, implement Contanirzation and Cloud.
	This change effect on entier APIHUB echosystem what is constract with:
																			15 Business services
																			10 Intragition services
																			5  (DMZ) Monitoring services
											The services brodly 3 group, (MyBL, external client(Nogot, smsc-otp, iris etc) ), BTCL(Goverment)) around 40 services on 16  VM	 Cluster.
											
At First step of migration to APIHUBv2 I have to Update latest version Framework, change the build tools, and runtime environment.


Some time BL have to do TOP Urgent CR, for regulatory compliance order by adminstor/BTCL and must have to delivery a binded time priod.		
									
With On Going Support, CR and Mantanance- 
	I have to implement their requirment on Current System and align for their on going System upgration.       																			
	
Tentative time for first  release on 15 March.
AWS certificatio will help full for upcoming cloud requirment.

















555
=================================================

AWS:
https://www.credly.com/badges/adaad383-d8be-4889-a860-3694e7d2184d/linked_in_profile

apihunv2 beta-releqase
https://brainstationo365-my.sharepoint.com/personal/md_imran_brainstation-23_com/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fmd%5Fimran%5Fbrainstation%2D23%5Fcom%2FDocuments%2FMicrosoft%20Teams%20Chat%20Files%2Fbl%2Daward%2Ejpg&parent=%2Fpersonal%2Fmd%5Fimran%5Fbrainstation%2D23%5Fcom%2FDocuments%2FMicrosoft%20Teams%20Chat%20Files&ga=1





CORE VALUES: Focusing to delivery client requirment not only perfectly also smoth delivery 
             to make our company resource better front of client, Wish to value added for growing our company business.
Try to be best fit on my role and responsalibility also valuable contibutor.


ROLES AND RESPONSIBILITIES

1) Won the complate APIHUB echo system Application Layer.
2) Taken Onershop of the PROJECT like, Architecture mantanancy, system security, New Feture Incorporate with ongoing 
	CR and Manage resource for this and delivery the CR 
3) Keep communicate with BL-Manager build relationship stackholder and our Team Member 
4) Standby for 24h on-demand support


#Chalangeing Part: 
	Heir authority Instant requirment like BTCL, Banglalink Business Administrator or CTO 
	24h have to ready for Support Internal System problem like:Server Reboot, VM paching etc.





=================================================
#APIHUB | Banglalink                                 
================================================= 

Team memember:
Saiful Islam
Md. Jamil Ahsan
Md. Zahid Ahmed
Mohammad Moniruzzaman
Morshed Alam



Server Deployment
=================================================

172.16.254.193 = SLB | NGINX

=>ps -fC java
=>ps -ef | grep otp
=>netstat -tulpn
=>kill -9 34071
=>tail -f nohup.out

--server.port=8888
--spring.profiles.active=dev-bl
--spring.cloud.config.uri=192.168.1.2:9091 
--CONFIG_SERVER=configserver:http://172.16.8.132:7085
--spring.cloud.config.uri=http://localhost:7185
--eureka.client.serviceUrl.defaultZone=http://192.168.1.2:7082/eureka/

--CONFIG_SERVER=configserver:http://172.16.11.34:7085



=>tail -f /app/apihub/Nginx_LB/logs/access.log | egrep -i '172.16.254.209'
=>tail -f /app/apihub/Nginx_LB/logs/access.log | egrep -i '172.16.8.181'
=>tail -f /app/apihub/Nginx_LB/logs/access.log | egrep -i '172.16.11.132'
=>tail -f /app/apihub/Nginx_LB/logs/access.log | egrep -i '172.16.11.35'


=================================================
#Nginx | nginx
=================================================
=>nginx -t
Check configuration is ok


=>tail -1000 /app/apihub/Nginx_LB/logs/access.log | egrep -i '172.16.254.194' | awk '{print $8}' | sort | uniq --repeated --count
Check the request status of specific server




=================================================
#  keycloak Server run
=================================================
=>./standalone.sh
Test from the keycloak app bin folder
=> nohup ./standalone.sh -b=0.0.0.0 &



Config:
------------------------------------------------
Step 1: Create a database in MySQL
  =>CREATE DATABASE keycloakdb CHARACTER SET utf8 COLLATE utf8_unicode_ci;

Step 2: Create a database user for Keycloak
  =>CREATE USER 'keycloakadmin'@'%' IDENTIFIED WITH mysql_native_password BY 'keycloak123';
  
Step 3: Grant all privileges
  GRANT ALL PRIVILEGES ON keycloakdb.* TO 'keycloakadmin'@'%';
  FLUSH PRIVILEGES; 
  
  

IDP URL: 
http://172.16.8.132:8080/auth/realms/banglalink/.well-known/openid-configuration

=================================================
Gradle Setting
=================================================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
#distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=http\://172.16.254.122\:8081/repository/maven-public/gradle/gradle-wrapper/7.4.1/gradle-wrapper-7.4.1-bin.zip



=================================================
#    Nexus Repository                                        
================================================= 
http://172.16.254.122:8081/#browse/welcome

=>./nexus start
=>./nexus stop
=>./nexus status

\$ cd /etc/init.d
$ chkconfig --add nexus
$ chkconfig --levels 345 nexus on
$ service nexus start
Starting Nexus Repository Manager Pro...
$ tail -f /usr/local/nexus/logs/wrapper.log




apihub Debuging Server issue
===========================


=>http://172.16.254.193:7171/octopus-iris/actuator/info
=>http://172.16.254.193:7171/octopus-iris/swagger-ui.html
Nginx Loadbalancer


DebugScript1:
-----------------------------------

=>tail -f access.log | grep -v '200'  | grep -v '202'
Filtering status code except 200 and 202 

=>cat access.log | awk '{print $(NF-2)}'
Printing only destination IP: 

=> cat access.log | awk '{print $(NF-2)}' | sort | uniq --count
Print destination IP count: 


=>cat access.log | grep –v '200'  | grep –v '202' | awk '{print $(NF-2)}' | sort | uniq --count
You can mix between these commands to achieve your goal. For example, you want to see which destination server is failing:


=>tail -f access.log | grep '254.194' | grep -v '200'  | grep -v '202'


DebugScript2:
-----------------------------------

=>tail -100000 ../logs/access.log | awk '{ print $8}'|sort |uniq --repeated --count
Print load balanced IPs and their count

=>tail -10000 access.log |awk '{print $12,$8}'|sort|uniq --repeated --count
Print load balanced IPs and their status count


=>tail -10000 /app/apihub/Nginx_LB/logs/access.log | grep prepaid|awk '{ total += $14; count++ } END { print total/count }'
Average RTT

=>for (( i = 5; i >=0; i-- )) ; do grep $(date +%d/%b/%Y:%R -d "-$i min") /app/apihub/Nginx_LB/logs/access.log; done| awk '{ print $8}'|sort |uniq --repeated --count
Last 5 minute request satus


=>grep prepaid access.log|tail -1000|awk '{ if ( $14 > .750 ) print $0 }'|wc -l
If RTT greater than:


=>for i in {1..20}; do curl -o /dev/null -s -w '%{http_code},%{time_namelookup},%{time_connect},%{time_pretransfer},%{time_starttransfer}, %{time_total}s\n' "http://10.74.10.10:443/api/v1/subscriptions/32286622/combined-usage-reports"  ; done
20 continuous calls to check DBSS API performance 

=>tail -1000 ../logs/access.log | grep prepaid|awk '{ if (max<$14){ max=$14 }}END {print max}'
Max RTT



By ImV:
=================================================
Avg. RTT: 
	tail -10000 /app/apihub/Nginx_LB/logs/access.log | grep prepaid|awk '{ total += $14; count++ } END { print total/count }'


Max RTT:  
	tail -100000 ../logs/access.log | grep prepaid|awk '{ if (max<$14){ max=$14 }}END {print max}'


Min. wise Transactions:
	for i in `grep "26/Jul/2022:11:4[0-9]" /app/apihub/Nginx_LB/logs/access.log |grep available-product|cut -d "[" -f 2|cut -d ":" -f 1,2,3|awk '{print $1}'|sort|uniq`; do a=`grep $i /app/apihub/Nginx_LB/logs/access.log |grep available-product|cut -d "[" -f 2|awk '{print $1}'|wc -l`; echo $i,$a; done

TPS at certain Hours:
	for i in `grep "26/Jul/2022:11:4[0-9]" /app/apihub/Nginx_LB/logs/access.log |grep available-product|cut -d "[" -f 2|awk '{print $1}'|sort|uniq`; do a=`grep $i /app/apihub/Nginx_LB/logs/access.log |grep available-product|cut -d "[" -f 2|awk '{print $1}'|wc -l`; echo $i,$a; done


No. of High RTT Request Counts:
	  cat ../logs/access.log | grep prepaid|awk '{ if ( $14 > .750 ) print $0 }'|wc -l

	  grep prepaid access.log|awk '{ if ( $14 > .750 ) print $0 }'|wc -l


Overall RTT: 
	tail -100000 /app/apihub/Nginx_LB/logs/access.log|awk '{ total += $14; count++ } END { print total/count }'


Error Rate:
	tail -100000 ../logs/access.log | awk '{ print $8}'|sort |uniq --repeated --count



Actual Error Count:  
	tail -10000 ../logs/access.log |awk '{if ( $8 == 500 ) print $0}' |wc -l



Last % mins Log status:

	for (( i = 5; i >=0; i-- )) ; do grep $(date +%d/%b/%Y:%R -d "-$i  min")  /app/apihub/Nginx_LB/logs/access.log; done|wc -l 

	for (( i = 5; i >=0; i-- )) ; do grep $(date +%d/%b/%Y:%R -d "-$i  min")  /app/apihub/Nginx_LB/logs/access.log; done| awk '{ print $8}'|sort |uniq --repeated --count


Minwise Max TPS:
	for i in `grep available-product access.log.280722|awk '{ print $3}'|cut -d ":" -f 1,2,3|cut -d "[" -f 2|sort|uniq`; do a=`grep $i access.log.280722 |grep available-product|cut -d "[" -f 2|awk '{print $1}'| sort|uniq --repeated --count|awk '{ if (max<$1){ max=$1 }}END {print max}'`; echo $i,$a; done


10 min wise Max TPS:

	 for y in `grep available-product access.log | awk '{ print $3}' | cut -d ":" -f 1,2,3 | cut -d "[" -f 2 | cut --complement -c 17 | sort | uniq`; 
                do 
                        a=`grep $y $i |grep available-product|cut -d "[" -f 2|awk '{print $1}'| sort|uniq --repeated --count|awk '{ if (max<$1){ max=$1 }}END {print max}'`; 
                       
			echo $y,$a  ;
                        
                done

Minwise RTT @ Specific Hours:
	for i in `grep product-offer access.log.030922|grep "03/Sep/2022:1[8-9]"| awk '{ print $3}'|cut -d ":" -f 1,2,3|cut -d "[" -f 2|sort|uniq`; do a=`grep $i access.log.030922 |grep product-offer|cut -d "[" -f 2|awk '{print $1}'| sort|uniq --repeated --count|awk '{ total += $14; count++ } END { print total/count }'`; echo $i,$a; done

To Get Max TPS @Specific Second:
	 grep "2022:17" /app/apihub/Nginx_LB/logs/logarchive/access.log.141122| awk '{print $3}'|cut -d "[" -f 2|awk '{print $1}'|sort|uniq --repeated --count|awk '{ if (max<$1){ max=$1; tm=$2 }}END {print max,tm}'








SMS
=================================================

curl -X GET "http://172.16.8.132:6616/cgi-bin/sendsms?username=apiHub&password=ApIhub&from=Banglalink&to=8801916894486&text=TextMsg&charset=utf-8&coding=2"


curl -X GET "http://10.10.31.113:13146/cgi-bin/sendsms?username=apiHub&password=ApIhub&from=Banglalink&to=008801962424676&text=%E0%A0%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%20342816%20%E0%A5%A4%20%E0%A6%86%E0%A6%AA%E0%A6%A8%E0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%E0%A6%B0%20%E0%A6%AE%E0%A7%87%E0%A7%9F%E0%A6%BE%E0%A6%A6%205%20%E0%A6%AE%E0%A6%BF%E0%A6%A8%E0%A6%BF%E0%A6%9F%E0%A7%87%E0%A6%B0%20%E0%A6%AE%E0%A6%A7%E0%A7%8D%E0%A6%AF%E0%A7%87%20%E0%A6%B6%E0%A7%87%E0%A6%B7%20%E0%A6%B9%E0%A6%AC%E0%A7%87%E0%A5%A4%209ua99nBlS%2BG&charset=utf-8&coding=2"



curl -X GET "http://172.16.10.224:13146/cgi-bin/sendsms?username=apiHub&password=ApIhub&from=Banglalink&to=008801962424676&text=%E0%A0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%20342816%20%E0%A5%A4%20%E0%A6%86%E0%A6%AA%E0%A6%A8%E0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%E0%A6%B0%20%E0%A6%AE%E0%A7%87%E0%A7%9F%E0%A6%BE%E0%A6%A6%205%20%E0%A6%AE%E0%A6%BF%E0%A6%A8%E0%A6%BF%E0%A6%9F%E0%A7%87%E0%A6%B0%20%E0%A6%AE%E0%A6%A7%E0%A7%8D%E0%A6%AF%E0%A7%87%20%E0%A6%B6%E0%A7%87%E0%A6%B7%20%E0%A6%B9%E0%A6%AC%E0%A7%87%E0%A5%A4%209ua99nBlS%2BG&charset=utf-8&coding=2"



Make 20 call, to send message
----------------------------------------
for i in {1..20}; do curl -o /dev/null -s -w '%{http_code},%{time_namelookup},%{time_connect},%{time_pretransfer},%{time_starttransfer}, %{time_total}s\n' "http://172.16.10.224:13146/cgi-bin/sendsms?username=apiHub&password=ApIhub&from=Banglalink&to=008801962424676&text=%E0%A0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%20342816%20%E0%A5%A4%20%E0%A6%86%E0%A6%AA%E0%A6%A8%E0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%E0%A6%B0%20%E0%A6%AE%E0%A7%87%E0%A7%9F%E0%A6%BE%E0%A6%A6%205%20%E0%A6%AE%E0%A6%BF%E0%A6%A8%E0%A6%BF%E0%A6%9F%E0%A7%87%E0%A6%B0%20%E0%A6%AE%E0%A6%A7%E0%A7%8D%E0%A6%AF%E0%A7%87%20%E0%A6%B6%E0%A7%87%E0%A6%B7%20%E0%A6%B9%E0%A6%AC%E0%A7%87%E0%A5%A4%209ua99nBlS%2BG&charset=utf-8&coding=2"; done


curl -o /dev/null -s -w '%{http_code},%{time_namelookup},%{time_connect},%{time_pretransfer},%{time_starttransfer}, %{time_total}s\n' "http://URL"  ; done





OPENAPI-PROVISIONING
======================================
curl -X POST "http://172.16.254.122:7380/openapi-provisioning/barring/6/barrings-with-level?actionType=unbarring&channel=FLEET_MANAGEMENT" -H "accept: application/vnd.banglalink.apihub-v1.0+json" -H "authorization: Bearer eyJhbGci..lMQ" -H "Content-Type: application/json" -d "{ \"barrLevel\": 0, \"msisdn\": \"8801409900191\"}"










=================================================
#    PROJECT |  BANK | UCBL                                          
================================================= 

Add Jar to Class Pom:
-----------------------------------------------
mvn install:install-file -Dfile=ojdbc6-11.2.0.4.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.4 -Dpackaging=jar
mvn install:install-file -Dfile=ojdbc6-11.2.0.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0 -Dpackaging=jar



