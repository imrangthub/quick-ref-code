#################################################
#                 BS23                         #
#################################################
BS0930
Md.Imran Hossain
md.imran@brainstation-23.com
Senior Software Engineer
 

OWN PATH
	Our leadership values are - OWN PATH
	Ownership
	Passion & Commitment
	Agility & Excellence
	Team Spirit
	Honesty




=================================================
#SBU TELCO MEETING |  2:30PM-4:00PM       
================================================= 

Team Working Hour:
-------------------------------------------------
10 * 8 = 80; 80 * 20 = 1600; 

10 * 8 = 80; 80 * 5 = 400; 

ManDays:
10 * 20 = 200; 

This Spring alocated:
190 Mandays
190 * 8 = 1520; 





Rock
-------------------------------------------------
IndividualRock:

Microservices performance analysis report automation
-----------------------------------------------------

What kind of information will visible with this report(primally):
	1. Request Fail Percentage
	2. 24 Hr's Request Status Counts
	3. Service RTT


Task Plan: Data Analysis and Reporting with be done below step.

Task Plan: Data Analysis and Reporting

Step 1: Row Data Source Identification
	Identify the sources of raw data relevant to the analysis.
	List the types of logs and data needed for further processing.

Step 2: Collect Logs
	Establish a systematic method to collect logs from identified sources.
	Ensure comprehensive retrieval of logs for accurate analysis.

Step 3: Filter Data by Date and type
	Organize the collected logs by date to facilitate time-based analysis.
	Implement a filtering mechanism to extract data within the specified date range.

Step 4: Analysis and Collection of Services Log Data with Required Status
	Perform a detailed analysis of the filtered logs to identify relevant services.
	Collect data associated with the required status for each service.
	Create a structured dataset for further processing.

Step 5: Identify Report Date
	Determine the reporting date based on the analyzed data.
	Confirm the time period for which the report will be generated.

Step 6: Generate Presentation information (Chart, Graph)
	Utilize the analyzed and filtered data to create visual representations (charts, graphs).
	Choose appropriate visualization tools based on the nature of the data.

Step 7: Generate Report as PDF
	Compile the visual representations and relevant data into a cohesive report.
	Convert the report into a PDF format for ease of distribution and presentation.

Step 8: Send Email with PDF Attachment
	Draft a concise email summarizing the analysis and report findings.
	Attach the generated PDF report to the email.
	Specify the recipients and ensure accurate email addresses.

Step 9: Schedule and Execute
	Schedule the execution of the entire process at a convenient time like: cronjob.
	Monitor the progress and intervene if any issues arise during the execution.

Step 11: Persiste data and documentation
	Document the entire process, including tools used, methodologies, and any challenges faced.
	Persiste record for future reference.







SBURock:
Built Monitoring system for resilient Microservices architecture.




##SBU TELCO 
-------------------------------------------------

Technical discussion: 8
Feature delivery: 90%
Code Review Hour: 6
UAT & QA feedback: 8
Operational and DevOps Activity: 8



----------------------------------------------
1)Technical discussion              5hr    ->8
2)Feature Delivery                  80%    ->80%
3)Code Review                       4hr    ->4
4)UAT & QA feedback  and DevOps     16hr   ->32     For Feature delivery+Internal VM paching


Next Rock:
----------------------------------------------
SBU: 
	System monitoring(logging,alerting and reporting) and Security analysis
How to keep monitoring for a cretical system with zero downtime and its Resiliency and high availability in microservices.
For that: Monitoring tools, report for analysis, alerting system, rederended backup server etc.
How ensure system security.

Individual:
	CKAD Exam preparation & certifications - Phase2	

	Microservice on cloud POC(A proof of concept)
The introduction of cloud with microservice, incluse:
Create environment on cloud for legacy system,Installation process for the project, and monetoring.







oLD Rock:
----------------------------------------------
SBURock:
	QuickStart Guide for Production-ready Spring Cloud Microservice

	QuickStart Guide for Production-ready Microservice with Spring Cloud

Medium to Enterprise disribution solution or any Microservice Architecture  commonly use Tech java-Spring-cloud   
For Starting a brand new Project then: How to desing the Architecture with Spring-cloud and How it work
For finding this question answer need to read a lot of documentation and RND what is take loatof time and effor.

In this case:
	Who going to start design and Build a Microservice:
	or
	New resource on boding to a projecct
	
If the Person Go throw on this Guid, 
	he/she will clear about how Spring-Cloud work
	Got an Idea how to design and implement Production Grade microservice Architecture.

This how this QuickStart Guide saveing a lot of time and cost for many of our BS developer.



IndividualRock:
	CKAD Exam preparation & certifications - Phase1


Individual Rock
	AWS exam certifications	(SSAA-C03).							
	Beta release of APIHUBv2. (Upgrade Framework, Build tools, and Runtime Envirionment-JRE for around 40 microservices services).
	

Pint:
	Banglalink take a inative to Upgrade APIHUB environment for APIHUBv2, this version upgration include Security Policy, implement Contanirzation and Cloud.
	This change effect on entier APIHUB echosystem what is constract with:
																			15 Business services
																			10 Intragition services
																			5  (DMZ) Monitoring services
											The services brodly 3 group, (MyBL, external client(Nogot, smsc-otp, iris etc) ), BTCL(Goverment)) around 40 services on 16  VM	 Cluster.
											
At First step of migration to APIHUBv2 I have to Update latest version Framework, change the build tools, and runtime environment.


Some time BL have to do TOP Urgent CR, for regulatory compliance order by adminstor/BTCL and must have to delivery a binded time priod.		
									
With On Going Support, CR and Mantanance- 
	I have to implement their requirment on Current System and align for their on going System upgration.       																			
	
Tentative time for first  release on 15 March.
AWS certificatio will help full for upcoming cloud requirment.

















555
=================================================

AWS:
https://www.credly.com/badges/adaad383-d8be-4889-a860-3694e7d2184d/linked_in_profile

apihunv2 beta-releqase
https://brainstationo365-my.sharepoint.com/personal/md_imran_brainstation-23_com/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fmd%5Fimran%5Fbrainstation%2D23%5Fcom%2FDocuments%2FMicrosoft%20Teams%20Chat%20Files%2Fbl%2Daward%2Ejpg&parent=%2Fpersonal%2Fmd%5Fimran%5Fbrainstation%2D23%5Fcom%2FDocuments%2FMicrosoft%20Teams%20Chat%20Files&ga=1





CORE VALUES: Focusing to delivery client requirment not only perfectly also smoth delivery 
             to make our company resource better front of client, Wish to value added for growing our company business.
Try to be best fit on my role and responsalibility also valuable contibutor.


ROLES AND RESPONSIBILITIES

1) Won the complate APIHUB echo system Application Layer.
2) Taken Onershop of the PROJECT like, Architecture mantanancy, system security, New Feture Incorporate with ongoing 
	CR and Manage resource for this and delivery the CR 
3) Keep communicate with BL-Manager build relationship stackholder and our Team Member 
4) Standby for 24h on-demand support


#Chalangeing Part: 
	Heir authority Instant requirment like BTCL, Banglalink Business Administrator or CTO 
	24h have to ready for Support Internal System problem like:Server Reboot, VM paching etc.




NestTG:

ACMP 4.0 certification from IBA University of Dhaka




=================================================
#APIHUB | Banglalink                                 
================================================= 

Team memember:
Saiful Islam
Md. Jamil Ahsan
Md. Zahid Ahmed
Mohammad Moniruzzaman
Morshed Alam



Service Deployment
=================================================

172.16.254.193 = SLB | NGINX

=>ps -fC java
=>ps -ef | grep otp
=>netstat -tulpn
=>kill -9 34071
=>tail -f nohup.out

--server.port=8888
--spring.profiles.active=dev-bl
--spring.cloud.config.uri=192.168.1.2:9091 
--CONFIG_SERVER=configserver:http://172.16.8.132:7085
--spring.cloud.config.uri=http://localhost:7185
--eureka.client.serviceUrl.defaultZone=http://192.168.1.2:7082/eureka/

--CONFIG_SERVER=configserver:http://172.16.11.34:7085



Slb-Operation
--------------------------------------------------------
=>nginx -t
Check configuration is ok
=>nginx reload
=>sudo nginx -s reload


=>tail -100 access.log |awk '{print $12,$8}'|sort|uniq --repeated --count
Print load balanced IPs and their status count

=>tail -f access.log | egrep -i '172.16.254.25'
Check single slb/dmz reveived trafic or not


=>=>cat  access.log | grep -v '200' | awk '{print $12 " " $8}' | sort | uniq --count

=>tail -100 access.log | egrep -i '172.16.254.25' | awk '{print $8}' | sort | uniq --repeated --count
=>tail -100 access.log | egrep -i '172.16.11.35' | awk '{print $8}' | sort | uniq --repeated --count
Lan server by ip request check




=>tail -f /app/apihub/Nginx_LB/logs/access.log | egrep -i '172.16.254.209'

=>tail -1000 access.log | egrep -i '172.16.11.34' | awk '{print $8}' | sort | uniq --repeated --count
=>tail -1000 /app/apihub/Nginx_LB/logs/access.log | egrep -i '172.16.254.194' | awk '{print $8}' | sort | uniq --repeated --count
Check the request status of specific server



=>tail -1000000 access.log  | grep "172.16.254.157:7081" | awk '{print $6"/"$8}' | awk -F"/" '{print $2 "||" $NF}' | sort | uniq -c | sort -nr
Service wise status code













=================================================
#  keycloak Server run
=================================================
=>./standalone.sh
Test from the keycloak app bin folder
=> nohup ./standalone.sh -b=0.0.0.0 &



Config:
------------------------------------------------
Step 1: Create a database in MySQL
  =>CREATE DATABASE keycloakdb CHARACTER SET utf8 COLLATE utf8_unicode_ci;

Step 2: Create a database user for Keycloak
  =>CREATE USER 'keycloakadmin'@'%' IDENTIFIED WITH mysql_native_password BY 'keycloak123';
  
Step 3: Grant all privileges
  GRANT ALL PRIVILEGES ON keycloakdb.* TO 'keycloakadmin'@'%';
  FLUSH PRIVILEGES; 
  
  

IDP DetailsURL: 
http://172.16.8.132:8080/auth/realms/banglalink/.well-known/openid-configuration


Tutorial:
https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials#oauth_essentials


=================================================
Gradle Setting
=================================================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
#distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=http\://172.16.254.122\:8081/repository/maven-public/gradle/gradle-wrapper/7.4.1/gradle-wrapper-7.4.1-bin.zip



=================================================
#    Nexus Repository                                        
================================================= 
http://172.16.254.122:8081/#browse/welcome

=>./nexus start
=>./nexus stop
=>./nexus status

\$ cd /etc/init.d
$ chkconfig --add nexus
$ chkconfig --levels 345 nexus on
$ service nexus start
Starting Nexus Repository Manager Pro...
$ tail -f /usr/local/nexus/logs/wrapper.log



Neir:
======================================
curl --location 'http://172.16.254.25:7180/identity-register/NeirResponse/api/neir-response' \
--header 'accept: */*' \
--header 'Content-Type: application/json' \
--header 'Authorization: Basic YmFuZ2xhbGluazpibF9laXJAMjAyMQ==' \
--data '{
    "actionType": "service_response",
    "replyTs": 1689154593113,
    "replyMessage": {
        "imeiInfo": {
            "imei": "35341010716903",
            "tagName": "WL"
        },
        "imsiInfo": {
            "imsi": "470039938757329",
            "msisdn": "8801926924688"
        },
        "requestType": "REG",
        "docInfo": {
            "docId": "2849186586",
            "docTypeId": "5"
        }
    },
    "requestId": "af41dee1-6f49-4bc8-8152-20111096e367",
    "isSuccess": true
}'


apihub Debuging Server issue
===========================
MeAs:
echo $(date);echo $(hostname -i);cat /etc/os-release | grep PRETTY_NAME; free -h | awk '/^Mem:/ {print "RAM Total: " $2, "Used: " $3}'; echo "CPU:"; lscpu | grep -E 'Model name|CPU\(s\):'; echo "HDisk:Size,Used,Avail,Use%,MntOn"; df -h | grep -E '/$|/app$|/boot$'; ps -fC java17; crontab -l




MyBL | Nginx Loadbalancer
=>http://172.16.254.193:7171/octopus-iris/actuator/info
=>http://172.16.254.193:7171/octopus-iris/swagger-ui.html


OPENAPI | Nginx Loadbalancer
172.16.254.51


Simple Log:
172.16.254.137 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information/52906902/prepaid-balances?sortType=SERVICE_TYPE HTTP/1.1" 200 1534 "-" "-" 172.16.254.194:7081 0.138 0.138 f3cb569287401a4624932aa84d554e9d
172.16.254.224 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information/customer-information/get-language/channel/MobileApp/msisdn/8801971481479/ HTTP/1.1" 200 104 "-" "-" 172.16.254.209:7081 0.019 0.019 1ef3a9c59c0e3f5b393daa2dafdd2acf
172.16.254.147 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information/258573271/subscription-products HTTP/1.1" 200 1130 "-" "-" 172.16.254.194:7081 0.014 0.014 196ad6c4269f4a95c609edf4afa71ada
172.16.254.137 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information?include=SUBSCRIPTION_TYPES&msisdn=8801971158267 HTTP/1.1" 200 348 "-" "-" 172.16.254.194:7081 0.012 0.012 1f98eb21d4f008cbe8315f35d734a614
172.16.254.224 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information/146230025/available-loan-products HTTP/1.1" 200 920 "-" "-" 172.16.254.11:7081 0.146 0.146 e876ffc7d4980eb784440572eaac6fea
172.16.254.2 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information/222590886/prepaid-balances?sortType=SERVICE_TYPE HTTP/1.1" 200 808 "-" "-" 172.16.254.11:7081 0.116 0.116 ab7df153a9043dd6461d0756e189383f
172.16.254.196 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information?include=SUBSCRIPTION_TYPES&msisdn=8801922822731 HTTP/1.1" 200 348 "-" "-" 172.16.254.209:7081 0.013 0.012 e89f35f99e25f2edb2d6e2592891418a
172.16.254.137 - [22/Jun/2023:11:43:00 +0600] "GET /loyalty/loyalty//priyojon-status?customerId=1921134591 HTTP/1.1" 404 140 "-" "-" 172.16.254.194:7081 0.005 0.004 46193e9ec47153fbd8b074e0e0410187
172.16.254.2 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information/258273756/available-loan-products HTTP/1.1" 200 12 "-" "-" 172.16.254.194:7081 0.011 0.010 ca0ae16db435aa54250184e59df0f4c4
172.16.254.196 - [22/Jun/2023:11:43:00 +0600] "GET /customer-information/customer-information/46492192/available-loan-products HTTP/1.1" 200 711 "-" "-" 172.16.191.35:7081 0.210 0.210 05e39fbd98784545c5e2f5ee13cf4e8d




'$remote_addr -   [$time_local]  "$request"' '$status   $body_bytes_sent "$http_referer"' '"$http_user_agent" $upstream_addr $upstream_response_time'  " $request_time" " $request_id"
	$1		  $2	$3$4		   $5$6$7	    $8			$9 				$10				    $11					$12				$13 				       $14     		   $15


172.16.254.196 -  [22/Jun/2023:11:43:00 +0600] "GET /loyalty/loyalty//priyojon-status?customerId=1968889839 HTTP/1.1" 404 140 "-" "-" 172.16.254.194:7081 0.001 0.002 8dd86ce4639f843c4fc7b8cabee3cfea
   $1         $2      $3                 $4     $5          $6                                                 $7     $8  $9 $10  $11          $12         $13   $14         $15


172.16.254.137 - [22/Jun/2023:00:01:32 +0600] "GET /loyalty/loyalty//priyojon-status?customerId=1920842816 HTTP/1.1" 404
=>awk '{print $1,$2,$3,$4,$5,$6,$7, $8}' access.log

711 "-" "-" 172.16.254.11:7081 0.145 0.145 15b525e112b18fa40a5051846f19effa 
=>awk '{print $9,$10,$11,$12,$13,$14,$15}' access.log


System check:
---------------------------------------------------
sar -u
CPU - sar -u
Memory - free -g, sar -r
Disk - df -kh




DebugScriptBasic:
-----------------------------------
=>tail -f access.log


Filtering | by property
----------------------------------------------------
=>cat access.log | grep '22/Jun/2023'
=>cat access.log | grep '22/Jun/2023' | wc -l
Filter by date


=>cat access.log | grep -v '200' | awk '{print $8}' | sort | uniq --count
=>tail access.log | grep -v '200' | awk '{print $8}' | sort | uniq --count



=>tail -5 access.log | awk '22/Jun/2023' | sort | uniq --count
=>tail -f access.log | awk '{print $12,$8}' | egrep --color=auto -i '172.16.254.157'







Count:
----------------------------------
=>cat temp.log | wc -l
Count log number


=>awk '{print $8}' access.log
Print Status Code 

=>awk '{print $8,$12}' access.log
=>tail -5 access.log | awk '{print $8,$12}'
Print Status Code and gate-way node IP

=>tail -5 access.log | awk '{print $8,$12}' | sort | uniq --count
Which server get how many status code with count and IP for last 5 Request




DebugScript1:
-----------------------------------

=>tail -f access.log | grep -v '200'  | grep -v '202'
Filtering status code except 200 and 202 

=>cat access.log | awk '{print $(NF-3)}'
=>cat access.log | awk '{print $(NF-3)}' | sort | uniq --count
Printing only destination IP/Count 


=>cat access.log | grep –v '200'  | grep –v '202' | awk '{print $(NF-2)}' | sort | uniq --count
You can mix between these commands to achieve your goal. For example, you want to see which destination server is failing:

=>cat  access.log | grep -v '200' | awk '{print $12 " " $8}' | sort | uniq --count
=>tail -f access.log | grep '254.194' | grep -v '200'  | grep -v '202'


=>grep '2023:16' access.log | grep otp | awk '{if ($8 == 429)  print $1, $3 }' | sort | uniq -c | sort -nr | head -20



DebugScript2:
-----------------------------------

=>tail -100000 ../logs/access.log | awk '{ print $8}'|sort |uniq --repeated --count
Print last 100000 request status count summery

=>tail -10000 access.log |awk '{print $12,$8}'|sort|uniq --repeated --count
Print load balanced IPs and their status count


=>tail -10000 /app/apihub/Nginx_LB/logs/access.log | grep prepaid|awk '{ total += $14; count++ } END { print total/count }'
Average RTT

=>for (( i = 5; i >=0; i-- )) ; do grep $(date +%d/%b/%Y:%R -d "-$i min") /app/apihub/Nginx_LB/logs/access.log; done| awk '{ print $8}'|sort |uniq --repeated --count
Last 5 minute request satus


=>grep prepaid access.log|tail -1000|awk '{ if ( $14 > .750 ) print $0 }'|wc -l
If RTT greater than:


=>for i in {1..20}; do curl -o /dev/null -s -w '%{http_code},%{time_namelookup},%{time_connect},%{time_pretransfer},%{time_starttransfer}, %{time_total}s\n' "http://10.74.10.10:443/api/v1/subscriptions/32286622/combined-usage-reports"  ; done
20 continuous calls to check DBSS API performance 

=>tail -1000 ../logs/access.log | grep prepaid|awk '{ if (max<$14){ max=$14 }}END {print max}'
Max RTT



By ImV:
=================================================
Avg. RTT: 
	tail -10000 /app/apihub/Nginx_LB/logs/access.log | grep prepaid|awk '{ total += $14; count++ } END { print total/count }'


Max RTT:  
	tail -100000 ../logs/access.log | grep prepaid|awk '{ if (max<$14){ max=$14 }}END {print max}'


Min. wise Transactions:
	for i in `grep "26/Jul/2022:11:4[0-9]" /app/apihub/Nginx_LB/logs/access.log |grep available-product|cut -d "[" -f 2|cut -d ":" -f 1,2,3|awk '{print $1}'|sort|uniq`; do a=`grep $i /app/apihub/Nginx_LB/logs/access.log |grep available-product|cut -d "[" -f 2|awk '{print $1}'|wc -l`; echo $i,$a; done

TPS at certain Hours:
	for i in `grep "26/Jul/2022:11:4[0-9]" /app/apihub/Nginx_LB/logs/access.log |grep available-product|cut -d "[" -f 2|awk '{print $1}'|sort|uniq`; do a=`grep $i /app/apihub/Nginx_LB/logs/access.log |grep available-product|cut -d "[" -f 2|awk '{print $1}'|wc -l`; echo $i,$a; done


No. of High RTT Request Counts:
	  cat ../logs/access.log | grep prepaid|awk '{ if ( $14 > .750 ) print $0 }'|wc -l

	  grep prepaid access.log|awk '{ if ( $14 > .750 ) print $0 }'|wc -l


Overall RTT: 
	tail -100000 /app/apihub/Nginx_LB/logs/access.log|awk '{ total += $14; count++ } END { print total/count }'


Error Rate:
	tail -100000 ../logs/access.log | awk '{ print $8}'|sort |uniq --repeated --count



Actual Error Count:  
	tail -10000 ../logs/access.log |awk '{if ( $8 == 500 ) print $0}' |wc -l



Last % mins Log status:

	for (( i = 5; i >=0; i-- )) ; do grep $(date +%d/%b/%Y:%R -d "-$i  min")  /app/apihub/Nginx_LB/logs/access.log; done|wc -l 

	for (( i = 5; i >=0; i-- )) ; do grep $(date +%d/%b/%Y:%R -d "-$i  min")  /app/apihub/Nginx_LB/logs/access.log; done| awk '{ print $8}'|sort |uniq --repeated --count


Minwise Max TPS:
	for i in `grep available-product access.log.280722|awk '{ print $3}'|cut -d ":" -f 1,2,3|cut -d "[" -f 2|sort|uniq`; do a=`grep $i access.log.280722 |grep available-product|cut -d "[" -f 2|awk '{print $1}'| sort|uniq --repeated --count|awk '{ if (max<$1){ max=$1 }}END {print max}'`; echo $i,$a; done


10 min wise Max TPS:

	 for y in `grep available-product access.log | awk '{ print $3}' | cut -d ":" -f 1,2,3 | cut -d "[" -f 2 | cut --complement -c 17 | sort | uniq`; 
                do 
                        a=`grep $y $i |grep available-product|cut -d "[" -f 2|awk '{print $1}'| sort|uniq --repeated --count|awk '{ if (max<$1){ max=$1 }}END {print max}'`; 
                       
			echo $y,$a  ;
                        
                done

Minwise RTT @ Specific Hours:
	for i in `grep product-offer access.log.030922|grep "03/Sep/2022:1[8-9]"| awk '{ print $3}'|cut -d ":" -f 1,2,3|cut -d "[" -f 2|sort|uniq`; do a=`grep $i access.log.030922 |grep product-offer|cut -d "[" -f 2|awk '{print $1}'| sort|uniq --repeated --count|awk '{ total += $14; count++ } END { print total/count }'`; echo $i,$a; done

To Get Max TPS @Specific Second:
	 grep "2022:17" /app/apihub/Nginx_LB/logs/logarchive/access.log.141122| awk '{print $3}'|cut -d "[" -f 2|awk '{print $1}'|sort|uniq --repeated --count|awk '{ if (max<$1){ max=$1; tm=$2 }}END {print max,tm}'








SMS
=================================================

curl -X GET "http://172.16.8.132:6616/cgi-bin/sendsms?username=apiHub&password=ApIhub&from=Banglalink&to=8801916894486&text=TextMsg&charset=utf-8&coding=2"


curl -X GET "http://10.10.31.113:13146/cgi-bin/sendsms?username=apiHub&password=ApIhub&from=Banglalink&to=008801962424676&text=%E0%A0%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%20342816%20%E0%A5%A4%20%E0%A6%86%E0%A6%AA%E0%A6%A8%E0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%E0%A6%B0%20%E0%A6%AE%E0%A7%87%E0%A7%9F%E0%A6%BE%E0%A6%A6%205%20%E0%A6%AE%E0%A6%BF%E0%A6%A8%E0%A6%BF%E0%A6%9F%E0%A7%87%E0%A6%B0%20%E0%A6%AE%E0%A6%A7%E0%A7%8D%E0%A6%AF%E0%A7%87%20%E0%A6%B6%E0%A7%87%E0%A6%B7%20%E0%A6%B9%E0%A6%AC%E0%A7%87%E0%A5%A4%209ua99nBlS%2BG&charset=utf-8&coding=2"



curl -X GET "http://172.16.10.224:13146/cgi-bin/sendsms?username=apiHub&password=ApIhub&from=Banglalink&to=008801962424676&text=%E0%A0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%20342816%20%E0%A5%A4%20%E0%A6%86%E0%A6%AA%E0%A6%A8%E0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%E0%A6%B0%20%E0%A6%AE%E0%A7%87%E0%A7%9F%E0%A6%BE%E0%A6%A6%205%20%E0%A6%AE%E0%A6%BF%E0%A6%A8%E0%A6%BF%E0%A6%9F%E0%A7%87%E0%A6%B0%20%E0%A6%AE%E0%A6%A7%E0%A7%8D%E0%A6%AF%E0%A7%87%20%E0%A6%B6%E0%A7%87%E0%A6%B7%20%E0%A6%B9%E0%A6%AC%E0%A7%87%E0%A5%A4%209ua99nBlS%2BG&charset=utf-8&coding=2"



Make 20 call, to send message
----------------------------------------
for i in {1..20}; do curl -o /dev/null -s -w '%{http_code},%{time_namelookup},%{time_connect},%{time_pretransfer},%{time_starttransfer}, %{time_total}s\n' "http://172.16.10.224:13146/cgi-bin/sendsms?username=apiHub&password=ApIhub&from=Banglalink&to=008801962424676&text=%E0%A0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%20342816%20%E0%A5%A4%20%E0%A6%86%E0%A6%AA%E0%A6%A8%E0%A6%BE%E0%A6%B0%20%E0%A6%93%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A6%BF%E0%A6%B0%20%E0%A6%AE%E0%A7%87%E0%A7%9F%E0%A6%BE%E0%A6%A6%205%20%E0%A6%AE%E0%A6%BF%E0%A6%A8%E0%A6%BF%E0%A6%9F%E0%A7%87%E0%A6%B0%20%E0%A6%AE%E0%A6%A7%E0%A7%8D%E0%A6%AF%E0%A7%87%20%E0%A6%B6%E0%A7%87%E0%A6%B7%20%E0%A6%B9%E0%A6%AC%E0%A7%87%E0%A5%A4%209ua99nBlS%2BG&charset=utf-8&coding=2"; done


curl -o /dev/null -s -w '%{http_code},%{time_namelookup},%{time_connect},%{time_pretransfer},%{time_starttransfer}, %{time_total}s\n' "http://URL"  ; done





OPENAPI-PROVISIONING
======================================
curl -X POST "http://172.16.254.122:7380/openapi-provisioning/barring/6/barrings-with-level?actionType=unbarring&channel=FLEET_MANAGEMENT" -H "accept: application/vnd.banglalink.apihub-v1.0+json" -H "authorization: Bearer eyJhbGci..lMQ" -H "Content-Type: application/json" -d "{ \"barrLevel\": 0, \"msisdn\": \"8801409900191\"}"





=================================================
#  Kubernetes                                         
================================================= 

https://172.16.200.192:31000

http://gitlab.banglalink.net/api-hub/mfs-integration.git

/root/apihub/apihub-microservice
/root/apihub/apihub-controller
172.16.200.192 
http://172.16.200.192:31515/




=================================================
#    PROJECT |  BANK | UCBL                                          
================================================= 

Add Jar to Class Pom:
-----------------------------------------------
mvn install:install-file -Dfile=ojdbc6-11.2.0.4.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.4 -Dpackaging=jar
mvn install:install-file -Dfile=ojdbc6-11.2.0.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0 -Dpackaging=jar



http://repo.banglalink.net:8181/open-api/openapi-iris.git


weekllyMetingK8:
https://teams.microsoft.com/l/meetup-join/19%3ameeting_Yzk2NTA2ZmYtZmY1Yi00N2E4LWIwYzEtYjIyMzc0OWMyZWI1%40thread.v2/0?context=%7b%22Tid%22%3a%22a1e21495-2087-4312-a718-7f84ad109439%22%2c%22Oid%22%3a%22d33559d5-d2cf-4f1a-a960-d5a2a9c07aa7%22%7d






